/*! For license information please see main.6528a5b67868fd4c2a74.js.LICENSE.txt */
(()=>{var e,t,n,r,i={2122:(e,t,n)=>{"use strict";function r(){return(r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}n.d(t,{Z:()=>r})},3552:(e,t,n)=>{"use strict";function r(e,t){return(r=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function i(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,r(e,t)}n.d(t,{Z:()=>i})},9756:(e,t,n)=>{"use strict";function r(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}n.d(t,{Z:()=>r})},7531:(e,t,n)=>{"use strict";n.d(t,{lX:()=>y,q_:()=>E,ob:()=>f,PP:()=>C,Ep:()=>d});var r=n(2122);function i(e){return"/"===e.charAt(0)}function o(e,t){for(var n=t,r=n+1,i=e.length;r<i;n+=1,r+=1)e[n]=e[r];e.pop()}var a=n(2177);function s(e){return"/"===e.charAt(0)?e:"/"+e}function l(e){return"/"===e.charAt(0)?e.substr(1):e}function c(e,t){return function(e,t){return 0===e.toLowerCase().indexOf(t.toLowerCase())&&-1!=="/?#".indexOf(e.charAt(t.length))}(e,t)?e.substr(t.length):e}function u(e){return"/"===e.charAt(e.length-1)?e.slice(0,-1):e}function d(e){var t=e.pathname,n=e.search,r=e.hash,i=t||"/";return n&&"?"!==n&&(i+="?"===n.charAt(0)?n:"?"+n),r&&"#"!==r&&(i+="#"===r.charAt(0)?r:"#"+r),i}function f(e,t,n,a){var s;"string"==typeof e?(s=function(e){var t=e||"/",n="",r="",i=t.indexOf("#");-1!==i&&(r=t.substr(i),t=t.substr(0,i));var o=t.indexOf("?");return-1!==o&&(n=t.substr(o),t=t.substr(0,o)),{pathname:t,search:"?"===n?"":n,hash:"#"===r?"":r}}(e)).state=t:(void 0===(s=(0,r.Z)({},e)).pathname&&(s.pathname=""),s.search?"?"!==s.search.charAt(0)&&(s.search="?"+s.search):s.search="",s.hash?"#"!==s.hash.charAt(0)&&(s.hash="#"+s.hash):s.hash="",void 0!==t&&void 0===s.state&&(s.state=t));try{s.pathname=decodeURI(s.pathname)}catch(e){throw e instanceof URIError?new URIError('Pathname "'+s.pathname+'" could not be decoded. This is likely caused by an invalid percent-encoding.'):e}return n&&(s.key=n),a?s.pathname?"/"!==s.pathname.charAt(0)&&(s.pathname=function(e,t){void 0===t&&(t="");var n,r=e&&e.split("/")||[],a=t&&t.split("/")||[],s=e&&i(e),l=t&&i(t),c=s||l;if(e&&i(e)?a=r:r.length&&(a.pop(),a=a.concat(r)),!a.length)return"/";if(a.length){var u=a[a.length-1];n="."===u||".."===u||""===u}else n=!1;for(var d=0,f=a.length;f>=0;f--){var h=a[f];"."===h?o(a,f):".."===h?(o(a,f),d++):d&&(o(a,f),d--)}if(!c)for(;d--;d)a.unshift("..");!c||""===a[0]||a[0]&&i(a[0])||a.unshift("");var p=a.join("/");return n&&"/"!==p.substr(-1)&&(p+="/"),p}(s.pathname,a.pathname)):s.pathname=a.pathname:s.pathname||(s.pathname="/"),s}function h(){var e=null,t=[];return{setPrompt:function(t){return e=t,function(){e===t&&(e=null)}},confirmTransitionTo:function(t,n,r,i){if(null!=e){var o="function"==typeof e?e(t,n):e;"string"==typeof o?"function"==typeof r?r(o,i):i(!0):i(!1!==o)}else i(!0)},appendListener:function(e){var n=!0;function r(){n&&e.apply(void 0,arguments)}return t.push(r),function(){n=!1,t=t.filter((function(e){return e!==r}))}},notifyListeners:function(){for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];t.forEach((function(e){return e.apply(void 0,n)}))}}}var p=!("undefined"==typeof window||!window.document||!window.document.createElement);function g(e,t){t(window.confirm(e))}var m="popstate",v="hashchange";function b(){try{return window.history.state||{}}catch(e){return{}}}function y(e){void 0===e&&(e={}),p||(0,a.Z)(!1);var t,n=window.history,i=(-1===(t=window.navigator.userAgent).indexOf("Android 2.")&&-1===t.indexOf("Android 4.0")||-1===t.indexOf("Mobile Safari")||-1!==t.indexOf("Chrome")||-1!==t.indexOf("Windows Phone"))&&window.history&&"pushState"in window.history,o=!(-1===window.navigator.userAgent.indexOf("Trident")),l=e,y=l.forceRefresh,x=void 0!==y&&y,_=l.getUserConfirmation,w=void 0===_?g:_,k=l.keyLength,S=void 0===k?6:k,E=e.basename?u(s(e.basename)):"";function M(e){var t=e||{},n=t.key,r=t.state,i=window.location,o=i.pathname+i.search+i.hash;return E&&(o=c(o,E)),f(o,r,n)}function C(){return Math.random().toString(36).substr(2,S)}var P=h();function O(e){(0,r.Z)(V,e),V.length=n.length,P.notifyListeners(V.location,V.action)}function T(e){(function(e){return void 0===e.state&&-1===navigator.userAgent.indexOf("CriOS")})(e)||j(M(e.state))}function D(){j(M(b()))}var L=!1;function j(e){L?(L=!1,O()):P.confirmTransitionTo(e,"POP",w,(function(t){t?O({action:"POP",location:e}):function(e){var t=V.location,n=R.indexOf(t.key);-1===n&&(n=0);var r=R.indexOf(e.key);-1===r&&(r=0);var i=n-r;i&&(L=!0,z(i))}(e)}))}var A=M(b()),R=[A.key];function N(e){return E+d(e)}function z(e){n.go(e)}var F=0;function I(e){1===(F+=e)&&1===e?(window.addEventListener(m,T),o&&window.addEventListener(v,D)):0===F&&(window.removeEventListener(m,T),o&&window.removeEventListener(v,D))}var B=!1,V={length:n.length,action:"POP",location:A,createHref:N,push:function(e,t){var r="PUSH",o=f(e,t,C(),V.location);P.confirmTransitionTo(o,r,w,(function(e){if(e){var t=N(o),a=o.key,s=o.state;if(i)if(n.pushState({key:a,state:s},null,t),x)window.location.href=t;else{var l=R.indexOf(V.location.key),c=R.slice(0,l+1);c.push(o.key),R=c,O({action:r,location:o})}else window.location.href=t}}))},replace:function(e,t){var r="REPLACE",o=f(e,t,C(),V.location);P.confirmTransitionTo(o,r,w,(function(e){if(e){var t=N(o),a=o.key,s=o.state;if(i)if(n.replaceState({key:a,state:s},null,t),x)window.location.replace(t);else{var l=R.indexOf(V.location.key);-1!==l&&(R[l]=o.key),O({action:r,location:o})}else window.location.replace(t)}}))},go:z,goBack:function(){z(-1)},goForward:function(){z(1)},block:function(e){void 0===e&&(e=!1);var t=P.setPrompt(e);return B||(I(1),B=!0),function(){return B&&(B=!1,I(-1)),t()}},listen:function(e){var t=P.appendListener(e);return I(1),function(){I(-1),t()}}};return V}var x="hashchange",_={hashbang:{encodePath:function(e){return"!"===e.charAt(0)?e:"!/"+l(e)},decodePath:function(e){return"!"===e.charAt(0)?e.substr(1):e}},noslash:{encodePath:l,decodePath:s},slash:{encodePath:s,decodePath:s}};function w(e){var t=e.indexOf("#");return-1===t?e:e.slice(0,t)}function k(){var e=window.location.href,t=e.indexOf("#");return-1===t?"":e.substring(t+1)}function S(e){window.location.replace(w(window.location.href)+"#"+e)}function E(e){void 0===e&&(e={}),p||(0,a.Z)(!1);var t=window.history,n=(window.navigator.userAgent.indexOf("Firefox"),e),i=n.getUserConfirmation,o=void 0===i?g:i,l=n.hashType,m=void 0===l?"slash":l,v=e.basename?u(s(e.basename)):"",b=_[m],y=b.encodePath,E=b.decodePath;function M(){var e=E(k());return v&&(e=c(e,v)),f(e)}var C=h();function P(e){(0,r.Z)(B,e),B.length=t.length,C.notifyListeners(B.location,B.action)}var O=!1,T=null;function D(){var e,t,n=k(),r=y(n);if(n!==r)S(r);else{var i=M(),a=B.location;if(!O&&(t=i,(e=a).pathname===t.pathname&&e.search===t.search&&e.hash===t.hash))return;if(T===d(i))return;T=null,function(e){if(O)O=!1,P();else{C.confirmTransitionTo(e,"POP",o,(function(t){t?P({action:"POP",location:e}):function(e){var t=B.location,n=R.lastIndexOf(d(t));-1===n&&(n=0);var r=R.lastIndexOf(d(e));-1===r&&(r=0);var i=n-r;i&&(O=!0,N(i))}(e)}))}}(i)}}var L=k(),j=y(L);L!==j&&S(j);var A=M(),R=[d(A)];function N(e){t.go(e)}var z=0;function F(e){1===(z+=e)&&1===e?window.addEventListener(x,D):0===z&&window.removeEventListener(x,D)}var I=!1,B={length:t.length,action:"POP",location:A,createHref:function(e){var t=document.querySelector("base"),n="";return t&&t.getAttribute("href")&&(n=w(window.location.href)),n+"#"+y(v+d(e))},push:function(e,t){var n="PUSH",r=f(e,void 0,void 0,B.location);C.confirmTransitionTo(r,n,o,(function(e){if(e){var t=d(r),i=y(v+t);if(k()!==i){T=t,function(e){window.location.hash=e}(i);var o=R.lastIndexOf(d(B.location)),a=R.slice(0,o+1);a.push(t),R=a,P({action:n,location:r})}else P()}}))},replace:function(e,t){var n="REPLACE",r=f(e,void 0,void 0,B.location);C.confirmTransitionTo(r,n,o,(function(e){if(e){var t=d(r),i=y(v+t);k()!==i&&(T=t,S(i));var o=R.indexOf(d(B.location));-1!==o&&(R[o]=t),P({action:n,location:r})}}))},go:N,goBack:function(){N(-1)},goForward:function(){N(1)},block:function(e){void 0===e&&(e=!1);var t=C.setPrompt(e);return I||(F(1),I=!0),function(){return I&&(I=!1,F(-1)),t()}},listen:function(e){var t=C.appendListener(e);return F(1),function(){F(-1),t()}}};return B}function M(e,t,n){return Math.min(Math.max(e,t),n)}function C(e){void 0===e&&(e={});var t=e,n=t.getUserConfirmation,i=t.initialEntries,o=void 0===i?["/"]:i,a=t.initialIndex,s=void 0===a?0:a,l=t.keyLength,c=void 0===l?6:l,u=h();function p(e){(0,r.Z)(x,e),x.length=x.entries.length,u.notifyListeners(x.location,x.action)}function g(){return Math.random().toString(36).substr(2,c)}var m=M(s,0,o.length-1),v=o.map((function(e){return f(e,void 0,"string"==typeof e?g():e.key||g())})),b=d;function y(e){var t=M(x.index+e,0,x.entries.length-1),r=x.entries[t];u.confirmTransitionTo(r,"POP",n,(function(e){e?p({action:"POP",location:r,index:t}):p()}))}var x={length:v.length,action:"POP",location:v[m],index:m,entries:v,createHref:b,push:function(e,t){var r="PUSH",i=f(e,t,g(),x.location);u.confirmTransitionTo(i,r,n,(function(e){if(e){var t=x.index+1,n=x.entries.slice(0);n.length>t?n.splice(t,n.length-t,i):n.push(i),p({action:r,location:i,index:t,entries:n})}}))},replace:function(e,t){var r="REPLACE",i=f(e,t,g(),x.location);u.confirmTransitionTo(i,r,n,(function(e){e&&(x.entries[x.index]=i,p({action:r,location:i}))}))},go:y,goBack:function(){y(-1)},goForward:function(){y(1)},canGo:function(e){var t=x.index+e;return t>=0&&t<x.entries.length},block:function(e){return void 0===e&&(e=!1),u.setPrompt(e)},listen:function(e){return u.appendListener(e)}};return x}},8679:(e,t,n)=>{"use strict";var r=n(9864),i={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},o={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},a={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},s={};function l(e){return r.isMemo(e)?a:s[e.$$typeof]||i}s[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},s[r.Memo]=a;var c=Object.defineProperty,u=Object.getOwnPropertyNames,d=Object.getOwnPropertySymbols,f=Object.getOwnPropertyDescriptor,h=Object.getPrototypeOf,p=Object.prototype;e.exports=function e(t,n,r){if("string"!=typeof n){if(p){var i=h(n);i&&i!==p&&e(t,i,r)}var a=u(n);d&&(a=a.concat(d(n)));for(var s=l(t),g=l(n),m=0;m<a.length;++m){var v=a[m];if(!(o[v]||r&&r[v]||g&&g[v]||s&&s[v])){var b=f(n,v);try{c(t,v,b)}catch(e){}}}}return t}},5681:(e,t,n)=>{"use strict";e.exports=n.p+"images/triangle1d107.svg"},5226:(e,t,n)=>{"use strict";e.exports=n.p+"images/checked3613a.svg"},9868:(e,t,n)=>{"use strict";e.exports=n.p+"images/star2b34c.svg"},9442:(e,t,n)=>{"use strict";e.exports=n.p+"images/goldPrice1f8f4.svg"},9679:(e,t,n)=>{"use strict";e.exports=n.p+"images/ok1a141.svg"},3587:(e,t,n)=>{"use strict";e.exports=n.p+"images/diamond23923d.svg"},1050:(e,t,n)=>{"use strict";e.exports=n.p+"images/diamondShadow712f6.svg"},3884:(e,t,n)=>{"use strict";e.exports=n.p+"images/gold2c140f.svg"},1442:(e,t,n)=>{"use strict";e.exports=n.p+"images/goldShadowc12a3.svg"},234:(e,t,n)=>{"use strict";e.exports=n.p+"images/bideb295.svg"},5257:(e,t,n)=>{"use strict";e.exports=n.p+"images/minimumb1202.svg"},2579:(e,t,n)=>{"use strict";e.exports=n.p+"images/price92c3c.svg"},4317:(e,t,n)=>{"use strict";e.exports=n.p+"images/purchased7ed8e.svg"},9173:(e,t,n)=>{"use strict";e.exports=n.p+"images/playerbc37d.svg"},7403:(e,t,n)=>{"use strict";e.exports=n.p+"images/silver2a04d9.svg"},6139:(e,t,n)=>{"use strict";e.exports=n.p+"images/silverShadow5723d.svg"},4133:(e,t,n)=>{"use strict";e.exports=n.p+"images/wood20d5fe.svg"},6386:(e,t,n)=>{"use strict";e.exports=n.p+"images/woodShadow4d06a.svg"},6646:(e,t,n)=>{"use strict";e.exports=n.p+"images/ultimateb3bb7.svg"},5826:e=>{e.exports=Array.isArray||function(e){return"[object Array]"==Object.prototype.toString.call(e)}},8552:(e,t,n)=>{var r=n(852)(n(5639),"DataView");e.exports=r},1989:(e,t,n)=>{var r=n(1789),i=n(401),o=n(7667),a=n(1327),s=n(1866);function l(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}l.prototype.clear=r,l.prototype.delete=i,l.prototype.get=o,l.prototype.has=a,l.prototype.set=s,e.exports=l},8407:(e,t,n)=>{var r=n(7040),i=n(4125),o=n(2117),a=n(7518),s=n(4705);function l(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}l.prototype.clear=r,l.prototype.delete=i,l.prototype.get=o,l.prototype.has=a,l.prototype.set=s,e.exports=l},7071:(e,t,n)=>{var r=n(852)(n(5639),"Map");e.exports=r},3369:(e,t,n)=>{var r=n(4785),i=n(1285),o=n(6e3),a=n(9916),s=n(5265);function l(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}l.prototype.clear=r,l.prototype.delete=i,l.prototype.get=o,l.prototype.has=a,l.prototype.set=s,e.exports=l},3818:(e,t,n)=>{var r=n(852)(n(5639),"Promise");e.exports=r},8525:(e,t,n)=>{var r=n(852)(n(5639),"Set");e.exports=r},8668:(e,t,n)=>{var r=n(3369),i=n(619),o=n(2385);function a(e){var t=-1,n=null==e?0:e.length;for(this.__data__=new r;++t<n;)this.add(e[t])}a.prototype.add=a.prototype.push=i,a.prototype.has=o,e.exports=a},6384:(e,t,n)=>{var r=n(8407),i=n(7465),o=n(3779),a=n(7599),s=n(4758),l=n(4309);function c(e){var t=this.__data__=new r(e);this.size=t.size}c.prototype.clear=i,c.prototype.delete=o,c.prototype.get=a,c.prototype.has=s,c.prototype.set=l,e.exports=c},2705:(e,t,n)=>{var r=n(5639).Symbol;e.exports=r},1149:(e,t,n)=>{var r=n(5639).Uint8Array;e.exports=r},577:(e,t,n)=>{var r=n(852)(n(5639),"WeakMap");e.exports=r},6874:e=>{e.exports=function(e,t,n){switch(n.length){case 0:return e.call(t);case 1:return e.call(t,n[0]);case 2:return e.call(t,n[0],n[1]);case 3:return e.call(t,n[0],n[1],n[2])}return e.apply(t,n)}},4963:e=>{e.exports=function(e,t){for(var n=-1,r=null==e?0:e.length,i=0,o=[];++n<r;){var a=e[n];t(a,n,e)&&(o[i++]=a)}return o}},4636:(e,t,n)=>{var r=n(2545),i=n(5694),o=n(1469),a=n(4144),s=n(5776),l=n(6719),c=Object.prototype.hasOwnProperty;e.exports=function(e,t){var n=o(e),u=!n&&i(e),d=!n&&!u&&a(e),f=!n&&!u&&!d&&l(e),h=n||u||d||f,p=h?r(e.length,String):[],g=p.length;for(var m in e)!t&&!c.call(e,m)||h&&("length"==m||d&&("offset"==m||"parent"==m)||f&&("buffer"==m||"byteLength"==m||"byteOffset"==m)||s(m,g))||p.push(m);return p}},9932:e=>{e.exports=function(e,t){for(var n=-1,r=null==e?0:e.length,i=Array(r);++n<r;)i[n]=t(e[n],n,e);return i}},2488:e=>{e.exports=function(e,t){for(var n=-1,r=t.length,i=e.length;++n<r;)e[i+n]=t[n];return e}},2908:e=>{e.exports=function(e,t){for(var n=-1,r=null==e?0:e.length;++n<r;)if(t(e[n],n,e))return!0;return!1}},6556:(e,t,n)=>{var r=n(9465),i=n(7813);e.exports=function(e,t,n){(void 0!==n&&!i(e[t],n)||void 0===n&&!(t in e))&&r(e,t,n)}},4865:(e,t,n)=>{var r=n(9465),i=n(7813),o=Object.prototype.hasOwnProperty;e.exports=function(e,t,n){var a=e[t];o.call(e,t)&&i(a,n)&&(void 0!==n||t in e)||r(e,t,n)}},8470:(e,t,n)=>{var r=n(7813);e.exports=function(e,t){for(var n=e.length;n--;)if(r(e[n][0],t))return n;return-1}},9465:(e,t,n)=>{var r=n(8777);e.exports=function(e,t,n){"__proto__"==t&&r?r(e,t,{configurable:!0,enumerable:!0,value:n,writable:!0}):e[t]=n}},3118:(e,t,n)=>{var r=n(3218),i=Object.create,o=function(){function e(){}return function(t){if(!r(t))return{};if(i)return i(t);e.prototype=t;var n=new e;return e.prototype=void 0,n}}();e.exports=o},1848:e=>{e.exports=function(e,t,n,r){for(var i=e.length,o=n+(r?1:-1);r?o--:++o<i;)if(t(e[o],o,e))return o;return-1}},8483:(e,t,n)=>{var r=n(5063)();e.exports=r},7786:(e,t,n)=>{var r=n(1811),i=n(327);e.exports=function(e,t){for(var n=0,o=(t=r(t,e)).length;null!=e&&n<o;)e=e[i(t[n++])];return n&&n==o?e:void 0}},8866:(e,t,n)=>{var r=n(2488),i=n(1469);e.exports=function(e,t,n){var o=t(e);return i(e)?o:r(o,n(e))}},4239:(e,t,n)=>{var r=n(2705),i=n(9607),o=n(2333),a=r?r.toStringTag:void 0;e.exports=function(e){return null==e?void 0===e?"[object Undefined]":"[object Null]":a&&a in Object(e)?i(e):o(e)}},13:e=>{e.exports=function(e,t){return null!=e&&t in Object(e)}},9454:(e,t,n)=>{var r=n(4239),i=n(7005);e.exports=function(e){return i(e)&&"[object Arguments]"==r(e)}},939:(e,t,n)=>{var r=n(1299),i=n(7005);e.exports=function e(t,n,o,a,s){return t===n||(null==t||null==n||!i(t)&&!i(n)?t!=t&&n!=n:r(t,n,o,a,e,s))}},1299:(e,t,n)=>{var r=n(6384),i=n(7114),o=n(8351),a=n(6096),s=n(4160),l=n(1469),c=n(4144),u=n(6719),d="[object Arguments]",f="[object Array]",h="[object Object]",p=Object.prototype.hasOwnProperty;e.exports=function(e,t,n,g,m,v){var b=l(e),y=l(t),x=b?f:s(e),_=y?f:s(t),w=(x=x==d?h:x)==h,k=(_=_==d?h:_)==h,S=x==_;if(S&&c(e)){if(!c(t))return!1;b=!0,w=!1}if(S&&!w)return v||(v=new r),b||u(e)?i(e,t,n,g,m,v):o(e,t,x,n,g,m,v);if(!(1&n)){var E=w&&p.call(e,"__wrapped__"),M=k&&p.call(t,"__wrapped__");if(E||M){var C=E?e.value():e,P=M?t.value():t;return v||(v=new r),m(C,P,n,g,v)}}return!!S&&(v||(v=new r),a(e,t,n,g,m,v))}},2958:(e,t,n)=>{var r=n(6384),i=n(939);e.exports=function(e,t,n,o){var a=n.length,s=a,l=!o;if(null==e)return!s;for(e=Object(e);a--;){var c=n[a];if(l&&c[2]?c[1]!==e[c[0]]:!(c[0]in e))return!1}for(;++a<s;){var u=(c=n[a])[0],d=e[u],f=c[1];if(l&&c[2]){if(void 0===d&&!(u in e))return!1}else{var h=new r;if(o)var p=o(d,f,u,e,t,h);if(!(void 0===p?i(f,d,3,o,h):p))return!1}}return!0}},8458:(e,t,n)=>{var r=n(3560),i=n(5346),o=n(3218),a=n(346),s=/^\[object .+?Constructor\]$/,l=Function.prototype,c=Object.prototype,u=l.toString,d=c.hasOwnProperty,f=RegExp("^"+u.call(d).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");e.exports=function(e){return!(!o(e)||i(e))&&(r(e)?f:s).test(a(e))}},8749:(e,t,n)=>{var r=n(4239),i=n(1780),o=n(7005),a={};a["[object Float32Array]"]=a["[object Float64Array]"]=a["[object Int8Array]"]=a["[object Int16Array]"]=a["[object Int32Array]"]=a["[object Uint8Array]"]=a["[object Uint8ClampedArray]"]=a["[object Uint16Array]"]=a["[object Uint32Array]"]=!0,a["[object Arguments]"]=a["[object Array]"]=a["[object ArrayBuffer]"]=a["[object Boolean]"]=a["[object DataView]"]=a["[object Date]"]=a["[object Error]"]=a["[object Function]"]=a["[object Map]"]=a["[object Number]"]=a["[object Object]"]=a["[object RegExp]"]=a["[object Set]"]=a["[object String]"]=a["[object WeakMap]"]=!1,e.exports=function(e){return o(e)&&i(e.length)&&!!a[r(e)]}},7206:(e,t,n)=>{var r=n(1573),i=n(6432),o=n(6557),a=n(1469),s=n(9601);e.exports=function(e){return"function"==typeof e?e:null==e?o:"object"==typeof e?a(e)?i(e[0],e[1]):r(e):s(e)}},280:(e,t,n)=>{var r=n(5726),i=n(6916),o=Object.prototype.hasOwnProperty;e.exports=function(e){if(!r(e))return i(e);var t=[];for(var n in Object(e))o.call(e,n)&&"constructor"!=n&&t.push(n);return t}},313:(e,t,n)=>{var r=n(3218),i=n(5726),o=n(3498),a=Object.prototype.hasOwnProperty;e.exports=function(e){if(!r(e))return o(e);var t=i(e),n=[];for(var s in e)("constructor"!=s||!t&&a.call(e,s))&&n.push(s);return n}},1573:(e,t,n)=>{var r=n(2958),i=n(1499),o=n(2634);e.exports=function(e){var t=i(e);return 1==t.length&&t[0][2]?o(t[0][0],t[0][1]):function(n){return n===e||r(n,e,t)}}},6432:(e,t,n)=>{var r=n(939),i=n(7361),o=n(9095),a=n(5403),s=n(9162),l=n(2634),c=n(327);e.exports=function(e,t){return a(e)&&s(t)?l(c(e),t):function(n){var a=i(n,e);return void 0===a&&a===t?o(n,e):r(t,a,3)}}},2980:(e,t,n)=>{var r=n(6384),i=n(6556),o=n(8483),a=n(9783),s=n(3218),l=n(1704),c=n(6390);e.exports=function e(t,n,u,d,f){t!==n&&o(n,(function(o,l){if(f||(f=new r),s(o))a(t,n,l,u,e,d,f);else{var h=d?d(c(t,l),o,l+"",t,n,f):void 0;void 0===h&&(h=o),i(t,l,h)}}),l)}},9783:(e,t,n)=>{var r=n(6556),i=n(4626),o=n(7133),a=n(278),s=n(8517),l=n(5694),c=n(1469),u=n(9246),d=n(4144),f=n(3560),h=n(3218),p=n(8630),g=n(6719),m=n(6390),v=n(9881);e.exports=function(e,t,n,b,y,x,_){var w=m(e,n),k=m(t,n),S=_.get(k);if(S)r(e,n,S);else{var E=x?x(w,k,n+"",e,t,_):void 0,M=void 0===E;if(M){var C=c(k),P=!C&&d(k),O=!C&&!P&&g(k);E=k,C||P||O?c(w)?E=w:u(w)?E=a(w):P?(M=!1,E=i(k,!0)):O?(M=!1,E=o(k,!0)):E=[]:p(k)||l(k)?(E=w,l(w)?E=v(w):h(w)&&!f(w)||(E=s(k))):M=!1}M&&(_.set(k,E),y(E,k,b,x,_),_.delete(k)),r(e,n,E)}}},371:e=>{e.exports=function(e){return function(t){return null==t?void 0:t[e]}}},9152:(e,t,n)=>{var r=n(7786);e.exports=function(e){return function(t){return r(t,e)}}},5976:(e,t,n)=>{var r=n(6557),i=n(5357),o=n(61);e.exports=function(e,t){return o(i(e,t,r),e+"")}},6560:(e,t,n)=>{var r=n(5703),i=n(8777),o=n(6557),a=i?function(e,t){return i(e,"toString",{configurable:!0,enumerable:!1,value:r(t),writable:!0})}:o;e.exports=a},2545:e=>{e.exports=function(e,t){for(var n=-1,r=Array(e);++n<e;)r[n]=t(n);return r}},531:(e,t,n)=>{var r=n(2705),i=n(9932),o=n(1469),a=n(3448),s=r?r.prototype:void 0,l=s?s.toString:void 0;e.exports=function e(t){if("string"==typeof t)return t;if(o(t))return i(t,e)+"";if(a(t))return l?l.call(t):"";var n=t+"";return"0"==n&&1/t==-1/0?"-0":n}},7561:(e,t,n)=>{var r=n(7990),i=/^\s+/;e.exports=function(e){return e?e.slice(0,r(e)+1).replace(i,""):e}},1717:e=>{e.exports=function(e){return function(t){return e(t)}}},4757:e=>{e.exports=function(e,t){return e.has(t)}},1811:(e,t,n)=>{var r=n(1469),i=n(5403),o=n(5514),a=n(9833);e.exports=function(e,t){return r(e)?e:i(e,t)?[e]:o(a(e))}},4318:(e,t,n)=>{var r=n(1149);e.exports=function(e){var t=new e.constructor(e.byteLength);return new r(t).set(new r(e)),t}},4626:(e,t,n)=>{e=n.nmd(e);var r=n(5639),i=t&&!t.nodeType&&t,o=i&&e&&!e.nodeType&&e,a=o&&o.exports===i?r.Buffer:void 0,s=a?a.allocUnsafe:void 0;e.exports=function(e,t){if(t)return e.slice();var n=e.length,r=s?s(n):new e.constructor(n);return e.copy(r),r}},7133:(e,t,n)=>{var r=n(4318);e.exports=function(e,t){var n=t?r(e.buffer):e.buffer;return new e.constructor(n,e.byteOffset,e.length)}},278:e=>{e.exports=function(e,t){var n=-1,r=e.length;for(t||(t=Array(r));++n<r;)t[n]=e[n];return t}},8363:(e,t,n)=>{var r=n(4865),i=n(9465);e.exports=function(e,t,n,o){var a=!n;n||(n={});for(var s=-1,l=t.length;++s<l;){var c=t[s],u=o?o(n[c],e[c],c,n,e):void 0;void 0===u&&(u=e[c]),a?i(n,c,u):r(n,c,u)}return n}},4429:(e,t,n)=>{var r=n(5639)["__core-js_shared__"];e.exports=r},1463:(e,t,n)=>{var r=n(5976),i=n(6612);e.exports=function(e){return r((function(t,n){var r=-1,o=n.length,a=o>1?n[o-1]:void 0,s=o>2?n[2]:void 0;for(a=e.length>3&&"function"==typeof a?(o--,a):void 0,s&&i(n[0],n[1],s)&&(a=o<3?void 0:a,o=1),t=Object(t);++r<o;){var l=n[r];l&&e(t,l,r,a)}return t}))}},5063:e=>{e.exports=function(e){return function(t,n,r){for(var i=-1,o=Object(t),a=r(t),s=a.length;s--;){var l=a[e?s:++i];if(!1===n(o[l],l,o))break}return t}}},7740:(e,t,n)=>{var r=n(7206),i=n(8612),o=n(3674);e.exports=function(e){return function(t,n,a){var s=Object(t);if(!i(t)){var l=r(n,3);t=o(t),n=function(e){return l(s[e],e,s)}}var c=e(t,n,a);return c>-1?s[l?t[c]:c]:void 0}}},8777:(e,t,n)=>{var r=n(852),i=function(){try{var e=r(Object,"defineProperty");return e({},"",{}),e}catch(e){}}();e.exports=i},7114:(e,t,n)=>{var r=n(8668),i=n(2908),o=n(4757);e.exports=function(e,t,n,a,s,l){var c=1&n,u=e.length,d=t.length;if(u!=d&&!(c&&d>u))return!1;var f=l.get(e),h=l.get(t);if(f&&h)return f==t&&h==e;var p=-1,g=!0,m=2&n?new r:void 0;for(l.set(e,t),l.set(t,e);++p<u;){var v=e[p],b=t[p];if(a)var y=c?a(b,v,p,t,e,l):a(v,b,p,e,t,l);if(void 0!==y){if(y)continue;g=!1;break}if(m){if(!i(t,(function(e,t){if(!o(m,t)&&(v===e||s(v,e,n,a,l)))return m.push(t)}))){g=!1;break}}else if(v!==b&&!s(v,b,n,a,l)){g=!1;break}}return l.delete(e),l.delete(t),g}},8351:(e,t,n)=>{var r=n(2705),i=n(1149),o=n(7813),a=n(7114),s=n(8776),l=n(1814),c=r?r.prototype:void 0,u=c?c.valueOf:void 0;e.exports=function(e,t,n,r,c,d,f){switch(n){case"[object DataView]":if(e.byteLength!=t.byteLength||e.byteOffset!=t.byteOffset)return!1;e=e.buffer,t=t.buffer;case"[object ArrayBuffer]":return!(e.byteLength!=t.byteLength||!d(new i(e),new i(t)));case"[object Boolean]":case"[object Date]":case"[object Number]":return o(+e,+t);case"[object Error]":return e.name==t.name&&e.message==t.message;case"[object RegExp]":case"[object String]":return e==t+"";case"[object Map]":var h=s;case"[object Set]":var p=1&r;if(h||(h=l),e.size!=t.size&&!p)return!1;var g=f.get(e);if(g)return g==t;r|=2,f.set(e,t);var m=a(h(e),h(t),r,c,d,f);return f.delete(e),m;case"[object Symbol]":if(u)return u.call(e)==u.call(t)}return!1}},6096:(e,t,n)=>{var r=n(8234),i=Object.prototype.hasOwnProperty;e.exports=function(e,t,n,o,a,s){var l=1&n,c=r(e),u=c.length;if(u!=r(t).length&&!l)return!1;for(var d=u;d--;){var f=c[d];if(!(l?f in t:i.call(t,f)))return!1}var h=s.get(e),p=s.get(t);if(h&&p)return h==t&&p==e;var g=!0;s.set(e,t),s.set(t,e);for(var m=l;++d<u;){var v=e[f=c[d]],b=t[f];if(o)var y=l?o(b,v,f,t,e,s):o(v,b,f,e,t,s);if(!(void 0===y?v===b||a(v,b,n,o,s):y)){g=!1;break}m||(m="constructor"==f)}if(g&&!m){var x=e.constructor,_=t.constructor;x==_||!("constructor"in e)||!("constructor"in t)||"function"==typeof x&&x instanceof x&&"function"==typeof _&&_ instanceof _||(g=!1)}return s.delete(e),s.delete(t),g}},1957:(e,t,n)=>{var r="object"==typeof n.g&&n.g&&n.g.Object===Object&&n.g;e.exports=r},8234:(e,t,n)=>{var r=n(8866),i=n(9551),o=n(3674);e.exports=function(e){return r(e,o,i)}},5050:(e,t,n)=>{var r=n(7019);e.exports=function(e,t){var n=e.__data__;return r(t)?n["string"==typeof t?"string":"hash"]:n.map}},1499:(e,t,n)=>{var r=n(9162),i=n(3674);e.exports=function(e){for(var t=i(e),n=t.length;n--;){var o=t[n],a=e[o];t[n]=[o,a,r(a)]}return t}},852:(e,t,n)=>{var r=n(8458),i=n(7801);e.exports=function(e,t){var n=i(e,t);return r(n)?n:void 0}},5924:(e,t,n)=>{var r=n(5569)(Object.getPrototypeOf,Object);e.exports=r},9607:(e,t,n)=>{var r=n(2705),i=Object.prototype,o=i.hasOwnProperty,a=i.toString,s=r?r.toStringTag:void 0;e.exports=function(e){var t=o.call(e,s),n=e[s];try{e[s]=void 0;var r=!0}catch(e){}var i=a.call(e);return r&&(t?e[s]=n:delete e[s]),i}},9551:(e,t,n)=>{var r=n(4963),i=n(479),o=Object.prototype.propertyIsEnumerable,a=Object.getOwnPropertySymbols,s=a?function(e){return null==e?[]:(e=Object(e),r(a(e),(function(t){return o.call(e,t)})))}:i;e.exports=s},4160:(e,t,n)=>{var r=n(8552),i=n(7071),o=n(3818),a=n(8525),s=n(577),l=n(4239),c=n(346),u="[object Map]",d="[object Promise]",f="[object Set]",h="[object WeakMap]",p="[object DataView]",g=c(r),m=c(i),v=c(o),b=c(a),y=c(s),x=l;(r&&x(new r(new ArrayBuffer(1)))!=p||i&&x(new i)!=u||o&&x(o.resolve())!=d||a&&x(new a)!=f||s&&x(new s)!=h)&&(x=function(e){var t=l(e),n="[object Object]"==t?e.constructor:void 0,r=n?c(n):"";if(r)switch(r){case g:return p;case m:return u;case v:return d;case b:return f;case y:return h}return t}),e.exports=x},7801:e=>{e.exports=function(e,t){return null==e?void 0:e[t]}},222:(e,t,n)=>{var r=n(1811),i=n(5694),o=n(1469),a=n(5776),s=n(1780),l=n(327);e.exports=function(e,t,n){for(var c=-1,u=(t=r(t,e)).length,d=!1;++c<u;){var f=l(t[c]);if(!(d=null!=e&&n(e,f)))break;e=e[f]}return d||++c!=u?d:!!(u=null==e?0:e.length)&&s(u)&&a(f,u)&&(o(e)||i(e))}},1789:(e,t,n)=>{var r=n(4536);e.exports=function(){this.__data__=r?r(null):{},this.size=0}},401:e=>{e.exports=function(e){var t=this.has(e)&&delete this.__data__[e];return this.size-=t?1:0,t}},7667:(e,t,n)=>{var r=n(4536),i=Object.prototype.hasOwnProperty;e.exports=function(e){var t=this.__data__;if(r){var n=t[e];return"__lodash_hash_undefined__"===n?void 0:n}return i.call(t,e)?t[e]:void 0}},1327:(e,t,n)=>{var r=n(4536),i=Object.prototype.hasOwnProperty;e.exports=function(e){var t=this.__data__;return r?void 0!==t[e]:i.call(t,e)}},1866:(e,t,n)=>{var r=n(4536);e.exports=function(e,t){var n=this.__data__;return this.size+=this.has(e)?0:1,n[e]=r&&void 0===t?"__lodash_hash_undefined__":t,this}},8517:(e,t,n)=>{var r=n(3118),i=n(5924),o=n(5726);e.exports=function(e){return"function"!=typeof e.constructor||o(e)?{}:r(i(e))}},5776:e=>{var t=/^(?:0|[1-9]\d*)$/;e.exports=function(e,n){var r=typeof e;return!!(n=null==n?9007199254740991:n)&&("number"==r||"symbol"!=r&&t.test(e))&&e>-1&&e%1==0&&e<n}},6612:(e,t,n)=>{var r=n(7813),i=n(8612),o=n(5776),a=n(3218);e.exports=function(e,t,n){if(!a(n))return!1;var s=typeof t;return!!("number"==s?i(n)&&o(t,n.length):"string"==s&&t in n)&&r(n[t],e)}},5403:(e,t,n)=>{var r=n(1469),i=n(3448),o=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,a=/^\w*$/;e.exports=function(e,t){if(r(e))return!1;var n=typeof e;return!("number"!=n&&"symbol"!=n&&"boolean"!=n&&null!=e&&!i(e))||a.test(e)||!o.test(e)||null!=t&&e in Object(t)}},7019:e=>{e.exports=function(e){var t=typeof e;return"string"==t||"number"==t||"symbol"==t||"boolean"==t?"__proto__"!==e:null===e}},5346:(e,t,n)=>{var r,i=n(4429),o=(r=/[^.]+$/.exec(i&&i.keys&&i.keys.IE_PROTO||""))?"Symbol(src)_1."+r:"";e.exports=function(e){return!!o&&o in e}},5726:e=>{var t=Object.prototype;e.exports=function(e){var n=e&&e.constructor;return e===("function"==typeof n&&n.prototype||t)}},9162:(e,t,n)=>{var r=n(3218);e.exports=function(e){return e==e&&!r(e)}},7040:e=>{e.exports=function(){this.__data__=[],this.size=0}},4125:(e,t,n)=>{var r=n(8470),i=Array.prototype.splice;e.exports=function(e){var t=this.__data__,n=r(t,e);return!(n<0||(n==t.length-1?t.pop():i.call(t,n,1),--this.size,0))}},2117:(e,t,n)=>{var r=n(8470);e.exports=function(e){var t=this.__data__,n=r(t,e);return n<0?void 0:t[n][1]}},7518:(e,t,n)=>{var r=n(8470);e.exports=function(e){return r(this.__data__,e)>-1}},4705:(e,t,n)=>{var r=n(8470);e.exports=function(e,t){var n=this.__data__,i=r(n,e);return i<0?(++this.size,n.push([e,t])):n[i][1]=t,this}},4785:(e,t,n)=>{var r=n(1989),i=n(8407),o=n(7071);e.exports=function(){this.size=0,this.__data__={hash:new r,map:new(o||i),string:new r}}},1285:(e,t,n)=>{var r=n(5050);e.exports=function(e){var t=r(this,e).delete(e);return this.size-=t?1:0,t}},6e3:(e,t,n)=>{var r=n(5050);e.exports=function(e){return r(this,e).get(e)}},9916:(e,t,n)=>{var r=n(5050);e.exports=function(e){return r(this,e).has(e)}},5265:(e,t,n)=>{var r=n(5050);e.exports=function(e,t){var n=r(this,e),i=n.size;return n.set(e,t),this.size+=n.size==i?0:1,this}},8776:e=>{e.exports=function(e){var t=-1,n=Array(e.size);return e.forEach((function(e,r){n[++t]=[r,e]})),n}},2634:e=>{e.exports=function(e,t){return function(n){return null!=n&&n[e]===t&&(void 0!==t||e in Object(n))}}},4523:(e,t,n)=>{var r=n(8306);e.exports=function(e){var t=r(e,(function(e){return 500===n.size&&n.clear(),e})),n=t.cache;return t}},4536:(e,t,n)=>{var r=n(852)(Object,"create");e.exports=r},6916:(e,t,n)=>{var r=n(5569)(Object.keys,Object);e.exports=r},3498:e=>{e.exports=function(e){var t=[];if(null!=e)for(var n in Object(e))t.push(n);return t}},1167:(e,t,n)=>{e=n.nmd(e);var r=n(1957),i=t&&!t.nodeType&&t,o=i&&e&&!e.nodeType&&e,a=o&&o.exports===i&&r.process,s=function(){try{return o&&o.require&&o.require("util").types||a&&a.binding&&a.binding("util")}catch(e){}}();e.exports=s},2333:e=>{var t=Object.prototype.toString;e.exports=function(e){return t.call(e)}},5569:e=>{e.exports=function(e,t){return function(n){return e(t(n))}}},5357:(e,t,n)=>{var r=n(6874),i=Math.max;e.exports=function(e,t,n){return t=i(void 0===t?e.length-1:t,0),function(){for(var o=arguments,a=-1,s=i(o.length-t,0),l=Array(s);++a<s;)l[a]=o[t+a];a=-1;for(var c=Array(t+1);++a<t;)c[a]=o[a];return c[t]=n(l),r(e,this,c)}}},5639:(e,t,n)=>{var r=n(1957),i="object"==typeof self&&self&&self.Object===Object&&self,o=r||i||Function("return this")();e.exports=o},6390:e=>{e.exports=function(e,t){if(("constructor"!==t||"function"!=typeof e[t])&&"__proto__"!=t)return e[t]}},619:e=>{e.exports=function(e){return this.__data__.set(e,"__lodash_hash_undefined__"),this}},2385:e=>{e.exports=function(e){return this.__data__.has(e)}},1814:e=>{e.exports=function(e){var t=-1,n=Array(e.size);return e.forEach((function(e){n[++t]=e})),n}},61:(e,t,n)=>{var r=n(6560),i=n(1275)(r);e.exports=i},1275:e=>{var t=Date.now;e.exports=function(e){var n=0,r=0;return function(){var i=t(),o=16-(i-r);if(r=i,o>0){if(++n>=800)return arguments[0]}else n=0;return e.apply(void 0,arguments)}}},7465:(e,t,n)=>{var r=n(8407);e.exports=function(){this.__data__=new r,this.size=0}},3779:e=>{e.exports=function(e){var t=this.__data__,n=t.delete(e);return this.size=t.size,n}},7599:e=>{e.exports=function(e){return this.__data__.get(e)}},4758:e=>{e.exports=function(e){return this.__data__.has(e)}},4309:(e,t,n)=>{var r=n(8407),i=n(7071),o=n(3369);e.exports=function(e,t){var n=this.__data__;if(n instanceof r){var a=n.__data__;if(!i||a.length<199)return a.push([e,t]),this.size=++n.size,this;n=this.__data__=new o(a)}return n.set(e,t),this.size=n.size,this}},5514:(e,t,n)=>{var r=n(4523),i=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,o=/\\(\\)?/g,a=r((function(e){var t=[];return 46===e.charCodeAt(0)&&t.push(""),e.replace(i,(function(e,n,r,i){t.push(r?i.replace(o,"$1"):n||e)})),t}));e.exports=a},327:(e,t,n)=>{var r=n(3448);e.exports=function(e){if("string"==typeof e||r(e))return e;var t=e+"";return"0"==t&&1/e==-1/0?"-0":t}},346:e=>{var t=Function.prototype.toString;e.exports=function(e){if(null!=e){try{return t.call(e)}catch(e){}try{return e+""}catch(e){}}return""}},7990:e=>{var t=/\s/;e.exports=function(e){for(var n=e.length;n--&&t.test(e.charAt(n)););return n}},8583:(e,t,n)=>{var r=n(4865),i=n(8363),o=n(1463),a=n(8612),s=n(5726),l=n(3674),c=Object.prototype.hasOwnProperty,u=o((function(e,t){if(s(t)||a(t))i(t,l(t),e);else for(var n in t)c.call(t,n)&&r(e,n,t[n])}));e.exports=u},5703:e=>{e.exports=function(e){return function(){return e}}},7813:e=>{e.exports=function(e,t){return e===t||e!=e&&t!=t}},3311:(e,t,n)=>{var r=n(7740)(n(998));e.exports=r},998:(e,t,n)=>{var r=n(1848),i=n(7206),o=n(554),a=Math.max;e.exports=function(e,t,n){var s=null==e?0:e.length;if(!s)return-1;var l=null==n?0:o(n);return l<0&&(l=a(s+l,0)),r(e,i(t,3),l)}},7361:(e,t,n)=>{var r=n(7786);e.exports=function(e,t,n){var i=null==e?void 0:r(e,t);return void 0===i?n:i}},9095:(e,t,n)=>{var r=n(13),i=n(222);e.exports=function(e,t){return null!=e&&i(e,t,r)}},6557:e=>{e.exports=function(e){return e}},5694:(e,t,n)=>{var r=n(9454),i=n(7005),o=Object.prototype,a=o.hasOwnProperty,s=o.propertyIsEnumerable,l=r(function(){return arguments}())?r:function(e){return i(e)&&a.call(e,"callee")&&!s.call(e,"callee")};e.exports=l},1469:e=>{var t=Array.isArray;e.exports=t},8612:(e,t,n)=>{var r=n(3560),i=n(1780);e.exports=function(e){return null!=e&&i(e.length)&&!r(e)}},9246:(e,t,n)=>{var r=n(8612),i=n(7005);e.exports=function(e){return i(e)&&r(e)}},4144:(e,t,n)=>{e=n.nmd(e);var r=n(5639),i=n(5062),o=t&&!t.nodeType&&t,a=o&&e&&!e.nodeType&&e,s=a&&a.exports===o?r.Buffer:void 0,l=(s?s.isBuffer:void 0)||i;e.exports=l},3560:(e,t,n)=>{var r=n(4239),i=n(3218);e.exports=function(e){if(!i(e))return!1;var t=r(e);return"[object Function]"==t||"[object GeneratorFunction]"==t||"[object AsyncFunction]"==t||"[object Proxy]"==t}},1780:e=>{e.exports=function(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=9007199254740991}},3218:e=>{e.exports=function(e){var t=typeof e;return null!=e&&("object"==t||"function"==t)}},7005:e=>{e.exports=function(e){return null!=e&&"object"==typeof e}},8630:(e,t,n)=>{var r=n(4239),i=n(5924),o=n(7005),a=Function.prototype,s=Object.prototype,l=a.toString,c=s.hasOwnProperty,u=l.call(Object);e.exports=function(e){if(!o(e)||"[object Object]"!=r(e))return!1;var t=i(e);if(null===t)return!0;var n=c.call(t,"constructor")&&t.constructor;return"function"==typeof n&&n instanceof n&&l.call(n)==u}},3448:(e,t,n)=>{var r=n(4239),i=n(7005);e.exports=function(e){return"symbol"==typeof e||i(e)&&"[object Symbol]"==r(e)}},6719:(e,t,n)=>{var r=n(8749),i=n(1717),o=n(1167),a=o&&o.isTypedArray,s=a?i(a):r;e.exports=s},3674:(e,t,n)=>{var r=n(4636),i=n(280),o=n(8612);e.exports=function(e){return o(e)?r(e):i(e)}},1704:(e,t,n)=>{var r=n(4636),i=n(313),o=n(8612);e.exports=function(e){return o(e)?r(e,!0):i(e)}},8306:(e,t,n)=>{var r=n(3369);function i(e,t){if("function"!=typeof e||null!=t&&"function"!=typeof t)throw new TypeError("Expected a function");var n=function(){var r=arguments,i=t?t.apply(this,r):r[0],o=n.cache;if(o.has(i))return o.get(i);var a=e.apply(this,r);return n.cache=o.set(i,a)||o,a};return n.cache=new(i.Cache||r),n}i.Cache=r,e.exports=i},2492:(e,t,n)=>{var r=n(2980),i=n(1463)((function(e,t,n){r(e,t,n)}));e.exports=i},9601:(e,t,n)=>{var r=n(371),i=n(9152),o=n(5403),a=n(327);e.exports=function(e){return o(e)?r(a(e)):i(e)}},479:e=>{e.exports=function(){return[]}},5062:e=>{e.exports=function(){return!1}},8601:(e,t,n)=>{var r=n(4841);e.exports=function(e){return e?Infinity===(e=r(e))||e===-1/0?17976931348623157e292*(e<0?-1:1):e==e?e:0:0===e?e:0}},554:(e,t,n)=>{var r=n(8601);e.exports=function(e){var t=r(e),n=t%1;return t==t?n?t-n:t:0}},4841:(e,t,n)=>{var r=n(7561),i=n(3218),o=n(3448),a=/^[-+]0x[0-9a-f]+$/i,s=/^0b[01]+$/i,l=/^0o[0-7]+$/i,c=parseInt;e.exports=function(e){if("number"==typeof e)return e;if(o(e))return NaN;if(i(e)){var t="function"==typeof e.valueOf?e.valueOf():e;e=i(t)?t+"":t}if("string"!=typeof e)return 0===e?e:+e;e=r(e);var n=s.test(e);return n||l.test(e)?c(e.slice(2),n?2:8):a.test(e)?NaN:+e}},9881:(e,t,n)=>{var r=n(8363),i=n(1704);e.exports=function(e){return r(e,i(e))}},9833:(e,t,n)=>{var r=n(531);e.exports=function(e){return null==e?"":r(e)}},7418:e=>{"use strict";var t=Object.getOwnPropertySymbols,n=Object.prototype.hasOwnProperty,r=Object.prototype.propertyIsEnumerable;function i(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach((function(e){r[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,o){for(var a,s,l=i(e),c=1;c<arguments.length;c++){for(var u in a=Object(arguments[c]))n.call(a,u)&&(l[u]=a[u]);if(t){s=t(a);for(var d=0;d<s.length;d++)r.call(a,s[d])&&(l[s[d]]=a[s[d]])}}return l}},4779:(e,t,n)=>{var r=n(5826);e.exports=function e(t,n,i){return r(n)||(i=n||i,n=[]),i=i||{},t instanceof RegExp?function(e,t){var n=e.source.match(/\((?!\?)/g);if(n)for(var r=0;r<n.length;r++)t.push({name:r,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return u(e,t)}(t,n):r(t)?function(t,n,r){for(var i=[],o=0;o<t.length;o++)i.push(e(t[o],n,r).source);return u(new RegExp("(?:"+i.join("|")+")",d(r)),n)}(t,n,i):function(e,t,n){return f(o(e,n),t,n)}(t,n,i)},e.exports.parse=o,e.exports.compile=function(e,t){return s(o(e,t),t)},e.exports.tokensToFunction=s,e.exports.tokensToRegExp=f;var i=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function o(e,t){for(var n,r=[],o=0,a=0,s="",u=t&&t.delimiter||"/";null!=(n=i.exec(e));){var d=n[0],f=n[1],h=n.index;if(s+=e.slice(a,h),a=h+d.length,f)s+=f[1];else{var p=e[a],g=n[2],m=n[3],v=n[4],b=n[5],y=n[6],x=n[7];s&&(r.push(s),s="");var _=null!=g&&null!=p&&p!==g,w="+"===y||"*"===y,k="?"===y||"*"===y,S=n[2]||u,E=v||b;r.push({name:m||o++,prefix:g||"",delimiter:S,optional:k,repeat:w,partial:_,asterisk:!!x,pattern:E?c(E):x?".*":"[^"+l(S)+"]+?"})}}return a<e.length&&(s+=e.substr(a)),s&&r.push(s),r}function a(e){return encodeURI(e).replace(/[\/?#]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()}))}function s(e,t){for(var n=new Array(e.length),i=0;i<e.length;i++)"object"==typeof e[i]&&(n[i]=new RegExp("^(?:"+e[i].pattern+")$",d(t)));return function(t,i){for(var o="",s=t||{},l=(i||{}).pretty?a:encodeURIComponent,c=0;c<e.length;c++){var u=e[c];if("string"!=typeof u){var d,f=s[u.name];if(null==f){if(u.optional){u.partial&&(o+=u.prefix);continue}throw new TypeError('Expected "'+u.name+'" to be defined')}if(r(f)){if(!u.repeat)throw new TypeError('Expected "'+u.name+'" to not repeat, but received `'+JSON.stringify(f)+"`");if(0===f.length){if(u.optional)continue;throw new TypeError('Expected "'+u.name+'" to not be empty')}for(var h=0;h<f.length;h++){if(d=l(f[h]),!n[c].test(d))throw new TypeError('Expected all "'+u.name+'" to match "'+u.pattern+'", but received `'+JSON.stringify(d)+"`");o+=(0===h?u.prefix:u.delimiter)+d}}else{if(d=u.asterisk?encodeURI(f).replace(/[?#]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()})):l(f),!n[c].test(d))throw new TypeError('Expected "'+u.name+'" to match "'+u.pattern+'", but received "'+d+'"');o+=u.prefix+d}}else o+=u}return o}}function l(e){return e.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function c(e){return e.replace(/([=!:$\/()])/g,"\\$1")}function u(e,t){return e.keys=t,e}function d(e){return e&&e.sensitive?"":"i"}function f(e,t,n){r(t)||(n=t||n,t=[]);for(var i=(n=n||{}).strict,o=!1!==n.end,a="",s=0;s<e.length;s++){var c=e[s];if("string"==typeof c)a+=l(c);else{var f=l(c.prefix),h="(?:"+c.pattern+")";t.push(c),c.repeat&&(h+="(?:"+f+h+")*"),a+=h=c.optional?c.partial?f+"("+h+")?":"(?:"+f+"("+h+"))?":f+"("+h+")"}}var p=l(n.delimiter||"/"),g=a.slice(-p.length)===p;return i||(a=(g?a.slice(0,-p.length):a)+"(?:"+p+"(?=$))?"),a+=o?"$":i&&g?"":"(?="+p+"|$)",u(new RegExp("^"+a,d(n)),t)}},2703:(e,t,n)=>{"use strict";var r=n(414);function i(){}function o(){}o.resetWarningCache=i,e.exports=function(){function e(e,t,n,i,o,a){if(a!==r){var s=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw s.name="Invariant Violation",s}}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:o,resetWarningCache:i};return n.PropTypes=n,n}},5697:(e,t,n)=>{e.exports=n(2703)()},414:e=>{"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},5902:(e,t,n)=>{"use strict";n.d(t,{$I:()=>$o,Fk:()=>Ho});var r=n(7294);const i="undefined"==typeof window?function(e){return e()}:window.requestAnimationFrame;function o(e,t,n){const r=n||(e=>Array.prototype.slice.call(e));let o=!1,a=[];return function(...n){a=r(n),o||(o=!0,i.call(window,(()=>{o=!1,e.apply(t,a)})))}}const a=e=>"start"===e?"left":"end"===e?"right":"center",s=(e,t,n)=>"start"===e?t:"end"===e?n:(t+n)/2;function l(){}const c=function(){let e=0;return function(){return e++}}();function u(e){return null==e}function d(e){if(Array.isArray&&Array.isArray(e))return!0;const t=Object.prototype.toString.call(e);return"[object"===t.substr(0,7)&&"Array]"===t.substr(-6)}function f(e){return null!==e&&"[object Object]"===Object.prototype.toString.call(e)}const h=e=>("number"==typeof e||e instanceof Number)&&isFinite(+e);function p(e,t){return h(e)?e:t}function g(e,t){return void 0===e?t:e}const m=(e,t)=>"string"==typeof e&&e.endsWith("%")?parseFloat(e)/100*t:+e;function v(e,t,n){if(e&&"function"==typeof e.call)return e.apply(n,t)}function b(e,t,n,r){let i,o,a;if(d(e))if(o=e.length,r)for(i=o-1;i>=0;i--)t.call(n,e[i],i);else for(i=0;i<o;i++)t.call(n,e[i],i);else if(f(e))for(a=Object.keys(e),o=a.length,i=0;i<o;i++)t.call(n,e[a[i]],a[i])}function y(e,t){let n,r,i,o;if(!e||!t||e.length!==t.length)return!1;for(n=0,r=e.length;n<r;++n)if(i=e[n],o=t[n],i.datasetIndex!==o.datasetIndex||i.index!==o.index)return!1;return!0}function x(e){if(d(e))return e.map(x);if(f(e)){const t=Object.create(null),n=Object.keys(e),r=n.length;let i=0;for(;i<r;++i)t[n[i]]=x(e[n[i]]);return t}return e}function _(e){return-1===["__proto__","prototype","constructor"].indexOf(e)}function w(e,t,n,r){if(!_(e))return;const i=t[e],o=n[e];f(i)&&f(o)?k(i,o,r):t[e]=x(o)}function k(e,t,n){const r=d(t)?t:[t],i=r.length;if(!f(e))return e;const o=(n=n||{}).merger||w;for(let a=0;a<i;++a){if(!f(t=r[a]))continue;const i=Object.keys(t);for(let r=0,a=i.length;r<a;++r)o(i[r],e,t,n)}return e}function S(e,t){return k(e,t,{merger:E})}function E(e,t,n){if(!_(e))return;const r=t[e],i=n[e];f(r)&&f(i)?S(r,i):Object.prototype.hasOwnProperty.call(t,e)||(t[e]=x(i))}function M(e,t){const n=e.indexOf(".",t);return-1===n?e.length:n}function C(e,t){if(""===t)return e;let n=0,r=M(t,n);for(;e&&r>n;)e=e[t.substr(n,r-n)],n=r+1,r=M(t,n);return e}function P(e){return e.charAt(0).toUpperCase()+e.slice(1)}const O=e=>void 0!==e,T=e=>"function"==typeof e,D=Math.PI,L=2*D,j=L+D,A=Number.POSITIVE_INFINITY,R=D/180,N=D/2,z=D/4,F=2*D/3,I=Math.log10,B=Math.sign;function V(e){const t=Math.round(e);e=U(e,t,e/1e3)?t:e;const n=Math.pow(10,Math.floor(I(e))),r=e/n;return(r<=1?1:r<=2?2:r<=5?5:10)*n}function W(e){return!isNaN(parseFloat(e))&&isFinite(e)}function U(e,t,n){return Math.abs(e-t)<n}function H(e,t,n){let r,i,o;for(r=0,i=e.length;r<i;r++)o=e[r][n],isNaN(o)||(t.min=Math.min(t.min,o),t.max=Math.max(t.max,o))}function $(e){return e*(D/180)}function Y(e){return e*(180/D)}function q(e){if(!h(e))return;let t=1,n=0;for(;Math.round(e*t)/t!==e;)t*=10,n++;return n}function Q(e,t){return Math.sqrt(Math.pow(t.x-e.x,2)+Math.pow(t.y-e.y,2))}function X(e,t){return(e-t+j)%L-D}function K(e){return(e%L+L)%L}function Z(e,t,n,r){const i=K(e),o=K(t),a=K(n),s=K(o-i),l=K(a-i),c=K(i-o),u=K(i-a);return i===o||i===a||r&&o===a||s>l&&c<u}function G(e,t,n){return Math.max(t,Math.min(n,e))}const J=e=>0===e||1===e,ee=(e,t,n)=>-Math.pow(2,10*(e-=1))*Math.sin((e-t)*L/n),te=(e,t,n)=>Math.pow(2,-10*e)*Math.sin((e-t)*L/n)+1,ne={linear:e=>e,easeInQuad:e=>e*e,easeOutQuad:e=>-e*(e-2),easeInOutQuad:e=>(e/=.5)<1?.5*e*e:-.5*(--e*(e-2)-1),easeInCubic:e=>e*e*e,easeOutCubic:e=>(e-=1)*e*e+1,easeInOutCubic:e=>(e/=.5)<1?.5*e*e*e:.5*((e-=2)*e*e+2),easeInQuart:e=>e*e*e*e,easeOutQuart:e=>-((e-=1)*e*e*e-1),easeInOutQuart:e=>(e/=.5)<1?.5*e*e*e*e:-.5*((e-=2)*e*e*e-2),easeInQuint:e=>e*e*e*e*e,easeOutQuint:e=>(e-=1)*e*e*e*e+1,easeInOutQuint:e=>(e/=.5)<1?.5*e*e*e*e*e:.5*((e-=2)*e*e*e*e+2),easeInSine:e=>1-Math.cos(e*N),easeOutSine:e=>Math.sin(e*N),easeInOutSine:e=>-.5*(Math.cos(D*e)-1),easeInExpo:e=>0===e?0:Math.pow(2,10*(e-1)),easeOutExpo:e=>1===e?1:1-Math.pow(2,-10*e),easeInOutExpo:e=>J(e)?e:e<.5?.5*Math.pow(2,10*(2*e-1)):.5*(2-Math.pow(2,-10*(2*e-1))),easeInCirc:e=>e>=1?e:-(Math.sqrt(1-e*e)-1),easeOutCirc:e=>Math.sqrt(1-(e-=1)*e),easeInOutCirc:e=>(e/=.5)<1?-.5*(Math.sqrt(1-e*e)-1):.5*(Math.sqrt(1-(e-=2)*e)+1),easeInElastic:e=>J(e)?e:ee(e,.075,.3),easeOutElastic:e=>J(e)?e:te(e,.075,.3),easeInOutElastic(e){const t=.1125;return J(e)?e:e<.5?.5*ee(2*e,t,.45):.5+.5*te(2*e-1,t,.45)},easeInBack(e){const t=1.70158;return e*e*((t+1)*e-t)},easeOutBack(e){const t=1.70158;return(e-=1)*e*((t+1)*e+t)+1},easeInOutBack(e){let t=1.70158;return(e/=.5)<1?e*e*((1+(t*=1.525))*e-t)*.5:.5*((e-=2)*e*((1+(t*=1.525))*e+t)+2)},easeInBounce:e=>1-ne.easeOutBounce(1-e),easeOutBounce(e){const t=7.5625,n=2.75;return e<1/n?t*e*e:e<2/n?t*(e-=1.5/n)*e+.75:e<2.5/n?t*(e-=2.25/n)*e+.9375:t*(e-=2.625/n)*e+.984375},easeInOutBounce:e=>e<.5?.5*ne.easeInBounce(2*e):.5*ne.easeOutBounce(2*e-1)+.5},re={0:0,1:1,2:2,3:3,4:4,5:5,6:6,7:7,8:8,9:9,A:10,B:11,C:12,D:13,E:14,F:15,a:10,b:11,c:12,d:13,e:14,f:15},ie="0123456789ABCDEF",oe=e=>ie[15&e],ae=e=>ie[(240&e)>>4]+ie[15&e],se=e=>(240&e)>>4==(15&e);function le(e){return e+.5|0}const ce=(e,t,n)=>Math.max(Math.min(e,n),t);function ue(e){return ce(le(2.55*e),0,255)}function de(e){return ce(le(255*e),0,255)}function fe(e){return ce(le(e/2.55)/100,0,1)}function he(e){return ce(le(100*e),0,100)}const pe=/^rgba?\(\s*([-+.\d]+)(%)?[\s,]+([-+.e\d]+)(%)?[\s,]+([-+.e\d]+)(%)?(?:[\s,/]+([-+.e\d]+)(%)?)?\s*\)$/,ge=/^(hsla?|hwb|hsv)\(\s*([-+.e\d]+)(?:deg)?[\s,]+([-+.e\d]+)%[\s,]+([-+.e\d]+)%(?:[\s,]+([-+.e\d]+)(%)?)?\s*\)$/;function me(e,t,n){const r=t*Math.min(n,1-n),i=(t,i=(t+e/30)%12)=>n-r*Math.max(Math.min(i-3,9-i,1),-1);return[i(0),i(8),i(4)]}function ve(e,t,n){const r=(r,i=(r+e/60)%6)=>n-n*t*Math.max(Math.min(i,4-i,1),0);return[r(5),r(3),r(1)]}function be(e,t,n){const r=me(e,1,.5);let i;for(t+n>1&&(i=1/(t+n),t*=i,n*=i),i=0;i<3;i++)r[i]*=1-t-n,r[i]+=t;return r}function ye(e){const t=e.r/255,n=e.g/255,r=e.b/255,i=Math.max(t,n,r),o=Math.min(t,n,r),a=(i+o)/2;let s,l,c;return i!==o&&(c=i-o,l=a>.5?c/(2-i-o):c/(i+o),s=i===t?(n-r)/c+(n<r?6:0):i===n?(r-t)/c+2:(t-n)/c+4,s=60*s+.5),[0|s,l||0,a]}function xe(e,t,n,r){return(Array.isArray(t)?e(t[0],t[1],t[2]):e(t,n,r)).map(de)}function _e(e,t,n){return xe(me,e,t,n)}function we(e){return(e%360+360)%360}const ke={x:"dark",Z:"light",Y:"re",X:"blu",W:"gr",V:"medium",U:"slate",A:"ee",T:"ol",S:"or",B:"ra",C:"lateg",D:"ights",R:"in",Q:"turquois",E:"hi",P:"ro",O:"al",N:"le",M:"de",L:"yello",F:"en",K:"ch",G:"arks",H:"ea",I:"ightg",J:"wh"},Se={OiceXe:"f0f8ff",antiquewEte:"faebd7",aqua:"ffff",aquamarRe:"7fffd4",azuY:"f0ffff",beige:"f5f5dc",bisque:"ffe4c4",black:"0",blanKedOmond:"ffebcd",Xe:"ff",XeviTet:"8a2be2",bPwn:"a52a2a",burlywood:"deb887",caMtXe:"5f9ea0",KartYuse:"7fff00",KocTate:"d2691e",cSO:"ff7f50",cSnflowerXe:"6495ed",cSnsilk:"fff8dc",crimson:"dc143c",cyan:"ffff",xXe:"8b",xcyan:"8b8b",xgTMnPd:"b8860b",xWay:"a9a9a9",xgYF:"6400",xgYy:"a9a9a9",xkhaki:"bdb76b",xmagFta:"8b008b",xTivegYF:"556b2f",xSange:"ff8c00",xScEd:"9932cc",xYd:"8b0000",xsOmon:"e9967a",xsHgYF:"8fbc8f",xUXe:"483d8b",xUWay:"2f4f4f",xUgYy:"2f4f4f",xQe:"ced1",xviTet:"9400d3",dAppRk:"ff1493",dApskyXe:"bfff",dimWay:"696969",dimgYy:"696969",dodgerXe:"1e90ff",fiYbrick:"b22222",flSOwEte:"fffaf0",foYstWAn:"228b22",fuKsia:"ff00ff",gaRsbSo:"dcdcdc",ghostwEte:"f8f8ff",gTd:"ffd700",gTMnPd:"daa520",Way:"808080",gYF:"8000",gYFLw:"adff2f",gYy:"808080",honeyMw:"f0fff0",hotpRk:"ff69b4",RdianYd:"cd5c5c",Rdigo:"4b0082",ivSy:"fffff0",khaki:"f0e68c",lavFMr:"e6e6fa",lavFMrXsh:"fff0f5",lawngYF:"7cfc00",NmoncEffon:"fffacd",ZXe:"add8e6",ZcSO:"f08080",Zcyan:"e0ffff",ZgTMnPdLw:"fafad2",ZWay:"d3d3d3",ZgYF:"90ee90",ZgYy:"d3d3d3",ZpRk:"ffb6c1",ZsOmon:"ffa07a",ZsHgYF:"20b2aa",ZskyXe:"87cefa",ZUWay:"778899",ZUgYy:"778899",ZstAlXe:"b0c4de",ZLw:"ffffe0",lime:"ff00",limegYF:"32cd32",lRF:"faf0e6",magFta:"ff00ff",maPon:"800000",VaquamarRe:"66cdaa",VXe:"cd",VScEd:"ba55d3",VpurpN:"9370db",VsHgYF:"3cb371",VUXe:"7b68ee",VsprRggYF:"fa9a",VQe:"48d1cc",VviTetYd:"c71585",midnightXe:"191970",mRtcYam:"f5fffa",mistyPse:"ffe4e1",moccasR:"ffe4b5",navajowEte:"ffdead",navy:"80",Tdlace:"fdf5e6",Tive:"808000",TivedBb:"6b8e23",Sange:"ffa500",SangeYd:"ff4500",ScEd:"da70d6",pOegTMnPd:"eee8aa",pOegYF:"98fb98",pOeQe:"afeeee",pOeviTetYd:"db7093",papayawEp:"ffefd5",pHKpuff:"ffdab9",peru:"cd853f",pRk:"ffc0cb",plum:"dda0dd",powMrXe:"b0e0e6",purpN:"800080",YbeccapurpN:"663399",Yd:"ff0000",Psybrown:"bc8f8f",PyOXe:"4169e1",saddNbPwn:"8b4513",sOmon:"fa8072",sandybPwn:"f4a460",sHgYF:"2e8b57",sHshell:"fff5ee",siFna:"a0522d",silver:"c0c0c0",skyXe:"87ceeb",UXe:"6a5acd",UWay:"708090",UgYy:"708090",snow:"fffafa",sprRggYF:"ff7f",stAlXe:"4682b4",tan:"d2b48c",teO:"8080",tEstN:"d8bfd8",tomato:"ff6347",Qe:"40e0d0",viTet:"ee82ee",JHt:"f5deb3",wEte:"ffffff",wEtesmoke:"f5f5f5",Lw:"ffff00",LwgYF:"9acd32"};let Ee;function Me(e,t,n){if(e){let r=ye(e);r[t]=Math.max(0,Math.min(r[t]+r[t]*n,0===t?360:1)),r=_e(r),e.r=r[0],e.g=r[1],e.b=r[2]}}function Ce(e,t){return e?Object.assign(t||{},e):e}function Pe(e){var t={r:0,g:0,b:0,a:255};return Array.isArray(e)?e.length>=3&&(t={r:e[0],g:e[1],b:e[2],a:255},e.length>3&&(t.a=de(e[3]))):(t=Ce(e,{r:0,g:0,b:0,a:1})).a=de(t.a),t}function Oe(e){return"r"===e.charAt(0)?function(e){const t=pe.exec(e);let n,r,i,o=255;if(t){if(t[7]!==n){const e=+t[7];o=255&(t[8]?ue(e):255*e)}return n=+t[1],r=+t[3],i=+t[5],n=255&(t[2]?ue(n):n),r=255&(t[4]?ue(r):r),i=255&(t[6]?ue(i):i),{r:n,g:r,b:i,a:o}}}(e):function(e){const t=ge.exec(e);let n,r=255;if(!t)return;t[5]!==n&&(r=t[6]?ue(+t[5]):de(+t[5]));const i=we(+t[2]),o=+t[3]/100,a=+t[4]/100;return n="hwb"===t[1]?function(e,t,n){return xe(be,e,t,n)}(i,o,a):"hsv"===t[1]?function(e,t,n){return xe(ve,e,t,n)}(i,o,a):_e(i,o,a),{r:n[0],g:n[1],b:n[2],a:r}}(e)}class Te{constructor(e){if(e instanceof Te)return e;const t=typeof e;let n;var r,i,o;"object"===t?n=Pe(e):"string"===t&&(o=(r=e).length,"#"===r[0]&&(4===o||5===o?i={r:255&17*re[r[1]],g:255&17*re[r[2]],b:255&17*re[r[3]],a:5===o?17*re[r[4]]:255}:7!==o&&9!==o||(i={r:re[r[1]]<<4|re[r[2]],g:re[r[3]]<<4|re[r[4]],b:re[r[5]]<<4|re[r[6]],a:9===o?re[r[7]]<<4|re[r[8]]:255})),n=i||function(e){Ee||(Ee=function(){const e={},t=Object.keys(Se),n=Object.keys(ke);let r,i,o,a,s;for(r=0;r<t.length;r++){for(a=s=t[r],i=0;i<n.length;i++)o=n[i],s=s.replace(o,ke[o]);o=parseInt(Se[a],16),e[s]=[o>>16&255,o>>8&255,255&o]}return e}(),Ee.transparent=[0,0,0,0]);const t=Ee[e.toLowerCase()];return t&&{r:t[0],g:t[1],b:t[2],a:4===t.length?t[3]:255}}(e)||Oe(e)),this._rgb=n,this._valid=!!n}get valid(){return this._valid}get rgb(){var e=Ce(this._rgb);return e&&(e.a=fe(e.a)),e}set rgb(e){this._rgb=Pe(e)}rgbString(){return this._valid?(e=this._rgb)&&(e.a<255?`rgba(${e.r}, ${e.g}, ${e.b}, ${fe(e.a)})`:`rgb(${e.r}, ${e.g}, ${e.b})`):this._rgb;var e}hexString(){return this._valid?(e=this._rgb,t=function(e){return se(e.r)&&se(e.g)&&se(e.b)&&se(e.a)}(e)?oe:ae,e?"#"+t(e.r)+t(e.g)+t(e.b)+(e.a<255?t(e.a):""):e):this._rgb;var e,t}hslString(){return this._valid?function(e){if(!e)return;const t=ye(e),n=t[0],r=he(t[1]),i=he(t[2]);return e.a<255?`hsla(${n}, ${r}%, ${i}%, ${fe(e.a)})`:`hsl(${n}, ${r}%, ${i}%)`}(this._rgb):this._rgb}mix(e,t){const n=this;if(e){const r=n.rgb,i=e.rgb;let o;const a=t===o?.5:t,s=2*a-1,l=r.a-i.a,c=((s*l==-1?s:(s+l)/(1+s*l))+1)/2;o=1-c,r.r=255&c*r.r+o*i.r+.5,r.g=255&c*r.g+o*i.g+.5,r.b=255&c*r.b+o*i.b+.5,r.a=a*r.a+(1-a)*i.a,n.rgb=r}return n}clone(){return new Te(this.rgb)}alpha(e){return this._rgb.a=de(e),this}clearer(e){return this._rgb.a*=1-e,this}greyscale(){const e=this._rgb,t=le(.3*e.r+.59*e.g+.11*e.b);return e.r=e.g=e.b=t,this}opaquer(e){return this._rgb.a*=1+e,this}negate(){const e=this._rgb;return e.r=255-e.r,e.g=255-e.g,e.b=255-e.b,this}lighten(e){return Me(this._rgb,2,e),this}darken(e){return Me(this._rgb,2,-e),this}saturate(e){return Me(this._rgb,1,e),this}desaturate(e){return Me(this._rgb,1,-e),this}rotate(e){return function(e,t){var n=ye(e);n[0]=we(n[0]+t),n=_e(n),e.r=n[0],e.g=n[1],e.b=n[2]}(this._rgb,e),this}}function De(e){return new Te(e)}const Le=e=>e instanceof CanvasGradient||e instanceof CanvasPattern;function je(e){return Le(e)?e:De(e)}function Ae(e){return Le(e)?e:De(e).saturate(.5).darken(.1).hexString()}const Re=Object.create(null),Ne=Object.create(null);function ze(e,t){if(!t)return e;const n=t.split(".");for(let t=0,r=n.length;t<r;++t){const r=n[t];e=e[r]||(e[r]=Object.create(null))}return e}function Fe(e,t,n){return"string"==typeof t?k(ze(e,t),n):k(ze(e,""),t)}var Ie=new class{constructor(e){this.animation=void 0,this.backgroundColor="rgba(0,0,0,0.1)",this.borderColor="rgba(0,0,0,0.1)",this.color="#666",this.datasets={},this.devicePixelRatio=e=>e.chart.platform.getDevicePixelRatio(),this.elements={},this.events=["mousemove","mouseout","click","touchstart","touchmove"],this.font={family:"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",size:12,style:"normal",lineHeight:1.2,weight:null},this.hover={},this.hoverBackgroundColor=(e,t)=>Ae(t.backgroundColor),this.hoverBorderColor=(e,t)=>Ae(t.borderColor),this.hoverColor=(e,t)=>Ae(t.color),this.indexAxis="x",this.interaction={mode:"nearest",intersect:!0},this.maintainAspectRatio=!0,this.onHover=null,this.onClick=null,this.parsing=!0,this.plugins={},this.responsive=!0,this.scale=void 0,this.scales={},this.showLine=!0,this.describe(e)}set(e,t){return Fe(this,e,t)}get(e){return ze(this,e)}describe(e,t){return Fe(Ne,e,t)}override(e,t){return Fe(Re,e,t)}route(e,t,n,r){const i=ze(this,e),o=ze(this,n),a="_"+t;Object.defineProperties(i,{[a]:{value:i[t],writable:!0},[t]:{enumerable:!0,get(){const e=this[a],t=o[r];return f(e)?Object.assign({},t,e):g(e,t)},set(e){this[a]=e}}})}}({_scriptable:e=>!e.startsWith("on"),_indexable:e=>"events"!==e,hover:{_fallback:"interaction"},interaction:{_scriptable:!1,_indexable:!1}});function Be(e,t,n,r,i){let o=t[i];return o||(o=t[i]=e.measureText(i).width,n.push(i)),o>r&&(r=o),r}function Ve(e,t,n,r){let i=(r=r||{}).data=r.data||{},o=r.garbageCollect=r.garbageCollect||[];r.font!==t&&(i=r.data={},o=r.garbageCollect=[],r.font=t),e.save(),e.font=t;let a=0;const s=n.length;let l,c,u,f,h;for(l=0;l<s;l++)if(f=n[l],null!=f&&!0!==d(f))a=Be(e,i,o,a,f);else if(d(f))for(c=0,u=f.length;c<u;c++)h=f[c],null==h||d(h)||(a=Be(e,i,o,a,h));e.restore();const p=o.length/2;if(p>n.length){for(l=0;l<p;l++)delete i[o[l]];o.splice(0,p)}return a}function We(e,t,n){const r=e.currentDevicePixelRatio,i=0!==n?Math.max(n/2,.5):0;return Math.round((t-i)*r)/r+i}function Ue(e,t){(t=t||e.getContext("2d")).save(),t.resetTransform(),t.clearRect(0,0,e.width,e.height),t.restore()}function He(e,t,n,r){let i,o,a,s,l;const c=t.pointStyle,u=t.rotation,d=t.radius;let f=(u||0)*R;if(c&&"object"==typeof c&&(i=c.toString(),"[object HTMLImageElement]"===i||"[object HTMLCanvasElement]"===i))return e.save(),e.translate(n,r),e.rotate(f),e.drawImage(c,-c.width/2,-c.height/2,c.width,c.height),void e.restore();if(!(isNaN(d)||d<=0)){switch(e.beginPath(),c){default:e.arc(n,r,d,0,L),e.closePath();break;case"triangle":e.moveTo(n+Math.sin(f)*d,r-Math.cos(f)*d),f+=F,e.lineTo(n+Math.sin(f)*d,r-Math.cos(f)*d),f+=F,e.lineTo(n+Math.sin(f)*d,r-Math.cos(f)*d),e.closePath();break;case"rectRounded":l=.516*d,s=d-l,o=Math.cos(f+z)*s,a=Math.sin(f+z)*s,e.arc(n-o,r-a,l,f-D,f-N),e.arc(n+a,r-o,l,f-N,f),e.arc(n+o,r+a,l,f,f+N),e.arc(n-a,r+o,l,f+N,f+D),e.closePath();break;case"rect":if(!u){s=Math.SQRT1_2*d,e.rect(n-s,r-s,2*s,2*s);break}f+=z;case"rectRot":o=Math.cos(f)*d,a=Math.sin(f)*d,e.moveTo(n-o,r-a),e.lineTo(n+a,r-o),e.lineTo(n+o,r+a),e.lineTo(n-a,r+o),e.closePath();break;case"crossRot":f+=z;case"cross":o=Math.cos(f)*d,a=Math.sin(f)*d,e.moveTo(n-o,r-a),e.lineTo(n+o,r+a),e.moveTo(n+a,r-o),e.lineTo(n-a,r+o);break;case"star":o=Math.cos(f)*d,a=Math.sin(f)*d,e.moveTo(n-o,r-a),e.lineTo(n+o,r+a),e.moveTo(n+a,r-o),e.lineTo(n-a,r+o),f+=z,o=Math.cos(f)*d,a=Math.sin(f)*d,e.moveTo(n-o,r-a),e.lineTo(n+o,r+a),e.moveTo(n+a,r-o),e.lineTo(n-a,r+o);break;case"line":o=Math.cos(f)*d,a=Math.sin(f)*d,e.moveTo(n-o,r-a),e.lineTo(n+o,r+a);break;case"dash":e.moveTo(n,r),e.lineTo(n+Math.cos(f)*d,r+Math.sin(f)*d)}e.fill(),t.borderWidth>0&&e.stroke()}}function $e(e,t,n){return n=n||.5,e&&e.x>t.left-n&&e.x<t.right+n&&e.y>t.top-n&&e.y<t.bottom+n}function Ye(e,t){e.save(),e.beginPath(),e.rect(t.left,t.top,t.right-t.left,t.bottom-t.top),e.clip()}function qe(e){e.restore()}function Qe(e,t,n,r,i){if(!t)return e.lineTo(n.x,n.y);if("middle"===i){const r=(t.x+n.x)/2;e.lineTo(r,t.y),e.lineTo(r,n.y)}else"after"===i!=!!r?e.lineTo(t.x,n.y):e.lineTo(n.x,t.y);e.lineTo(n.x,n.y)}function Xe(e,t,n,r){if(!t)return e.lineTo(n.x,n.y);e.bezierCurveTo(r?t.cp1x:t.cp2x,r?t.cp1y:t.cp2y,r?n.cp2x:n.cp1x,r?n.cp2y:n.cp1y,n.x,n.y)}function Ke(e,t,n,r,i,o={}){const a=d(t)?t:[t],s=o.strokeWidth>0&&""!==o.strokeColor;let l,c;for(e.save(),e.font=i.string,function(e,t){t.translation&&e.translate(t.translation[0],t.translation[1]),u(t.rotation)||e.rotate(t.rotation),t.color&&(e.fillStyle=t.color),t.textAlign&&(e.textAlign=t.textAlign),t.textBaseline&&(e.textBaseline=t.textBaseline)}(e,o),l=0;l<a.length;++l)c=a[l],s&&(o.strokeColor&&(e.strokeStyle=o.strokeColor),u(o.strokeWidth)||(e.lineWidth=o.strokeWidth),e.strokeText(c,n,r,o.maxWidth)),e.fillText(c,n,r,o.maxWidth),Ze(e,n,r,c,o),r+=i.lineHeight;e.restore()}function Ze(e,t,n,r,i){if(i.strikethrough||i.underline){const o=e.measureText(r),a=t-o.actualBoundingBoxLeft,s=t+o.actualBoundingBoxRight,l=n-o.actualBoundingBoxAscent,c=n+o.actualBoundingBoxDescent,u=i.strikethrough?(l+c)/2:c;e.strokeStyle=e.fillStyle,e.beginPath(),e.lineWidth=i.decorationWidth||2,e.moveTo(a,u),e.lineTo(s,u),e.stroke()}}function Ge(e,t){const{x:n,y:r,w:i,h:o,radius:a}=t;e.arc(n+a.topLeft,r+a.topLeft,a.topLeft,-N,D,!0),e.lineTo(n,r+o-a.bottomLeft),e.arc(n+a.bottomLeft,r+o-a.bottomLeft,a.bottomLeft,D,N,!0),e.lineTo(n+i-a.bottomRight,r+o),e.arc(n+i-a.bottomRight,r+o-a.bottomRight,a.bottomRight,N,0,!0),e.lineTo(n+i,r+a.topRight),e.arc(n+i-a.topRight,r+a.topRight,a.topRight,0,-N,!0),e.lineTo(n+a.topLeft,r)}const Je=new RegExp(/^(normal|(\d+(?:\.\d+)?)(px|em|%)?)$/),et=new RegExp(/^(normal|italic|initial|inherit|unset|(oblique( -?[0-9]?[0-9]deg)?))$/);function tt(e,t){const n=(""+e).match(Je);if(!n||"normal"===n[1])return 1.2*t;switch(e=+n[2],n[3]){case"px":return e;case"%":e/=100}return t*e}function nt(e,t){const n={},r=f(t),i=r?Object.keys(t):t,o=f(e)?r?n=>g(e[n],e[t[n]]):t=>e[t]:()=>e;for(const e of i)n[e]=+o(e)||0;return n}function rt(e){return nt(e,{top:"y",right:"x",bottom:"y",left:"x"})}function it(e){return nt(e,["topLeft","topRight","bottomLeft","bottomRight"])}function ot(e){const t=rt(e);return t.width=t.left+t.right,t.height=t.top+t.bottom,t}function at(e,t){e=e||{},t=t||Ie.font;let n=g(e.size,t.size);"string"==typeof n&&(n=parseInt(n,10));let r=g(e.style,t.style);r&&!(""+r).match(et)&&(console.warn('Invalid font style specified: "'+r+'"'),r="");const i={family:g(e.family,t.family),lineHeight:tt(g(e.lineHeight,t.lineHeight),n),size:n,style:r,weight:g(e.weight,t.weight),string:""};return i.string=function(e){return!e||u(e.size)||u(e.family)?null:(e.style?e.style+" ":"")+(e.weight?e.weight+" ":"")+e.size+"px "+e.family}(i),i}function st(e,t,n,r){let i,o,a,s=!0;for(i=0,o=e.length;i<o;++i)if(a=e[i],void 0!==a&&(void 0!==t&&"function"==typeof a&&(a=a(t),s=!1),void 0!==n&&d(a)&&(a=a[n%a.length],s=!1),void 0!==a))return r&&!s&&(r.cacheable=!1),a}function lt(e,t,n){n=n||(n=>e[n]<t);let r,i=e.length-1,o=0;for(;i-o>1;)r=o+i>>1,n(r)?o=r:i=r;return{lo:o,hi:i}}const ct=(e,t,n)=>lt(e,n,(r=>e[r][t]<n)),ut=(e,t,n)=>lt(e,n,(r=>e[r][t]>=n)),dt=["push","pop","shift","splice","unshift"];function ft(e,t){const n=e._chartjs;if(!n)return;const r=n.listeners,i=r.indexOf(t);-1!==i&&r.splice(i,1),r.length>0||(dt.forEach((t=>{delete e[t]})),delete e._chartjs)}function ht(e){const t=new Set;let n,r;for(n=0,r=e.length;n<r;++n)t.add(e[n]);return t.size===r?e:Array.from(t)}function pt(e,t=[""],n=e,r,i=(()=>e[0])){O(r)||(r=Et("_fallback",e));const o={[Symbol.toStringTag]:"Object",_cacheable:!0,_scopes:e,_rootScopes:n,_fallback:r,_getTarget:i,override:i=>pt([i,...e],t,n,r)};return new Proxy(o,{deleteProperty:(t,n)=>(delete t[n],delete t._keys,delete e[0][n],!0),get:(n,r)=>yt(n,r,(()=>function(e,t,n,r){let i;for(const o of t)if(i=Et(vt(o,e),n),O(i))return bt(e,i)?kt(n,r,e,i):i}(r,t,e,n))),getOwnPropertyDescriptor:(e,t)=>Reflect.getOwnPropertyDescriptor(e._scopes[0],t),getPrototypeOf:()=>Reflect.getPrototypeOf(e[0]),has:(e,t)=>Mt(e).includes(t),ownKeys:e=>Mt(e),set:(e,t,n)=>((e._storage||(e._storage=i()))[t]=n,delete e[t],delete e._keys,!0)})}function gt(e,t,n,r){const i={_cacheable:!1,_proxy:e,_context:t,_subProxy:n,_stack:new Set,_descriptors:mt(e,r),setContext:t=>gt(e,t,n,r),override:i=>gt(e.override(i),t,n,r)};return new Proxy(i,{deleteProperty:(t,n)=>(delete t[n],delete e[n],!0),get:(e,t,n)=>yt(e,t,(()=>function(e,t,n){const{_proxy:r,_context:i,_subProxy:o,_descriptors:a}=e;let s=r[t];return T(s)&&a.isScriptable(t)&&(s=function(e,t,n,r){const{_proxy:i,_context:o,_subProxy:a,_stack:s}=n;if(s.has(e))throw new Error("Recursion detected: "+Array.from(s).join("->")+"->"+e);return s.add(e),t=t(o,a||r),s.delete(e),f(t)&&(t=kt(i._scopes,i,e,t)),t}(t,s,e,n)),d(s)&&s.length&&(s=function(e,t,n,r){const{_proxy:i,_context:o,_subProxy:a,_descriptors:s}=n;if(O(o.index)&&r(e))t=t[o.index%t.length];else if(f(t[0])){const n=t,r=i._scopes.filter((e=>e!==n));t=[];for(const l of n){const n=kt(r,i,e,l);t.push(gt(n,o,a&&a[e],s))}}return t}(t,s,e,a.isIndexable)),bt(t,s)&&(s=gt(s,i,o&&o[t],a)),s}(e,t,n))),getOwnPropertyDescriptor:(t,n)=>t._descriptors.allKeys?Reflect.has(e,n)?{enumerable:!0,configurable:!0}:void 0:Reflect.getOwnPropertyDescriptor(e,n),getPrototypeOf:()=>Reflect.getPrototypeOf(e),has:(t,n)=>Reflect.has(e,n),ownKeys:()=>Reflect.ownKeys(e),set:(t,n,r)=>(e[n]=r,delete t[n],!0)})}function mt(e,t={scriptable:!0,indexable:!0}){const{_scriptable:n=t.scriptable,_indexable:r=t.indexable,_allKeys:i=t.allKeys}=e;return{allKeys:i,scriptable:n,indexable:r,isScriptable:T(n)?n:()=>n,isIndexable:T(r)?r:()=>r}}const vt=(e,t)=>e?e+P(t):t,bt=(e,t)=>f(t)&&"adapters"!==e;function yt(e,t,n){let r=e[t];return O(r)||(r=n(),O(r)&&(e[t]=r)),r}function xt(e,t,n){return T(e)?e(t,n):e}const _t=(e,t)=>!0===e?t:"string"==typeof e?C(t,e):void 0;function wt(e,t,n,r){for(const i of t){const t=_t(n,i);if(t){e.add(t);const i=xt(t._fallback,n,t);if(O(i)&&i!==n&&i!==r)return i}else if(!1===t&&O(r)&&n!==r)return null}return!1}function kt(e,t,n,r){const i=t._rootScopes,o=xt(t._fallback,n,r),a=[...e,...i],s=new Set;s.add(r);let l=St(s,a,n,o||n);return null!==l&&(!O(o)||o===n||(l=St(s,a,o,l),null!==l))&&pt(Array.from(s),[""],i,o,(()=>function(e,t,n){const r=e._getTarget();t in r||(r[t]={});const i=r[t];return d(i)&&f(n)?n:i}(t,n,r)))}function St(e,t,n,r){for(;n;)n=wt(e,t,n,r);return n}function Et(e,t){for(const n of t){if(!n)continue;const t=n[e];if(O(t))return t}}function Mt(e){let t=e._keys;return t||(t=e._keys=function(e){const t=new Set;for(const n of e)for(const e of Object.keys(n).filter((e=>!e.startsWith("_"))))t.add(e);return Array.from(t)}(e._scopes)),t}const Ct=Number.EPSILON||1e-14,Pt=(e,t)=>t<e.length&&!e[t].skip&&e[t],Ot=e=>"x"===e?"y":"x";function Tt(e,t,n,r){const i=e.skip?t:e,o=t,a=n.skip?t:n,s=Q(o,i),l=Q(a,o);let c=s/(s+l),u=l/(s+l);c=isNaN(c)?0:c,u=isNaN(u)?0:u;const d=r*c,f=r*u;return{previous:{x:o.x-d*(a.x-i.x),y:o.y-d*(a.y-i.y)},next:{x:o.x+f*(a.x-i.x),y:o.y+f*(a.y-i.y)}}}function Dt(e,t,n){return Math.max(Math.min(e,n),t)}function Lt(e,t,n,r,i){let o,a,s,l;if(t.spanGaps&&(e=e.filter((e=>!e.skip))),"monotone"===t.cubicInterpolationMode)!function(e,t="x"){const n=Ot(t),r=e.length,i=Array(r).fill(0),o=Array(r);let a,s,l,c=Pt(e,0);for(a=0;a<r;++a)if(s=l,l=c,c=Pt(e,a+1),l){if(c){const e=c[t]-l[t];i[a]=0!==e?(c[n]-l[n])/e:0}o[a]=s?c?B(i[a-1])!==B(i[a])?0:(i[a-1]+i[a])/2:i[a-1]:i[a]}!function(e,t,n){const r=e.length;let i,o,a,s,l,c=Pt(e,0);for(let u=0;u<r-1;++u)l=c,c=Pt(e,u+1),l&&c&&(U(t[u],0,Ct)?n[u]=n[u+1]=0:(i=n[u]/t[u],o=n[u+1]/t[u],s=Math.pow(i,2)+Math.pow(o,2),s<=9||(a=3/Math.sqrt(s),n[u]=i*a*t[u],n[u+1]=o*a*t[u])))}(e,i,o),function(e,t,n="x"){const r=Ot(n),i=e.length;let o,a,s,l=Pt(e,0);for(let c=0;c<i;++c){if(a=s,s=l,l=Pt(e,c+1),!s)continue;const i=s[n],u=s[r];a&&(o=(i-a[n])/3,s[`cp1${n}`]=i-o,s[`cp1${r}`]=u-o*t[c]),l&&(o=(l[n]-i)/3,s[`cp2${n}`]=i+o,s[`cp2${r}`]=u+o*t[c])}}(e,o,t)}(e,i);else{let n=r?e[e.length-1]:e[0];for(o=0,a=e.length;o<a;++o)s=e[o],l=Tt(n,s,e[Math.min(o+1,a-(r?0:1))%a],t.tension),s.cp1x=l.previous.x,s.cp1y=l.previous.y,s.cp2x=l.next.x,s.cp2y=l.next.y,n=s}t.capBezierPoints&&function(e,t){let n,r,i,o,a,s=$e(e[0],t);for(n=0,r=e.length;n<r;++n)a=o,o=s,s=n<r-1&&$e(e[n+1],t),o&&(i=e[n],a&&(i.cp1x=Dt(i.cp1x,t.left,t.right),i.cp1y=Dt(i.cp1y,t.top,t.bottom)),s&&(i.cp2x=Dt(i.cp2x,t.left,t.right),i.cp2y=Dt(i.cp2y,t.top,t.bottom)))}(e,n)}function jt(e){let t=e.parentNode;return t&&"[object ShadowRoot]"===t.toString()&&(t=t.host),t}function At(e,t,n){let r;return"string"==typeof e?(r=parseInt(e,10),-1!==e.indexOf("%")&&(r=r/100*t.parentNode[n])):r=e,r}const Rt=e=>window.getComputedStyle(e,null),Nt=["top","right","bottom","left"];function zt(e,t,n){const r={};n=n?"-"+n:"";for(let i=0;i<4;i++){const o=Nt[i];r[o]=parseFloat(e[t+"-"+o+n])||0}return r.width=r.left+r.right,r.height=r.top+r.bottom,r}function Ft(e,t){const{canvas:n,currentDevicePixelRatio:r}=t,i=Rt(n),o="border-box"===i.boxSizing,a=zt(i,"padding"),s=zt(i,"border","width"),{x:l,y:c,box:u}=function(e,t){const n=e.native||e,r=n.touches,i=r&&r.length?r[0]:n,{offsetX:o,offsetY:a}=i;let s,l,c=!1;if(((e,t,n)=>(e>0||t>0)&&(!n||!n.shadowRoot))(o,a,n.target))s=o,l=a;else{const e=t.getBoundingClientRect();s=i.clientX-e.left,l=i.clientY-e.top,c=!0}return{x:s,y:l,box:c}}(e,n),d=a.left+(u&&s.left),f=a.top+(u&&s.top);let{width:h,height:p}=t;return o&&(h-=a.width+s.width,p-=a.height+s.height),{x:Math.round((l-d)/h*n.width/r),y:Math.round((c-f)/p*n.height/r)}}const It=e=>Math.round(10*e)/10;function Bt(e,t,n){const r=t||1,i=Math.floor(e.height*r),o=Math.floor(e.width*r);e.height=i/r,e.width=o/r;const a=e.canvas;return a.style&&(n||!a.style.height&&!a.style.width)&&(a.style.height=`${e.height}px`,a.style.width=`${e.width}px`),(e.currentDevicePixelRatio!==r||a.height!==i||a.width!==o)&&(e.currentDevicePixelRatio=r,a.height=i,a.width=o,e.ctx.setTransform(r,0,0,r,0,0),!0)}const Vt=function(){let e=!1;try{const t={get passive(){return e=!0,!1}};window.addEventListener("test",null,t),window.removeEventListener("test",null,t)}catch(e){}return e}();function Wt(e,t){const n=function(e,t){return Rt(e).getPropertyValue(t)}(e,t),r=n&&n.match(/^(\d+)(\.\d+)?px$/);return r?+r[1]:void 0}function Ut(e,t,n,r){return{x:e.x+n*(t.x-e.x),y:e.y+n*(t.y-e.y)}}function Ht(e,t,n,r){return{x:e.x+n*(t.x-e.x),y:"middle"===r?n<.5?e.y:t.y:"after"===r?n<1?e.y:t.y:n>0?t.y:e.y}}function $t(e,t,n,r){const i={x:e.cp2x,y:e.cp2y},o={x:t.cp1x,y:t.cp1y},a=Ut(e,i,n),s=Ut(i,o,n),l=Ut(o,t,n),c=Ut(a,s,n),u=Ut(s,l,n);return Ut(c,u,n)}const Yt=new Map;function qt(e,t,n){return function(e,t){t=t||{};const n=e+JSON.stringify(t);let r=Yt.get(n);return r||(r=new Intl.NumberFormat(e,t),Yt.set(n,r)),r}(t,n).format(e)}function Qt(e,t,n){return e?function(e,t){return{x:n=>e+e+t-n,setWidth(e){t=e},textAlign:e=>"center"===e?e:"right"===e?"left":"right",xPlus:(e,t)=>e-t,leftForLtr:(e,t)=>e-t}}(t,n):{x:e=>e,setWidth(e){},textAlign:e=>e,xPlus:(e,t)=>e+t,leftForLtr:(e,t)=>e}}function Xt(e,t){let n,r;"ltr"!==t&&"rtl"!==t||(n=e.canvas.style,r=[n.getPropertyValue("direction"),n.getPropertyPriority("direction")],n.setProperty("direction",t,"important"),e.prevTextDirection=r)}function Kt(e,t){void 0!==t&&(delete e.prevTextDirection,e.canvas.style.setProperty("direction",t[0],t[1]))}function Zt(e){return"angle"===e?{between:Z,compare:X,normalize:K}:{between:(e,t,n)=>e>=Math.min(t,n)&&e<=Math.max(n,t),compare:(e,t)=>e-t,normalize:e=>e}}function Gt({start:e,end:t,count:n,loop:r,style:i}){return{start:e%n,end:t%n,loop:r&&(t-e+1)%n==0,style:i}}function Jt(e,t,n){if(!n)return[e];const{property:r,start:i,end:o}=n,a=t.length,{compare:s,between:l,normalize:c}=Zt(r),{start:u,end:d,loop:f,style:h}=function(e,t,n){const{property:r,start:i,end:o}=n,{between:a,normalize:s}=Zt(r),l=t.length;let c,u,{start:d,end:f,loop:h}=e;if(h){for(d+=l,f+=l,c=0,u=l;c<u&&a(s(t[d%l][r]),i,o);++c)d--,f--;d%=l,f%=l}return f<d&&(f+=l),{start:d,end:f,loop:h,style:e.style}}(e,t,n),p=[];let g,m,v,b=!1,y=null;for(let e=u,n=u;e<=d;++e)m=t[e%a],m.skip||(g=c(m[r]),g!==v&&(b=l(g,i,o),null===y&&(b||l(i,v,g)&&0!==s(i,v))&&(y=0===s(g,i)?e:n),null!==y&&(!b||0===s(o,g)||l(o,v,g))&&(p.push(Gt({start:y,end:e,loop:f,count:a,style:h})),y=null),n=e,v=g));return null!==y&&p.push(Gt({start:y,end:d,loop:f,count:a,style:h})),p}function en(e,t){const n=[],r=e.segments;for(let i=0;i<r.length;i++){const o=Jt(r[i],e.points,t);o.length&&n.push(...o)}return n}function tn(e,t){return t&&JSON.stringify(e)!==JSON.stringify(t)}var nn=new class{constructor(){this._request=null,this._charts=new Map,this._running=!1,this._lastDate=void 0}_notify(e,t,n,r){const i=t.listeners[r],o=t.duration;i.forEach((r=>r({chart:e,initial:t.initial,numSteps:o,currentStep:Math.min(n-t.start,o)})))}_refresh(){const e=this;e._request||(e._running=!0,e._request=i.call(window,(()=>{e._update(),e._request=null,e._running&&e._refresh()})))}_update(e=Date.now()){const t=this;let n=0;t._charts.forEach(((r,i)=>{if(!r.running||!r.items.length)return;const o=r.items;let a,s=o.length-1,l=!1;for(;s>=0;--s)a=o[s],a._active?(a._total>r.duration&&(r.duration=a._total),a.tick(e),l=!0):(o[s]=o[o.length-1],o.pop());l&&(i.draw(),t._notify(i,r,e,"progress")),o.length||(r.running=!1,t._notify(i,r,e,"complete"),r.initial=!1),n+=o.length})),t._lastDate=e,0===n&&(t._running=!1)}_getAnims(e){const t=this._charts;let n=t.get(e);return n||(n={running:!1,initial:!0,items:[],listeners:{complete:[],progress:[]}},t.set(e,n)),n}listen(e,t,n){this._getAnims(e).listeners[t].push(n)}add(e,t){t&&t.length&&this._getAnims(e).items.push(...t)}has(e){return this._getAnims(e).items.length>0}start(e){const t=this._charts.get(e);t&&(t.running=!0,t.start=Date.now(),t.duration=t.items.reduce(((e,t)=>Math.max(e,t._duration)),0),this._refresh())}running(e){if(!this._running)return!1;const t=this._charts.get(e);return!!(t&&t.running&&t.items.length)}stop(e){const t=this._charts.get(e);if(!t||!t.items.length)return;const n=t.items;let r=n.length-1;for(;r>=0;--r)n[r].cancel();t.items=[],this._notify(e,t,Date.now(),"complete")}remove(e){return this._charts.delete(e)}};const rn="transparent",on={boolean:(e,t,n)=>n>.5?t:e,color(e,t,n){const r=je(e||rn),i=r.valid&&je(t||rn);return i&&i.valid?i.mix(r,n).hexString():t},number:(e,t,n)=>e+(t-e)*n};class an{constructor(e,t,n,r){const i=t[n];r=st([e.to,r,i,e.from]);const o=st([e.from,i,r]);this._active=!0,this._fn=e.fn||on[e.type||typeof o],this._easing=ne[e.easing]||ne.linear,this._start=Math.floor(Date.now()+(e.delay||0)),this._duration=this._total=Math.floor(e.duration),this._loop=!!e.loop,this._target=t,this._prop=n,this._from=o,this._to=r,this._promises=void 0}active(){return this._active}update(e,t,n){const r=this;if(r._active){r._notify(!1);const i=r._target[r._prop],o=n-r._start,a=r._duration-o;r._start=n,r._duration=Math.floor(Math.max(a,e.duration)),r._total+=o,r._loop=!!e.loop,r._to=st([e.to,t,i,e.from]),r._from=st([e.from,i,t])}}cancel(){const e=this;e._active&&(e.tick(Date.now()),e._active=!1,e._notify(!1))}tick(e){const t=this,n=e-t._start,r=t._duration,i=t._prop,o=t._from,a=t._loop,s=t._to;let l;if(t._active=o!==s&&(a||n<r),!t._active)return t._target[i]=s,void t._notify(!0);n<0?t._target[i]=o:(l=n/r%2,l=a&&l>1?2-l:l,l=t._easing(Math.min(1,Math.max(0,l))),t._target[i]=t._fn(o,s,l))}wait(){const e=this._promises||(this._promises=[]);return new Promise(((t,n)=>{e.push({res:t,rej:n})}))}_notify(e){const t=e?"res":"rej",n=this._promises||[];for(let e=0;e<n.length;e++)n[e][t]()}}Ie.set("animation",{delay:void 0,duration:1e3,easing:"easeOutQuart",fn:void 0,from:void 0,loop:void 0,to:void 0,type:void 0});const sn=Object.keys(Ie.animation);Ie.describe("animation",{_fallback:!1,_indexable:!1,_scriptable:e=>"onProgress"!==e&&"onComplete"!==e&&"fn"!==e}),Ie.set("animations",{colors:{type:"color",properties:["color","borderColor","backgroundColor"]},numbers:{type:"number",properties:["x","y","borderWidth","radius","tension"]}}),Ie.describe("animations",{_fallback:"animation"}),Ie.set("transitions",{active:{animation:{duration:400}},resize:{animation:{duration:0}},show:{animations:{colors:{from:"transparent"},visible:{type:"boolean",duration:0}}},hide:{animations:{colors:{to:"transparent"},visible:{type:"boolean",easing:"linear",fn:e=>0|e}}}});class ln{constructor(e,t){this._chart=e,this._properties=new Map,this.configure(t)}configure(e){if(!f(e))return;const t=this._properties;Object.getOwnPropertyNames(e).forEach((n=>{const r=e[n];if(!f(r))return;const i={};for(const e of sn)i[e]=r[e];(d(r.properties)&&r.properties||[n]).forEach((e=>{e!==n&&t.has(e)||t.set(e,i)}))}))}_animateOptions(e,t){const n=t.options,r=function(e,t){if(!t)return;let n=e.options;if(n)return n.$shared&&(e.options=n=Object.assign({},n,{$shared:!1,$animations:{}})),n;e.options=t}(e,n);if(!r)return[];const i=this._createAnimations(r,n);return n.$shared&&function(e,t){const n=[],r=Object.keys(t);for(let t=0;t<r.length;t++){const i=e[r[t]];i&&i.active()&&n.push(i.wait())}return Promise.all(n)}(e.options.$animations,n).then((()=>{e.options=n}),(()=>{})),i}_createAnimations(e,t){const n=this._properties,r=[],i=e.$animations||(e.$animations={}),o=Object.keys(t),a=Date.now();let s;for(s=o.length-1;s>=0;--s){const l=o[s];if("$"===l.charAt(0))continue;if("options"===l){r.push(...this._animateOptions(e,t));continue}const c=t[l];let u=i[l];const d=n.get(l);if(u){if(d&&u.active()){u.update(d,c,a);continue}u.cancel()}d&&d.duration?(i[l]=u=new an(d,e,l,c),r.push(u)):e[l]=c}return r}update(e,t){if(0===this._properties.size)return void Object.assign(e,t);const n=this._createAnimations(e,t);return n.length?(nn.add(this._chart,n),!0):void 0}}function cn(e,t){const n=e&&e.options||{},r=n.reverse,i=void 0===n.min?t:0,o=void 0===n.max?t:0;return{start:r?o:i,end:r?i:o}}function un(e,t){const n=[],r=e._getSortedDatasetMetas(t);let i,o;for(i=0,o=r.length;i<o;++i)n.push(r[i].index);return n}function dn(e,t,n,r){const i=e.keys,o="single"===r.mode;let a,s,l,c;if(null!==t){for(a=0,s=i.length;a<s;++a){if(l=+i[a],l===n){if(r.all)continue;break}c=e.values[l],h(c)&&(o||0===t||B(t)===B(c))&&(t+=c)}return t}}function fn(e,t){const n=e&&e.options.stacked;return n||void 0===n&&void 0!==t.stack}function hn(e,t,n){const r=e[t]||(e[t]={});return r[n]||(r[n]={})}function pn(e,t,n){for(const r of t.getMatchingVisibleMetas("bar").reverse()){const t=e[r.index];if(n&&t>0||!n&&t<0)return r.index}return null}function gn(e,t){const{chart:n,_cachedMeta:r}=e,i=n._stacks||(n._stacks={}),{iScale:o,vScale:a,index:s}=r,l=o.axis,c=a.axis,u=function(e,t,n){return`${e.id}.${t.id}.${n.stack||n.type}`}(o,a,r),d=t.length;let f;for(let e=0;e<d;++e){const n=t[e],{[l]:r,[c]:o}=n;f=(n._stacks||(n._stacks={}))[c]=hn(i,u,r),f[s]=o,f._top=pn(f,a,!0),f._bottom=pn(f,a,!1)}}function mn(e,t){const n=e.scales;return Object.keys(n).filter((e=>n[e].axis===t)).shift()}function vn(e,t){const n=e.vScale&&e.vScale.axis;if(n){t=t||e._parsed;for(const r of t){const t=r._stacks;if(!t||void 0===t[n]||void 0===t[n][e.index])return;delete t[n][e.index]}}}const bn=e=>"reset"===e||"none"===e,yn=(e,t)=>t?e:Object.assign({},e);class xn{constructor(e,t){this.chart=e,this._ctx=e.ctx,this.index=t,this._cachedDataOpts={},this._cachedMeta=this.getMeta(),this._type=this._cachedMeta.type,this.options=void 0,this._parsing=!1,this._data=void 0,this._objectData=void 0,this._sharedOptions=void 0,this._drawStart=void 0,this._drawCount=void 0,this.enableOptionSharing=!1,this.$context=void 0,this._syncList=[],this.initialize()}initialize(){const e=this,t=e._cachedMeta;e.configure(),e.linkScales(),t._stacked=fn(t.vScale,t),e.addElements()}updateIndex(e){this.index!==e&&vn(this._cachedMeta),this.index=e}linkScales(){const e=this,t=e.chart,n=e._cachedMeta,r=e.getDataset(),i=(e,t,n,r)=>"x"===e?t:"r"===e?r:n,o=n.xAxisID=g(r.xAxisID,mn(t,"x")),a=n.yAxisID=g(r.yAxisID,mn(t,"y")),s=n.rAxisID=g(r.rAxisID,mn(t,"r")),l=n.indexAxis,c=n.iAxisID=i(l,o,a,s),u=n.vAxisID=i(l,a,o,s);n.xScale=e.getScaleForId(o),n.yScale=e.getScaleForId(a),n.rScale=e.getScaleForId(s),n.iScale=e.getScaleForId(c),n.vScale=e.getScaleForId(u)}getDataset(){return this.chart.data.datasets[this.index]}getMeta(){return this.chart.getDatasetMeta(this.index)}getScaleForId(e){return this.chart.scales[e]}_getOtherScale(e){const t=this._cachedMeta;return e===t.iScale?t.vScale:t.iScale}reset(){this._update("reset")}_destroy(){const e=this._cachedMeta;this._data&&ft(this._data,this),e._stacked&&vn(e)}_dataCheck(){const e=this,t=e.getDataset(),n=t.data||(t.data=[]),r=e._data;if(f(n))e._data=function(e){const t=Object.keys(e),n=new Array(t.length);let r,i,o;for(r=0,i=t.length;r<i;++r)o=t[r],n[r]={x:o,y:e[o]};return n}(n);else if(r!==n){if(r){ft(r,e);const t=e._cachedMeta;vn(t),t._parsed=[]}n&&Object.isExtensible(n)&&(o=e,(i=n)._chartjs?i._chartjs.listeners.push(o):(Object.defineProperty(i,"_chartjs",{configurable:!0,enumerable:!1,value:{listeners:[o]}}),dt.forEach((e=>{const t="_onData"+P(e),n=i[e];Object.defineProperty(i,e,{configurable:!0,enumerable:!1,value(...e){const r=n.apply(this,e);return i._chartjs.listeners.forEach((n=>{"function"==typeof n[t]&&n[t](...e)})),r}})})))),e._syncList=[],e._data=n}var i,o}addElements(){const e=this,t=e._cachedMeta;e._dataCheck(),e.datasetElementType&&(t.dataset=new e.datasetElementType)}buildOrUpdateElements(e){const t=this,n=t._cachedMeta,r=t.getDataset();let i=!1;t._dataCheck();const o=n._stacked;n._stacked=fn(n.vScale,n),n.stack!==r.stack&&(i=!0,vn(n),n.stack=r.stack),t._resyncElements(e),(i||o!==n._stacked)&&gn(t,n._parsed)}configure(){const e=this,t=e.chart.config,n=t.datasetScopeKeys(e._type),r=t.getOptionScopes(e.getDataset(),n,!0);e.options=t.createResolver(r,e.getContext()),e._parsing=e.options.parsing}parse(e,t){const n=this,{_cachedMeta:r,_data:i}=n,{iScale:o,_stacked:a}=r,s=o.axis;let l,c,u,h=0===e&&t===i.length||r._sorted,p=e>0&&r._parsed[e-1];if(!1===n._parsing)r._parsed=i,r._sorted=!0,u=i;else{u=d(i[e])?n.parseArrayData(r,i,e,t):f(i[e])?n.parseObjectData(r,i,e,t):n.parsePrimitiveData(r,i,e,t);const o=()=>null===c[s]||p&&c[s]<p[s];for(l=0;l<t;++l)r._parsed[l+e]=c=u[l],h&&(o()&&(h=!1),p=c);r._sorted=h}a&&gn(n,u)}parsePrimitiveData(e,t,n,r){const{iScale:i,vScale:o}=e,a=i.axis,s=o.axis,l=i.getLabels(),c=i===o,u=new Array(r);let d,f,h;for(d=0,f=r;d<f;++d)h=d+n,u[d]={[a]:c||i.parse(l[h],h),[s]:o.parse(t[h],h)};return u}parseArrayData(e,t,n,r){const{xScale:i,yScale:o}=e,a=new Array(r);let s,l,c,u;for(s=0,l=r;s<l;++s)c=s+n,u=t[c],a[s]={x:i.parse(u[0],c),y:o.parse(u[1],c)};return a}parseObjectData(e,t,n,r){const{xScale:i,yScale:o}=e,{xAxisKey:a="x",yAxisKey:s="y"}=this._parsing,l=new Array(r);let c,u,d,f;for(c=0,u=r;c<u;++c)d=c+n,f=t[d],l[c]={x:i.parse(C(f,a),d),y:o.parse(C(f,s),d)};return l}getParsed(e){return this._cachedMeta._parsed[e]}getDataElement(e){return this._cachedMeta.data[e]}applyStack(e,t,n){const r=this.chart,i=this._cachedMeta,o=t[e.axis];return dn({keys:un(r,!0),values:t._stacks[e.axis]},o,i.index,{mode:n})}updateRangeFromParsed(e,t,n,r){const i=n[t.axis];let o=null===i?NaN:i;const a=r&&n._stacks[t.axis];r&&a&&(r.values=a,e.min=Math.min(e.min,o),e.max=Math.max(e.max,o),o=dn(r,i,this._cachedMeta.index,{all:!0})),e.min=Math.min(e.min,o),e.max=Math.max(e.max,o)}getMinMax(e,t){const n=this,r=n._cachedMeta,i=r._parsed,o=r._sorted&&e===r.iScale,a=i.length,s=n._getOtherScale(e),l=t&&r._stacked&&{keys:un(n.chart,!0),values:null},c={min:Number.POSITIVE_INFINITY,max:Number.NEGATIVE_INFINITY},{min:u,max:d}=function(e){const{min:t,max:n,minDefined:r,maxDefined:i}=e.getUserBounds();return{min:r?t:Number.NEGATIVE_INFINITY,max:i?n:Number.POSITIVE_INFINITY}}(s);let f,p,g,m;function v(){return g=i[f],p=g[e.axis],m=g[s.axis],!h(p)||u>m||d<m}for(f=0;f<a&&(v()||(n.updateRangeFromParsed(c,e,g,l),!o));++f);if(o)for(f=a-1;f>=0;--f)if(!v()){n.updateRangeFromParsed(c,e,g,l);break}return c}getAllParsedValues(e){const t=this._cachedMeta._parsed,n=[];let r,i,o;for(r=0,i=t.length;r<i;++r)o=t[r][e.axis],h(o)&&n.push(o);return n}getMaxOverflow(){return!1}getLabelAndValue(e){const t=this._cachedMeta,n=t.iScale,r=t.vScale,i=this.getParsed(e);return{label:n?""+n.getLabelForValue(i[n.axis]):"",value:r?""+r.getLabelForValue(i[r.axis]):""}}_update(e){const t=this,n=t._cachedMeta;t.configure(),t._cachedDataOpts={},t.update(e||"default"),n._clip=function(e){let t,n,r,i;return f(e)?(t=e.top,n=e.right,r=e.bottom,i=e.left):t=n=r=i=e,{top:t,right:n,bottom:r,left:i,disabled:!1===e}}(g(t.options.clip,function(e,t,n){if(!1===n)return!1;const r=cn(e,n),i=cn(t,n);return{top:i.end,right:r.end,bottom:i.start,left:r.start}}(n.xScale,n.yScale,t.getMaxOverflow())))}update(e){}draw(){const e=this,t=e._ctx,n=e.chart,r=e._cachedMeta,i=r.data||[],o=n.chartArea,a=[],s=e._drawStart||0,l=e._drawCount||i.length-s;let c;for(r.dataset&&r.dataset.draw(t,o,s,l),c=s;c<s+l;++c){const e=i[c];e.active?a.push(e):e.draw(t,o)}for(c=0;c<a.length;++c)a[c].draw(t,o)}getStyle(e,t){const n=t?"active":"default";return void 0===e&&this._cachedMeta.dataset?this.resolveDatasetElementOptions(n):this.resolveDataElementOptions(e||0,n)}getContext(e,t,n){const r=this,i=r.getDataset();let o;if(e>=0&&e<r._cachedMeta.data.length){const t=r._cachedMeta.data[e];o=t.$context||(t.$context=function(e,t,n){return Object.assign(Object.create(e),{active:!1,dataIndex:t,parsed:void 0,raw:void 0,element:n,index:t,mode:"default",type:"data"})}(r.getContext(),e,t)),o.parsed=r.getParsed(e),o.raw=i.data[e],o.index=o.dataIndex=e}else o=r.$context||(r.$context=function(e,t){return Object.assign(Object.create(e),{active:!1,dataset:void 0,datasetIndex:t,index:t,mode:"default",type:"dataset"})}(r.chart.getContext(),r.index)),o.dataset=i,o.index=o.datasetIndex=r.index;return o.active=!!t,o.mode=n,o}resolveDatasetElementOptions(e){return this._resolveElementOptions(this.datasetElementType.id,e)}resolveDataElementOptions(e,t){return this._resolveElementOptions(this.dataElementType.id,t,e)}_resolveElementOptions(e,t="default",n){const r=this,i="active"===t,o=r._cachedDataOpts,a=e+"-"+t,s=o[a],l=r.enableOptionSharing&&O(n);if(s)return yn(s,l);const c=r.chart.config,u=c.datasetElementScopeKeys(r._type,e),d=i?[`${e}Hover`,"hover",e,""]:[e,""],f=c.getOptionScopes(r.getDataset(),u),h=Object.keys(Ie.elements[e]),p=c.resolveNamedOptions(f,h,(()=>r.getContext(n,i)),d);return p.$shared&&(p.$shared=l,o[a]=Object.freeze(yn(p,l))),p}_resolveAnimations(e,t,n){const r=this,i=r.chart,o=r._cachedDataOpts,a=`animation-${t}`,s=o[a];if(s)return s;let l;if(!1!==i.options.animation){const i=r.chart.config,o=i.datasetAnimationScopeKeys(r._type,t),a=i.getOptionScopes(r.getDataset(),o);l=i.createResolver(a,r.getContext(e,n,t))}const c=new ln(i,l&&l.animations);return l&&l._cacheable&&(o[a]=Object.freeze(c)),c}getSharedOptions(e){if(e.$shared)return this._sharedOptions||(this._sharedOptions=Object.assign({},e))}includeOptions(e,t){return!t||bn(e)||this.chart._animationsDisabled}updateElement(e,t,n,r){bn(r)?Object.assign(e,n):this._resolveAnimations(t,r).update(e,n)}updateSharedOptions(e,t,n){e&&!bn(t)&&this._resolveAnimations(void 0,t).update(e,n)}_setStyle(e,t,n,r){e.active=r;const i=this.getStyle(t,r);this._resolveAnimations(t,n,r).update(e,{options:!r&&this.getSharedOptions(i)||i})}removeHoverStyle(e,t,n){this._setStyle(e,n,"active",!1)}setHoverStyle(e,t,n){this._setStyle(e,n,"active",!0)}_removeDatasetHoverStyle(){const e=this._cachedMeta.dataset;e&&this._setStyle(e,void 0,"active",!1)}_setDatasetHoverStyle(){const e=this._cachedMeta.dataset;e&&this._setStyle(e,void 0,"active",!0)}_resyncElements(e){const t=this,n=t._data,r=t._cachedMeta.data;for(const[e,n,r]of t._syncList)t[e](n,r);t._syncList=[];const i=r.length,o=n.length,a=Math.min(o,i);a&&t.parse(0,a),o>i?t._insertElements(i,o-i,e):o<i&&t._removeElements(o,i-o)}_insertElements(e,t,n=!0){const r=this,i=r._cachedMeta,o=i.data,a=e+t;let s;const l=e=>{for(e.length+=t,s=e.length-1;s>=a;s--)e[s]=e[s-t]};for(l(o),s=e;s<a;++s)o[s]=new r.dataElementType;r._parsing&&l(i._parsed),r.parse(e,t),n&&r.updateElements(o,e,t,"reset")}updateElements(e,t,n,r){}_removeElements(e,t){const n=this._cachedMeta;if(this._parsing){const r=n._parsed.splice(e,t);n._stacked&&vn(n,r)}n.data.splice(e,t)}_onDataPush(){const e=arguments.length;this._syncList.push(["_insertElements",this.getDataset().data.length-e,e])}_onDataPop(){this._syncList.push(["_removeElements",this._cachedMeta.data.length-1,1])}_onDataShift(){this._syncList.push(["_removeElements",0,1])}_onDataSplice(e,t){this._syncList.push(["_removeElements",e,t]),this._syncList.push(["_insertElements",e,arguments.length-2])}_onDataUnshift(){this._syncList.push(["_insertElements",0,arguments.length])}}function _n(e){const t=function(e){if(!e._cache.$bar){const t=e.getMatchingVisibleMetas("bar");let n=[];for(let r=0,i=t.length;r<i;r++)n=n.concat(t[r].controller.getAllParsedValues(e));e._cache.$bar=ht(n.sort(((e,t)=>e-t)))}return e._cache.$bar}(e);let n,r,i,o,a=e._length;const s=()=>{32767!==i&&-32768!==i&&(O(o)&&(a=Math.min(a,Math.abs(i-o)||a)),o=i)};for(n=0,r=t.length;n<r;++n)i=e.getPixelForValue(t[n]),s();for(o=void 0,n=0,r=e.ticks.length;n<r;++n)i=e.getPixelForTick(n),s();return a}function wn(e,t,n,r){return d(e)?function(e,t,n,r){const i=n.parse(e[0],r),o=n.parse(e[1],r),a=Math.min(i,o),s=Math.max(i,o);let l=a,c=s;Math.abs(a)>Math.abs(s)&&(l=s,c=a),t[n.axis]=c,t._custom={barStart:l,barEnd:c,start:i,end:o,min:a,max:s}}(e,t,n,r):t[n.axis]=n.parse(e,r),t}function kn(e,t,n,r){const i=e.iScale,o=e.vScale,a=i.getLabels(),s=i===o,l=[];let c,u,d,f;for(c=n,u=n+r;c<u;++c)f=t[c],d={},d[i.axis]=s||i.parse(a[c],c),l.push(wn(f,d,o,c));return l}function Sn(e){return e&&void 0!==e.barStart&&void 0!==e.barEnd}xn.defaults={},xn.prototype.datasetElementType=null,xn.prototype.dataElementType=null;class En extends xn{parsePrimitiveData(e,t,n,r){return kn(e,t,n,r)}parseArrayData(e,t,n,r){return kn(e,t,n,r)}parseObjectData(e,t,n,r){const{iScale:i,vScale:o}=e,{xAxisKey:a="x",yAxisKey:s="y"}=this._parsing,l="x"===i.axis?a:s,c="x"===o.axis?a:s,u=[];let d,f,h,p;for(d=n,f=n+r;d<f;++d)p=t[d],h={},h[i.axis]=i.parse(C(p,l),d),u.push(wn(C(p,c),h,o,d));return u}updateRangeFromParsed(e,t,n,r){super.updateRangeFromParsed(e,t,n,r);const i=n._custom;i&&t===this._cachedMeta.vScale&&(e.min=Math.min(e.min,i.min),e.max=Math.max(e.max,i.max))}getMaxOverflow(){return 0}getLabelAndValue(e){const t=this._cachedMeta,{iScale:n,vScale:r}=t,i=this.getParsed(e),o=i._custom,a=Sn(o)?"["+o.start+", "+o.end+"]":""+r.getLabelForValue(i[r.axis]);return{label:""+n.getLabelForValue(i[n.axis]),value:a}}initialize(){const e=this;e.enableOptionSharing=!0,super.initialize(),e._cachedMeta.stack=e.getDataset().stack}update(e){const t=this._cachedMeta;this.updateElements(t.data,0,t.data.length,e)}updateElements(e,t,n,r){const i=this,o="reset"===r,a=i._cachedMeta.vScale,s=a.getBasePixel(),l=a.isHorizontal(),c=i._getRuler(),d=i.resolveDataElementOptions(t,r),f=i.getSharedOptions(d),h=i.includeOptions(r,f);i.updateSharedOptions(f,r,d);for(let d=t;d<t+n;d++){const t=i.getParsed(d),n=o||u(t[a.axis])?{base:s,head:s}:i._calculateBarValuePixels(d),p=i._calculateBarIndexPixels(d,c),g=(t._stacks||{})[a.axis],m={horizontal:l,base:n.base,enableBorderRadius:!g||Sn(t._custom)||i.index===g._top||i.index===g._bottom,x:l?n.head:p.center,y:l?p.center:n.head,height:l?p.size:Math.abs(n.size),width:l?Math.abs(n.size):p.size};h&&(m.options=f||i.resolveDataElementOptions(d,e[d].active?"active":r)),i.updateElement(e[d],d,m,r)}}_getStacks(e,t){const n=this._cachedMeta.iScale,r=n.getMatchingVisibleMetas(this._type),i=n.options.stacked,o=r.length,a=[];let s,l;for(s=0;s<o;++s)if(l=r[s],l.controller.options.grouped){if(void 0!==t){const e=l.controller.getParsed(t)[l.controller._cachedMeta.vScale.axis];if(u(e)||isNaN(e))continue}if((!1===i||-1===a.indexOf(l.stack)||void 0===i&&void 0===l.stack)&&a.push(l.stack),l.index===e)break}return a.length||a.push(void 0),a}_getStackCount(e){return this._getStacks(void 0,e).length}_getStackIndex(e,t,n){const r=this._getStacks(e,n),i=void 0!==t?r.indexOf(t):-1;return-1===i?r.length-1:i}_getRuler(){const e=this,t=e.options,n=e._cachedMeta,r=n.iScale,i=[];let o,a;for(o=0,a=n.data.length;o<a;++o)i.push(r.getPixelForValue(e.getParsed(o)[r.axis],o));const s=t.barThickness;return{min:s||_n(r),pixels:i,start:r._startPixel,end:r._endPixel,stackCount:e._getStackCount(),scale:r,grouped:t.grouped,ratio:s?1:t.categoryPercentage*t.barPercentage}}_calculateBarValuePixels(e){const t=this,{vScale:n,_stacked:r}=t._cachedMeta,{base:i,minBarLength:o}=t.options,a=t.getParsed(e),s=a._custom,l=Sn(s);let c,d,f=a[n.axis],h=0,p=r?t.applyStack(n,a,r):f;p!==f&&(h=p-f,p=f),l&&(f=s.barStart,p=s.barEnd-s.barStart,0!==f&&B(f)!==B(s.barEnd)&&(h=0),h+=f);const g=u(i)||l?h:i;let m=n.getPixelForValue(g);c=this.chart.getDataVisibility(e)?n.getPixelForValue(h+p):m,d=c-m,void 0!==o&&Math.abs(d)<o&&(d=d<0?-o:o,0===f&&(m-=d/2),c=m+d);const v=i||0;if(m===n.getPixelForValue(v)){const e=n.getLineWidthForValue(v)/2;d>0?(m+=e,d-=e):d<0&&(m-=e,d+=e)}return{size:d,base:m,head:c,center:c+d/2}}_calculateBarIndexPixels(e,t){const n=this,r=t.scale,i=n.options,o=i.skipNull,a=g(i.maxBarThickness,1/0);let s,l;if(t.grouped){const r=o?n._getStackCount(e):t.stackCount,c="flex"===i.barThickness?function(e,t,n,r){const i=t.pixels,o=i[e];let a=e>0?i[e-1]:null,s=e<i.length-1?i[e+1]:null;const l=n.categoryPercentage;null===a&&(a=o-(null===s?t.end-t.start:s-o)),null===s&&(s=o+o-a);const c=o-(o-Math.min(a,s))/2*l;return{chunk:Math.abs(s-a)/2*l/r,ratio:n.barPercentage,start:c}}(e,t,i,r):function(e,t,n,r){const i=n.barThickness;let o,a;return u(i)?(o=t.min*n.categoryPercentage,a=n.barPercentage):(o=i*r,a=1),{chunk:o/r,ratio:a,start:t.pixels[e]-o/2}}(e,t,i,r),d=n._getStackIndex(n.index,n._cachedMeta.stack,o?e:void 0);s=c.start+c.chunk*d+c.chunk/2,l=Math.min(a,c.chunk*c.ratio)}else s=r.getPixelForValue(n.getParsed(e)[r.axis],e),l=Math.min(a,t.min*t.ratio);return{base:s-l/2,head:s+l/2,center:s,size:l}}draw(){const e=this,t=e._cachedMeta,n=t.vScale,r=t.data,i=r.length;let o=0;for(;o<i;++o)null!==e.getParsed(o)[n.axis]&&r[o].draw(e._ctx)}}En.id="bar",En.defaults={datasetElementType:!1,dataElementType:"bar",categoryPercentage:.8,barPercentage:.9,grouped:!0,animations:{numbers:{type:"number",properties:["x","y","base","width","height"]}}},En.overrides={interaction:{mode:"index"},scales:{_index_:{type:"category",offset:!0,grid:{offset:!0}},_value_:{type:"linear",beginAtZero:!0}}};class Mn extends xn{initialize(){this.enableOptionSharing=!0,super.initialize()}parseObjectData(e,t,n,r){const{xScale:i,yScale:o}=e,{xAxisKey:a="x",yAxisKey:s="y"}=this._parsing,l=[];let c,u,d;for(c=n,u=n+r;c<u;++c)d=t[c],l.push({x:i.parse(C(d,a),c),y:o.parse(C(d,s),c),_custom:d&&d.r&&+d.r});return l}getMaxOverflow(){const{data:e,_parsed:t}=this._cachedMeta;let n=0;for(let r=e.length-1;r>=0;--r)n=Math.max(n,e[r].size()/2,t[r]._custom);return n>0&&n}getLabelAndValue(e){const t=this._cachedMeta,{xScale:n,yScale:r}=t,i=this.getParsed(e),o=n.getLabelForValue(i.x),a=r.getLabelForValue(i.y),s=i._custom;return{label:t.label,value:"("+o+", "+a+(s?", "+s:"")+")"}}update(e){const t=this._cachedMeta.data;this.updateElements(t,0,t.length,e)}updateElements(e,t,n,r){const i=this,o="reset"===r,{iScale:a,vScale:s}=i._cachedMeta,l=i.resolveDataElementOptions(t,r),c=i.getSharedOptions(l),u=i.includeOptions(r,c),d=a.axis,f=s.axis;for(let l=t;l<t+n;l++){const t=e[l],n=!o&&i.getParsed(l),c={},h=c[d]=o?a.getPixelForDecimal(.5):a.getPixelForValue(n[d]),p=c[f]=o?s.getBasePixel():s.getPixelForValue(n[f]);c.skip=isNaN(h)||isNaN(p),u&&(c.options=i.resolveDataElementOptions(l,t.active?"active":r),o&&(c.options.radius=0)),i.updateElement(t,l,c,r)}i.updateSharedOptions(c,r,l)}resolveDataElementOptions(e,t){const n=this.getParsed(e);let r=super.resolveDataElementOptions(e,t);r.$shared&&(r=Object.assign({},r,{$shared:!1}));const i=r.radius;return"active"!==t&&(r.radius=0),r.radius+=g(n&&n._custom,i),r}}Mn.id="bubble",Mn.defaults={datasetElementType:!1,dataElementType:"point",animations:{numbers:{type:"number",properties:["x","y","borderWidth","radius"]}}},Mn.overrides={scales:{x:{type:"linear"},y:{type:"linear"}},plugins:{tooltip:{callbacks:{title:()=>""}}}};class Cn extends xn{constructor(e,t){super(e,t),this.enableOptionSharing=!0,this.innerRadius=void 0,this.outerRadius=void 0,this.offsetX=void 0,this.offsetY=void 0}linkScales(){}parse(e,t){const n=this.getDataset().data,r=this._cachedMeta;let i,o;for(i=e,o=e+t;i<o;++i)r._parsed[i]=+n[i]}_getRotation(){return $(this.options.rotation-90)}_getCircumference(){return $(this.options.circumference)}_getRotationExtents(){let e=L,t=-L;const n=this;for(let r=0;r<n.chart.data.datasets.length;++r)if(n.chart.isDatasetVisible(r)){const i=n.chart.getDatasetMeta(r).controller,o=i._getRotation(),a=i._getCircumference();e=Math.min(e,o),t=Math.max(t,o+a)}return{rotation:e,circumference:t-e}}update(e){const t=this,n=t.chart,{chartArea:r}=n,i=t._cachedMeta,o=i.data,a=t.getMaxBorderWidth()+t.getMaxOffset(o)+t.options.spacing,s=Math.max((Math.min(r.width,r.height)-a)/2,0),l=Math.min((u=s,"string"==typeof(c=t.options.cutout)&&c.endsWith("%")?parseFloat(c)/100:c/u),1);var c,u;const d=t._getRingWeight(t.index),{circumference:f,rotation:h}=t._getRotationExtents(),{ratioX:p,ratioY:g,offsetX:v,offsetY:b}=function(e,t,n){let r=1,i=1,o=0,a=0;if(t<L){const s=e,l=s+t,c=Math.cos(s),u=Math.sin(s),d=Math.cos(l),f=Math.sin(l),h=(e,t,r)=>Z(e,s,l,!0)?1:Math.max(t,t*n,r,r*n),p=(e,t,r)=>Z(e,s,l,!0)?-1:Math.min(t,t*n,r,r*n),g=h(0,c,d),m=h(N,u,f),v=p(D,c,d),b=p(D+N,u,f);r=(g-v)/2,i=(m-b)/2,o=-(g+v)/2,a=-(m+b)/2}return{ratioX:r,ratioY:i,offsetX:o,offsetY:a}}(h,f,l),y=(r.width-a)/p,x=(r.height-a)/g,_=Math.max(Math.min(y,x)/2,0),w=m(t.options.radius,_),k=(w-Math.max(w*l,0))/t._getVisibleDatasetWeightTotal();t.offsetX=v*w,t.offsetY=b*w,i.total=t.calculateTotal(),t.outerRadius=w-k*t._getRingWeightOffset(t.index),t.innerRadius=Math.max(t.outerRadius-k*d,0),t.updateElements(o,0,o.length,e)}_circumference(e,t){const n=this,r=n.options,i=n._cachedMeta,o=n._getCircumference();return t&&r.animation.animateRotate||!this.chart.getDataVisibility(e)||null===i._parsed[e]?0:n.calculateCircumference(i._parsed[e]*o/L)}updateElements(e,t,n,r){const i=this,o="reset"===r,a=i.chart,s=a.chartArea,l=a.options.animation,c=(s.left+s.right)/2,u=(s.top+s.bottom)/2,d=o&&l.animateScale,f=d?0:i.innerRadius,h=d?0:i.outerRadius,p=i.resolveDataElementOptions(t,r),g=i.getSharedOptions(p),m=i.includeOptions(r,g);let v,b=i._getRotation();for(v=0;v<t;++v)b+=i._circumference(v,o);for(v=t;v<t+n;++v){const t=i._circumference(v,o),n=e[v],a={x:c+i.offsetX,y:u+i.offsetY,startAngle:b,endAngle:b+t,circumference:t,outerRadius:h,innerRadius:f};m&&(a.options=g||i.resolveDataElementOptions(v,n.active?"active":r)),b+=t,i.updateElement(n,v,a,r)}i.updateSharedOptions(g,r,p)}calculateTotal(){const e=this._cachedMeta,t=e.data;let n,r=0;for(n=0;n<t.length;n++){const t=e._parsed[n];null!==t&&!isNaN(t)&&this.chart.getDataVisibility(n)&&(r+=Math.abs(t))}return r}calculateCircumference(e){const t=this._cachedMeta.total;return t>0&&!isNaN(e)?L*(Math.abs(e)/t):0}getLabelAndValue(e){const t=this._cachedMeta,n=this.chart,r=n.data.labels||[],i=qt(t._parsed[e],n.options.locale);return{label:r[e]||"",value:i}}getMaxBorderWidth(e){const t=this;let n=0;const r=t.chart;let i,o,a,s,l;if(!e)for(i=0,o=r.data.datasets.length;i<o;++i)if(r.isDatasetVisible(i)){a=r.getDatasetMeta(i),e=a.data,s=a.controller,s!==t&&s.configure();break}if(!e)return 0;for(i=0,o=e.length;i<o;++i)l=s.resolveDataElementOptions(i),"inner"!==l.borderAlign&&(n=Math.max(n,l.borderWidth||0,l.hoverBorderWidth||0));return n}getMaxOffset(e){let t=0;for(let n=0,r=e.length;n<r;++n){const e=this.resolveDataElementOptions(n);t=Math.max(t,e.offset||0,e.hoverOffset||0)}return t}_getRingWeightOffset(e){let t=0;for(let n=0;n<e;++n)this.chart.isDatasetVisible(n)&&(t+=this._getRingWeight(n));return t}_getRingWeight(e){return Math.max(g(this.chart.data.datasets[e].weight,1),0)}_getVisibleDatasetWeightTotal(){return this._getRingWeightOffset(this.chart.data.datasets.length)||1}}Cn.id="doughnut",Cn.defaults={datasetElementType:!1,dataElementType:"arc",animation:{animateRotate:!0,animateScale:!1},animations:{numbers:{type:"number",properties:["circumference","endAngle","innerRadius","outerRadius","startAngle","x","y","offset","borderWidth","spacing"]}},cutout:"50%",rotation:0,circumference:360,radius:"100%",spacing:0,indexAxis:"r"},Cn.descriptors={_scriptable:e=>"spacing"!==e,_indexable:e=>"spacing"!==e},Cn.overrides={aspectRatio:1,plugins:{legend:{labels:{generateLabels(e){const t=e.data;if(t.labels.length&&t.datasets.length){const{labels:{pointStyle:n}}=e.legend.options;return t.labels.map(((t,r)=>{const i=e.getDatasetMeta(0).controller.getStyle(r);return{text:t,fillStyle:i.backgroundColor,strokeStyle:i.borderColor,lineWidth:i.borderWidth,pointStyle:n,hidden:!e.getDataVisibility(r),index:r}}))}return[]}},onClick(e,t,n){n.chart.toggleDataVisibility(t.index),n.chart.update()}},tooltip:{callbacks:{title:()=>"",label(e){let t=e.label;const n=": "+e.formattedValue;return d(t)?(t=t.slice(),t[0]+=n):t+=n,t}}}}};class Pn extends xn{initialize(){this.enableOptionSharing=!0,super.initialize()}update(e){const t=this,n=t._cachedMeta,{dataset:r,data:i=[],_dataset:o}=n,a=t.chart._animationsDisabled;let{start:s,count:l}=function(e,t,n){const r=t.length;let i=0,o=r;if(e._sorted){const{iScale:a,_parsed:s}=e,l=a.axis,{min:c,max:u,minDefined:d,maxDefined:f}=a.getUserBounds();d&&(i=G(Math.min(ct(s,a.axis,c).lo,n?r:ct(t,l,a.getPixelForValue(c)).lo),0,r-1)),o=f?G(Math.max(ct(s,a.axis,u).hi+1,n?0:ct(t,l,a.getPixelForValue(u)).hi+1),i,r)-i:r-i}return{start:i,count:o}}(n,i,a);t._drawStart=s,t._drawCount=l,function(e){const{xScale:t,yScale:n,_scaleRanges:r}=e,i={xmin:t.min,xmax:t.max,ymin:n.min,ymax:n.max};if(!r)return e._scaleRanges=i,!0;const o=r.xmin!==t.min||r.xmax!==t.max||r.ymin!==n.min||r.ymax!==n.max;return Object.assign(r,i),o}(n)&&(s=0,l=i.length),r._decimated=!!o._decimated,r.points=i;const c=t.resolveDatasetElementOptions(e);t.options.showLine||(c.borderWidth=0),c.segment=t.options.segment,t.updateElement(r,void 0,{animated:!a,options:c},e),t.updateElements(i,s,l,e)}updateElements(e,t,n,r){const i=this,o="reset"===r,{iScale:a,vScale:s,_stacked:l}=i._cachedMeta,c=i.resolveDataElementOptions(t,r),d=i.getSharedOptions(c),f=i.includeOptions(r,d),h=a.axis,p=s.axis,g=i.options.spanGaps,m=W(g)?g:Number.POSITIVE_INFINITY,v=i.chart._animationsDisabled||o||"none"===r;let b=t>0&&i.getParsed(t-1);for(let c=t;c<t+n;++c){const t=e[c],n=i.getParsed(c),g=v?t:{},y=u(n[p]),x=g[h]=a.getPixelForValue(n[h],c),_=g[p]=o||y?s.getBasePixel():s.getPixelForValue(l?i.applyStack(s,n,l):n[p],c);g.skip=isNaN(x)||isNaN(_)||y,g.stop=c>0&&n[h]-b[h]>m,g.parsed=n,f&&(g.options=d||i.resolveDataElementOptions(c,t.active?"active":r)),v||i.updateElement(t,c,g,r),b=n}i.updateSharedOptions(d,r,c)}getMaxOverflow(){const e=this,t=e._cachedMeta,n=t.dataset,r=n.options&&n.options.borderWidth||0,i=t.data||[];if(!i.length)return r;const o=i[0].size(e.resolveDataElementOptions(0)),a=i[i.length-1].size(e.resolveDataElementOptions(i.length-1));return Math.max(r,o,a)/2}draw(){const e=this._cachedMeta;e.dataset.updateControlPoints(this.chart.chartArea,e.iScale.axis),super.draw()}}Pn.id="line",Pn.defaults={datasetElementType:"line",dataElementType:"point",showLine:!0,spanGaps:!1},Pn.overrides={scales:{_index_:{type:"category"},_value_:{type:"linear"}}};class On extends xn{constructor(e,t){super(e,t),this.innerRadius=void 0,this.outerRadius=void 0}getLabelAndValue(e){const t=this._cachedMeta,n=this.chart,r=n.data.labels||[],i=qt(t._parsed[e].r,n.options.locale);return{label:r[e]||"",value:i}}update(e){const t=this._cachedMeta.data;this._updateRadius(),this.updateElements(t,0,t.length,e)}_updateRadius(){const e=this,t=e.chart,n=t.chartArea,r=t.options,i=Math.min(n.right-n.left,n.bottom-n.top),o=Math.max(i/2,0),a=(o-Math.max(r.cutoutPercentage?o/100*r.cutoutPercentage:1,0))/t.getVisibleDatasetCount();e.outerRadius=o-a*e.index,e.innerRadius=e.outerRadius-a}updateElements(e,t,n,r){const i=this,o="reset"===r,a=i.chart,s=i.getDataset(),l=a.options.animation,c=i._cachedMeta.rScale,u=c.xCenter,d=c.yCenter,f=c.getIndexAngle(0)-.5*D;let h,p=f;const g=360/i.countVisibleElements();for(h=0;h<t;++h)p+=i._computeAngle(h,r,g);for(h=t;h<t+n;h++){const t=e[h];let n=p,m=p+i._computeAngle(h,r,g),v=a.getDataVisibility(h)?c.getDistanceFromCenterForValue(s.data[h]):0;p=m,o&&(l.animateScale&&(v=0),l.animateRotate&&(n=m=f));const b={x:u,y:d,innerRadius:0,outerRadius:v,startAngle:n,endAngle:m,options:i.resolveDataElementOptions(h,t.active?"active":r)};i.updateElement(t,h,b,r)}}countVisibleElements(){const e=this.getDataset(),t=this._cachedMeta;let n=0;return t.data.forEach(((t,r)=>{!isNaN(e.data[r])&&this.chart.getDataVisibility(r)&&n++})),n}_computeAngle(e,t,n){return this.chart.getDataVisibility(e)?$(this.resolveDataElementOptions(e,t).angle||n):0}}On.id="polarArea",On.defaults={dataElementType:"arc",animation:{animateRotate:!0,animateScale:!0},animations:{numbers:{type:"number",properties:["x","y","startAngle","endAngle","innerRadius","outerRadius"]}},indexAxis:"r",startAngle:0},On.overrides={aspectRatio:1,plugins:{legend:{labels:{generateLabels(e){const t=e.data;if(t.labels.length&&t.datasets.length){const{labels:{pointStyle:n}}=e.legend.options;return t.labels.map(((t,r)=>{const i=e.getDatasetMeta(0).controller.getStyle(r);return{text:t,fillStyle:i.backgroundColor,strokeStyle:i.borderColor,lineWidth:i.borderWidth,pointStyle:n,hidden:!e.getDataVisibility(r),index:r}}))}return[]}},onClick(e,t,n){n.chart.toggleDataVisibility(t.index),n.chart.update()}},tooltip:{callbacks:{title:()=>"",label:e=>e.chart.data.labels[e.dataIndex]+": "+e.formattedValue}}},scales:{r:{type:"radialLinear",angleLines:{display:!1},beginAtZero:!0,grid:{circular:!0},pointLabels:{display:!1},startAngle:0}}};class Tn extends Cn{}Tn.id="pie",Tn.defaults={cutout:0,rotation:0,circumference:360,radius:"100%"};class Dn extends xn{getLabelAndValue(e){const t=this._cachedMeta.vScale,n=this.getParsed(e);return{label:t.getLabels()[e],value:""+t.getLabelForValue(n[t.axis])}}update(e){const t=this,n=t._cachedMeta,r=n.dataset,i=n.data||[],o=n.iScale.getLabels();if(r.points=i,"resize"!==e){const n=t.resolveDatasetElementOptions(e);t.options.showLine||(n.borderWidth=0);const a={_loop:!0,_fullLoop:o.length===i.length,options:n};t.updateElement(r,void 0,a,e)}t.updateElements(i,0,i.length,e)}updateElements(e,t,n,r){const i=this,o=i.getDataset(),a=i._cachedMeta.rScale,s="reset"===r;for(let l=t;l<t+n;l++){const t=e[l],n=i.resolveDataElementOptions(l,t.active?"active":r),c=a.getPointPositionForValue(l,o.data[l]),u=s?a.xCenter:c.x,d=s?a.yCenter:c.y,f={x:u,y:d,angle:c.angle,skip:isNaN(u)||isNaN(d),options:n};i.updateElement(t,l,f,r)}}}Dn.id="radar",Dn.defaults={datasetElementType:"line",dataElementType:"point",indexAxis:"r",showLine:!0,elements:{line:{fill:"start"}}},Dn.overrides={aspectRatio:1,scales:{r:{type:"radialLinear"}}};class Ln extends Pn{}Ln.id="scatter",Ln.defaults={showLine:!1,fill:!1},Ln.overrides={interaction:{mode:"point"},plugins:{tooltip:{callbacks:{title:()=>"",label:e=>"("+e.label+", "+e.formattedValue+")"}}},scales:{x:{type:"linear"},y:{type:"linear"}}};var jn=Object.freeze({__proto__:null,BarController:En,BubbleController:Mn,DoughnutController:Cn,LineController:Pn,PolarAreaController:On,PieController:Tn,RadarController:Dn,ScatterController:Ln});function An(){throw new Error("This method is not implemented: Check that a complete date adapter is provided.")}class Rn{constructor(e){this.options=e||{}}formats(){return An()}parse(e,t){return An()}format(e,t){return An()}add(e,t,n){return An()}diff(e,t,n){return An()}startOf(e,t,n){return An()}endOf(e,t){return An()}}Rn.override=function(e){Object.assign(Rn.prototype,e)};var Nn={_date:Rn};function zn(e,t){return"native"in e?{x:e.x,y:e.y}:Ft(e,t)}function Fn(e,t,n,r){const{controller:i,data:o,_sorted:a}=e,s=i._cachedMeta.iScale;if(s&&t===s.axis&&a&&o.length){const e=s._reversePixels?ut:ct;if(!r)return e(o,t,n);if(i._sharedOptions){const r=o[0],i="function"==typeof r.getRange&&r.getRange(t);if(i){const r=e(o,t,n-i),a=e(o,t,n+i);return{lo:r.lo,hi:a.hi}}}}return{lo:0,hi:o.length-1}}function In(e,t,n,r,i){const o=e.getSortedVisibleDatasetMetas(),a=n[t];for(let e=0,n=o.length;e<n;++e){const{index:n,data:s}=o[e],{lo:l,hi:c}=Fn(o[e],t,a,i);for(let e=l;e<=c;++e){const t=s[e];t.skip||r(t,n,e)}}}function Bn(e,t,n,r){const i=[];return $e(t,e.chartArea,e._minPadding)?(In(e,n,t,(function(e,n,o){e.inRange(t.x,t.y,r)&&i.push({element:e,datasetIndex:n,index:o})}),!0),i):i}function Vn(e,t,n,r,i){const o=function(e){const t=-1!==e.indexOf("x"),n=-1!==e.indexOf("y");return function(e,r){const i=t?Math.abs(e.x-r.x):0,o=n?Math.abs(e.y-r.y):0;return Math.sqrt(Math.pow(i,2)+Math.pow(o,2))}}(n);let a=Number.POSITIVE_INFINITY,s=[];return $e(t,e.chartArea,e._minPadding)?(In(e,n,t,(function(n,l,c){if(r&&!n.inRange(t.x,t.y,i))return;const u=n.getCenterPoint(i);if(!$e(u,e.chartArea,e._minPadding))return;const d=o(t,u);d<a?(s=[{element:n,datasetIndex:l,index:c}],a=d):d===a&&s.push({element:n,datasetIndex:l,index:c})})),s):s}function Wn(e,t,n,r){const i=zn(t,e),o=[],a=n.axis,s="x"===a?"inXRange":"inYRange";let l=!1;return function(e,t){const n=e.getSortedVisibleDatasetMetas();let r,i,o;for(let e=0,a=n.length;e<a;++e){({index:r,data:i}=n[e]);for(let e=0,n=i.length;e<n;++e)o=i[e],o.skip||t(o,r,e)}}(e,((e,t,n)=>{e[s](i[a],r)&&o.push({element:e,datasetIndex:t,index:n}),e.inRange(i.x,i.y,r)&&(l=!0)})),n.intersect&&!l?[]:o}var Un={modes:{index(e,t,n,r){const i=zn(t,e),o=n.axis||"x",a=n.intersect?Bn(e,i,o,r):Vn(e,i,o,!1,r),s=[];return a.length?(e.getSortedVisibleDatasetMetas().forEach((e=>{const t=a[0].index,n=e.data[t];n&&!n.skip&&s.push({element:n,datasetIndex:e.index,index:t})})),s):[]},dataset(e,t,n,r){const i=zn(t,e),o=n.axis||"xy";let a=n.intersect?Bn(e,i,o,r):Vn(e,i,o,!1,r);if(a.length>0){const t=a[0].datasetIndex,n=e.getDatasetMeta(t).data;a=[];for(let e=0;e<n.length;++e)a.push({element:n[e],datasetIndex:t,index:e})}return a},point:(e,t,n,r)=>Bn(e,zn(t,e),n.axis||"xy",r),nearest:(e,t,n,r)=>Vn(e,zn(t,e),n.axis||"xy",n.intersect,r),x:(e,t,n,r)=>(n.axis="x",Wn(e,t,n,r)),y:(e,t,n,r)=>(n.axis="y",Wn(e,t,n,r))}};const Hn=["left","top","right","bottom"];function $n(e,t){return e.filter((e=>e.pos===t))}function Yn(e,t){return e.filter((e=>-1===Hn.indexOf(e.pos)&&e.box.axis===t))}function qn(e,t){return e.sort(((e,n)=>{const r=t?n:e,i=t?e:n;return r.weight===i.weight?r.index-i.index:r.weight-i.weight}))}function Qn(e,t,n,r){return Math.max(e[n],t[n])+Math.max(e[r],t[r])}function Xn(e,t){e.top=Math.max(e.top,t.top),e.left=Math.max(e.left,t.left),e.bottom=Math.max(e.bottom,t.bottom),e.right=Math.max(e.right,t.right)}function Kn(e,t,n){const r=n.box,i=e.maxPadding;f(n.pos)||(n.size&&(e[n.pos]-=n.size),n.size=n.horizontal?r.height:r.width,e[n.pos]+=n.size),r.getPadding&&Xn(i,r.getPadding());const o=Math.max(0,t.outerWidth-Qn(i,e,"left","right")),a=Math.max(0,t.outerHeight-Qn(i,e,"top","bottom")),s=o!==e.w,l=a!==e.h;return e.w=o,e.h=a,n.horizontal?{same:s,other:l}:{same:l,other:s}}function Zn(e,t){const n=t.maxPadding;return function(e){const r={left:0,top:0,right:0,bottom:0};return e.forEach((e=>{r[e]=Math.max(t[e],n[e])})),r}(e?["left","right"]:["top","bottom"])}function Gn(e,t,n){const r=[];let i,o,a,s,l,c;for(i=0,o=e.length,l=0;i<o;++i){a=e[i],s=a.box,s.update(a.width||t.w,a.height||t.h,Zn(a.horizontal,t));const{same:o,other:u}=Kn(t,n,a);l|=o&&r.length,c=c||u,s.fullSize||r.push(a)}return l&&Gn(r,t,n)||c}function Jn(e,t,n){const r=n.padding;let i,o,a,s,l=t.x,c=t.y;for(i=0,o=e.length;i<o;++i)a=e[i],s=a.box,a.horizontal?(s.left=s.fullSize?r.left:t.left,s.right=s.fullSize?n.outerWidth-r.right:t.left+t.w,s.top=c,s.bottom=c+s.height,s.width=s.right-s.left,c=s.bottom):(s.left=l,s.right=l+s.width,s.top=s.fullSize?r.top:t.top,s.bottom=s.fullSize?n.outerHeight-r.bottom:t.top+t.h,s.height=s.bottom-s.top,l=s.right);t.x=l,t.y=c}Ie.set("layout",{padding:{top:0,right:0,bottom:0,left:0}});var er={addBox(e,t){e.boxes||(e.boxes=[]),t.fullSize=t.fullSize||!1,t.position=t.position||"top",t.weight=t.weight||0,t._layers=t._layers||function(){return[{z:0,draw(e){t.draw(e)}}]},e.boxes.push(t)},removeBox(e,t){const n=e.boxes?e.boxes.indexOf(t):-1;-1!==n&&e.boxes.splice(n,1)},configure(e,t,n){t.fullSize=n.fullSize,t.position=n.position,t.weight=n.weight},update(e,t,n,r){if(!e)return;const i=ot(e.options.layout.padding),o=Math.max(t-i.width,0),a=Math.max(n-i.height,0),s=function(e){const t=function(e){const t=[];let n,r,i;for(n=0,r=(e||[]).length;n<r;++n)i=e[n],t.push({index:n,box:i,pos:i.position,horizontal:i.isHorizontal(),weight:i.weight});return t}(e),n=qn(t.filter((e=>e.box.fullSize)),!0),r=qn($n(t,"left"),!0),i=qn($n(t,"right")),o=qn($n(t,"top"),!0),a=qn($n(t,"bottom")),s=Yn(t,"x"),l=Yn(t,"y");return{fullSize:n,leftAndTop:r.concat(o),rightAndBottom:i.concat(l).concat(a).concat(s),chartArea:$n(t,"chartArea"),vertical:r.concat(i).concat(l),horizontal:o.concat(a).concat(s)}}(e.boxes),l=s.vertical,c=s.horizontal;b(e.boxes,(e=>{"function"==typeof e.beforeLayout&&e.beforeLayout()}));const u=l.reduce(((e,t)=>t.box.options&&!1===t.box.options.display?e:e+1),0)||1,d=Object.freeze({outerWidth:t,outerHeight:n,padding:i,availableWidth:o,availableHeight:a,vBoxMaxWidth:o/2/u,hBoxMaxHeight:a/2}),f=Object.assign({},i);Xn(f,ot(r));const h=Object.assign({maxPadding:f,w:o,h:a,x:i.left,y:i.top},i);!function(e,t){let n,r,i;for(n=0,r=e.length;n<r;++n)i=e[n],i.horizontal?(i.width=i.box.fullSize&&t.availableWidth,i.height=t.hBoxMaxHeight):(i.width=t.vBoxMaxWidth,i.height=i.box.fullSize&&t.availableHeight)}(l.concat(c),d),Gn(s.fullSize,h,d),Gn(l,h,d),Gn(c,h,d)&&Gn(l,h,d),function(e){const t=e.maxPadding;function n(n){const r=Math.max(t[n]-e[n],0);return e[n]+=r,r}e.y+=n("top"),e.x+=n("left"),n("right"),n("bottom")}(h),Jn(s.leftAndTop,h,d),h.x+=h.w,h.y+=h.h,Jn(s.rightAndBottom,h,d),e.chartArea={left:h.left,top:h.top,right:h.left+h.w,bottom:h.top+h.h,height:h.h,width:h.w},b(s.chartArea,(t=>{const n=t.box;Object.assign(n,e.chartArea),n.update(h.w,h.h)}))}};class tr{acquireContext(e,t){}releaseContext(e){return!1}addEventListener(e,t,n){}removeEventListener(e,t,n){}getDevicePixelRatio(){return 1}getMaximumSize(e,t,n,r){return t=Math.max(0,t||e.width),n=n||e.height,{width:t,height:Math.max(0,r?Math.floor(t/r):n)}}isAttached(e){return!0}}class nr extends tr{acquireContext(e){return e&&e.getContext&&e.getContext("2d")||null}}const rr={touchstart:"mousedown",touchmove:"mousemove",touchend:"mouseup",pointerenter:"mouseenter",pointerdown:"mousedown",pointermove:"mousemove",pointerup:"mouseup",pointerleave:"mouseout",pointerout:"mouseout"},ir=e=>null===e||""===e,or=!!Vt&&{passive:!0};function ar(e,t,n){e.canvas.removeEventListener(t,n,or)}function sr(e,t,n){const r=e.canvas,i=r&&jt(r)||r,o=new MutationObserver((e=>{const t=jt(i);e.forEach((e=>{for(let r=0;r<e.addedNodes.length;r++){const o=e.addedNodes[r];o!==i&&o!==t||n(e.target)}}))}));return o.observe(document,{childList:!0,subtree:!0}),o}function lr(e,t,n){const r=e.canvas,i=r&&jt(r);if(!i)return;const o=new MutationObserver((e=>{e.forEach((e=>{for(let t=0;t<e.removedNodes.length;t++)if(e.removedNodes[t]===r){n();break}}))}));return o.observe(i,{childList:!0}),o}const cr=new Map;let ur=0;function dr(){const e=window.devicePixelRatio;e!==ur&&(ur=e,cr.forEach(((t,n)=>{n.currentDevicePixelRatio!==e&&t()})))}function fr(e,t,n){const r=e.canvas,i=r&&jt(r);if(!i)return;const a=o(((e,t)=>{const r=i.clientWidth;n(e,t),r<i.clientWidth&&n()}),window),s=new ResizeObserver((e=>{const t=e[0],n=t.contentRect.width,r=t.contentRect.height;0===n&&0===r||a(n,r)}));return s.observe(i),function(e,t){cr.size||window.addEventListener("resize",dr),cr.set(e,t)}(e,a),s}function hr(e,t,n){n&&n.disconnect(),"resize"===t&&function(e){cr.delete(e),cr.size||window.removeEventListener("resize",dr)}(e)}function pr(e,t,n){const r=e.canvas,i=o((t=>{null!==e.ctx&&n(function(e,t){const n=rr[e.type]||e.type,{x:r,y:i}=Ft(e,t);return{type:n,chart:t,native:e,x:void 0!==r?r:null,y:void 0!==i?i:null}}(t,e))}),e,(e=>{const t=e[0];return[t,t.offsetX,t.offsetY]}));return function(e,t,n){e.addEventListener(t,n,or)}(r,t,i),i}class gr extends tr{acquireContext(e,t){const n=e&&e.getContext&&e.getContext("2d");return n&&n.canvas===e?(function(e,t){const n=e.style,r=e.getAttribute("height"),i=e.getAttribute("width");if(e.$chartjs={initial:{height:r,width:i,style:{display:n.display,height:n.height,width:n.width}}},n.display=n.display||"block",n.boxSizing=n.boxSizing||"border-box",ir(i)){const t=Wt(e,"width");void 0!==t&&(e.width=t)}if(ir(r))if(""===e.style.height)e.height=e.width/(t||2);else{const t=Wt(e,"height");void 0!==t&&(e.height=t)}}(e,t),n):null}releaseContext(e){const t=e.canvas;if(!t.$chartjs)return!1;const n=t.$chartjs.initial;["height","width"].forEach((e=>{const r=n[e];u(r)?t.removeAttribute(e):t.setAttribute(e,r)}));const r=n.style||{};return Object.keys(r).forEach((e=>{t.style[e]=r[e]})),t.width=t.width,delete t.$chartjs,!0}addEventListener(e,t,n){this.removeEventListener(e,t);const r=e.$proxies||(e.$proxies={}),i={attach:sr,detach:lr,resize:fr}[t]||pr;r[t]=i(e,t,n)}removeEventListener(e,t){const n=e.$proxies||(e.$proxies={}),r=n[t];r&&(({attach:hr,detach:hr,resize:hr}[t]||ar)(e,t,r),n[t]=void 0)}getDevicePixelRatio(){return window.devicePixelRatio}getMaximumSize(e,t,n,r){return function(e,t,n,r){const i=Rt(e),o=zt(i,"margin"),a=At(i.maxWidth,e,"clientWidth")||A,s=At(i.maxHeight,e,"clientHeight")||A,l=function(e,t,n){let r,i;if(void 0===t||void 0===n){const o=jt(e);if(o){const e=o.getBoundingClientRect(),a=Rt(o),s=zt(a,"border","width"),l=zt(a,"padding");t=e.width-l.width-s.width,n=e.height-l.height-s.height,r=At(a.maxWidth,o,"clientWidth"),i=At(a.maxHeight,o,"clientHeight")}else t=e.clientWidth,n=e.clientHeight}return{width:t,height:n,maxWidth:r||A,maxHeight:i||A}}(e,t,n);let{width:c,height:u}=l;if("content-box"===i.boxSizing){const e=zt(i,"border","width"),t=zt(i,"padding");c-=t.width+e.width,u-=t.height+e.height}return c=Math.max(0,c-o.width),u=Math.max(0,r?Math.floor(c/r):u-o.height),c=It(Math.min(c,a,l.maxWidth)),u=It(Math.min(u,s,l.maxHeight)),c&&!u&&(u=It(c/2)),{width:c,height:u}}(e,t,n,r)}isAttached(e){const t=jt(e);return!(!t||!jt(t))}}class mr{constructor(){this.x=void 0,this.y=void 0,this.active=!1,this.options=void 0,this.$animations=void 0}tooltipPosition(e){const{x:t,y:n}=this.getProps(["x","y"],e);return{x:t,y:n}}hasValue(){return W(this.x)&&W(this.y)}getProps(e,t){const n=this,r=this.$animations;if(!t||!r)return n;const i={};return e.forEach((e=>{i[e]=r[e]&&r[e].active()?r[e]._to:n[e]})),i}}mr.defaults={},mr.defaultRoutes=void 0;const vr={values:e=>d(e)?e:""+e,numeric(e,t,n){if(0===e)return"0";const r=this.chart.options.locale;let i,o=e;if(n.length>1){const t=Math.max(Math.abs(n[0].value),Math.abs(n[n.length-1].value));(t<1e-4||t>1e15)&&(i="scientific"),o=function(e,t){let n=t.length>3?t[2].value-t[1].value:t[1].value-t[0].value;return Math.abs(n)>=1&&e!==Math.floor(e)&&(n=e-Math.floor(e)),n}(e,n)}const a=I(Math.abs(o)),s=Math.max(Math.min(-1*Math.floor(a),20),0),l={notation:i,minimumFractionDigits:s,maximumFractionDigits:s};return Object.assign(l,this.options.ticks.format),qt(e,r,l)},logarithmic(e,t,n){if(0===e)return"0";const r=e/Math.pow(10,Math.floor(I(e)));return 1===r||2===r||5===r?vr.numeric.call(this,e,t,n):""}};var br={formatters:vr};function yr(e,t,n,r,i){const o=g(r,0),a=Math.min(g(i,e.length),e.length);let s,l,c,u=0;for(n=Math.ceil(n),i&&(s=i-r,n=s/Math.floor(s/n)),c=o;c<0;)u++,c=Math.round(o+u*n);for(l=Math.max(o,0);l<a;l++)l===c&&(t.push(e[l]),u++,c=Math.round(o+u*n))}Ie.set("scale",{display:!0,offset:!1,reverse:!1,beginAtZero:!1,bounds:"ticks",grace:0,grid:{display:!0,lineWidth:1,drawBorder:!0,drawOnChartArea:!0,drawTicks:!0,tickLength:8,tickWidth:(e,t)=>t.lineWidth,tickColor:(e,t)=>t.color,offset:!1,borderDash:[],borderDashOffset:0,borderWidth:1},title:{display:!1,text:"",padding:{top:4,bottom:4}},ticks:{minRotation:0,maxRotation:50,mirror:!1,textStrokeWidth:0,textStrokeColor:"",padding:3,display:!0,autoSkip:!0,autoSkipPadding:3,labelOffset:0,callback:br.formatters.values,minor:{},major:{},align:"center",crossAlign:"near",showLabelBackdrop:!1,backdropColor:"rgba(255, 255, 255, 0.75)",backdropPadding:2}}),Ie.route("scale.ticks","color","","color"),Ie.route("scale.grid","color","","borderColor"),Ie.route("scale.grid","borderColor","","borderColor"),Ie.route("scale.title","color","","color"),Ie.describe("scale",{_fallback:!1,_scriptable:e=>!e.startsWith("before")&&!e.startsWith("after")&&"callback"!==e&&"parser"!==e,_indexable:e=>"borderDash"!==e&&"tickBorderDash"!==e}),Ie.describe("scales",{_fallback:"scale"}),Ie.describe("scale.ticks",{_scriptable:e=>"backdropPadding"!==e&&"callback"!==e,_indexable:e=>"backdropPadding"!==e});const xr=(e,t,n)=>"top"===t||"left"===t?e[t]+n:e[t]-n;function _r(e,t){const n=[],r=e.length/t,i=e.length;let o=0;for(;o<i;o+=r)n.push(e[Math.floor(o)]);return n}function wr(e,t,n){const r=e.ticks.length,i=Math.min(t,r-1),o=e._startPixel,a=e._endPixel,s=1e-6;let l,c=e.getPixelForTick(i);if(!(n&&(l=1===r?Math.max(c-o,a-c):0===t?(e.getPixelForTick(1)-c)/2:(c-e.getPixelForTick(i-1))/2,c+=i<t?l:-l,c<o-s||c>a+s)))return c}function kr(e){return e.drawTicks?e.tickLength:0}function Sr(e,t){if(!e.display)return 0;const n=at(e.font,t),r=ot(e.padding);return(d(e.text)?e.text.length:1)*n.lineHeight+r.height}function Er(e,t,n){let r=a(e);return(n&&"right"!==t||!n&&"right"===t)&&(r=(e=>"left"===e?"right":"right"===e?"left":e)(r)),r}class Mr extends mr{constructor(e){super(),this.id=e.id,this.type=e.type,this.options=void 0,this.ctx=e.ctx,this.chart=e.chart,this.top=void 0,this.bottom=void 0,this.left=void 0,this.right=void 0,this.width=void 0,this.height=void 0,this._margins={left:0,right:0,top:0,bottom:0},this.maxWidth=void 0,this.maxHeight=void 0,this.paddingTop=void 0,this.paddingBottom=void 0,this.paddingLeft=void 0,this.paddingRight=void 0,this.axis=void 0,this.labelRotation=void 0,this.min=void 0,this.max=void 0,this._range=void 0,this.ticks=[],this._gridLineItems=null,this._labelItems=null,this._labelSizes=null,this._length=0,this._maxLength=0,this._longestTextCache={},this._startPixel=void 0,this._endPixel=void 0,this._reversePixels=!1,this._userMax=void 0,this._userMin=void 0,this._suggestedMax=void 0,this._suggestedMin=void 0,this._ticksLength=0,this._borderValue=0,this._cache={},this._dataLimitsCached=!1,this.$context=void 0}init(e){const t=this;t.options=e.setContext(t.getContext()),t.axis=e.axis,t._userMin=t.parse(e.min),t._userMax=t.parse(e.max),t._suggestedMin=t.parse(e.suggestedMin),t._suggestedMax=t.parse(e.suggestedMax)}parse(e,t){return e}getUserBounds(){let{_userMin:e,_userMax:t,_suggestedMin:n,_suggestedMax:r}=this;return e=p(e,Number.POSITIVE_INFINITY),t=p(t,Number.NEGATIVE_INFINITY),n=p(n,Number.POSITIVE_INFINITY),r=p(r,Number.NEGATIVE_INFINITY),{min:p(e,n),max:p(t,r),minDefined:h(e),maxDefined:h(t)}}getMinMax(e){const t=this;let n,{min:r,max:i,minDefined:o,maxDefined:a}=t.getUserBounds();if(o&&a)return{min:r,max:i};const s=t.getMatchingVisibleMetas();for(let l=0,c=s.length;l<c;++l)n=s[l].controller.getMinMax(t,e),o||(r=Math.min(r,n.min)),a||(i=Math.max(i,n.max));return{min:p(r,p(i,r)),max:p(i,p(r,i))}}getPadding(){const e=this;return{left:e.paddingLeft||0,top:e.paddingTop||0,right:e.paddingRight||0,bottom:e.paddingBottom||0}}getTicks(){return this.ticks}getLabels(){const e=this.chart.data;return this.options.labels||(this.isHorizontal()?e.xLabels:e.yLabels)||e.labels||[]}beforeLayout(){this._cache={},this._dataLimitsCached=!1}beforeUpdate(){v(this.options.beforeUpdate,[this])}update(e,t,n){const r=this,i=r.options.ticks,o=i.sampleSize;r.beforeUpdate(),r.maxWidth=e,r.maxHeight=t,r._margins=n=Object.assign({left:0,right:0,top:0,bottom:0},n),r.ticks=null,r._labelSizes=null,r._gridLineItems=null,r._labelItems=null,r.beforeSetDimensions(),r.setDimensions(),r.afterSetDimensions(),r._maxLength=r.isHorizontal()?r.width+n.left+n.right:r.height+n.top+n.bottom,r._dataLimitsCached||(r.beforeDataLimits(),r.determineDataLimits(),r.afterDataLimits(),r._range=function(e,t){const{min:n,max:r}=e;return{min:n-Math.abs(m(t,n)),max:r+m(t,r)}}(r,r.options.grace),r._dataLimitsCached=!0),r.beforeBuildTicks(),r.ticks=r.buildTicks()||[],r.afterBuildTicks();const a=o<r.ticks.length;r._convertTicksToLabels(a?_r(r.ticks,o):r.ticks),r.configure(),r.beforeCalculateLabelRotation(),r.calculateLabelRotation(),r.afterCalculateLabelRotation(),i.display&&(i.autoSkip||"auto"===i.source)&&(r.ticks=function(e,t){const n=e.options.ticks,r=n.maxTicksLimit||function(e){const t=e.options.offset,n=e._tickSize(),r=e._length/n+(t?0:1),i=e._maxLength/n;return Math.floor(Math.min(r,i))}(e),i=n.major.enabled?function(e){const t=[];let n,r;for(n=0,r=e.length;n<r;n++)e[n].major&&t.push(n);return t}(t):[],o=i.length,a=i[0],s=i[o-1],l=[];if(o>r)return function(e,t,n,r){let i,o=0,a=n[0];for(r=Math.ceil(r),i=0;i<e.length;i++)i===a&&(t.push(e[i]),o++,a=n[o*r])}(t,l,i,o/r),l;const c=function(e,t,n){const r=function(e){const t=e.length;let n,r;if(t<2)return!1;for(r=e[0],n=1;n<t;++n)if(e[n]-e[n-1]!==r)return!1;return r}(e),i=t.length/n;if(!r)return Math.max(i,1);const o=function(e){const t=[],n=Math.sqrt(e);let r;for(r=1;r<n;r++)e%r==0&&(t.push(r),t.push(e/r));return n===(0|n)&&t.push(n),t.sort(((e,t)=>e-t)).pop(),t}(r);for(let e=0,t=o.length-1;e<t;e++){const t=o[e];if(t>i)return t}return Math.max(i,1)}(i,t,r);if(o>0){let e,n;const r=o>1?Math.round((s-a)/(o-1)):null;for(yr(t,l,c,u(r)?0:a-r,a),e=0,n=o-1;e<n;e++)yr(t,l,c,i[e],i[e+1]);return yr(t,l,c,s,u(r)?t.length:s+r),l}return yr(t,l,c),l}(r,r.ticks),r._labelSizes=null),a&&r._convertTicksToLabels(r.ticks),r.beforeFit(),r.fit(),r.afterFit(),r.afterUpdate()}configure(){const e=this;let t,n,r=e.options.reverse;e.isHorizontal()?(t=e.left,n=e.right):(t=e.top,n=e.bottom,r=!r),e._startPixel=t,e._endPixel=n,e._reversePixels=r,e._length=n-t,e._alignToPixels=e.options.alignToPixels}afterUpdate(){v(this.options.afterUpdate,[this])}beforeSetDimensions(){v(this.options.beforeSetDimensions,[this])}setDimensions(){const e=this;e.isHorizontal()?(e.width=e.maxWidth,e.left=0,e.right=e.width):(e.height=e.maxHeight,e.top=0,e.bottom=e.height),e.paddingLeft=0,e.paddingTop=0,e.paddingRight=0,e.paddingBottom=0}afterSetDimensions(){v(this.options.afterSetDimensions,[this])}_callHooks(e){const t=this;t.chart.notifyPlugins(e,t.getContext()),v(t.options[e],[t])}beforeDataLimits(){this._callHooks("beforeDataLimits")}determineDataLimits(){}afterDataLimits(){this._callHooks("afterDataLimits")}beforeBuildTicks(){this._callHooks("beforeBuildTicks")}buildTicks(){return[]}afterBuildTicks(){this._callHooks("afterBuildTicks")}beforeTickToLabelConversion(){v(this.options.beforeTickToLabelConversion,[this])}generateTickLabels(e){const t=this,n=t.options.ticks;let r,i,o;for(r=0,i=e.length;r<i;r++)o=e[r],o.label=v(n.callback,[o.value,r,e],t)}afterTickToLabelConversion(){v(this.options.afterTickToLabelConversion,[this])}beforeCalculateLabelRotation(){v(this.options.beforeCalculateLabelRotation,[this])}calculateLabelRotation(){const e=this,t=e.options,n=t.ticks,r=e.ticks.length,i=n.minRotation||0,o=n.maxRotation;let a,s,l,c=i;if(!e._isVisible()||!n.display||i>=o||r<=1||!e.isHorizontal())return void(e.labelRotation=i);const u=e._getLabelSizes(),d=u.widest.width,f=u.highest.height,h=G(e.chart.width-d,0,e.maxWidth);a=t.offset?e.maxWidth/r:h/(r-1),d+6>a&&(a=h/(r-(t.offset?.5:1)),s=e.maxHeight-kr(t.grid)-n.padding-Sr(t.title,e.chart.options.font),l=Math.sqrt(d*d+f*f),c=Y(Math.min(Math.asin(Math.min((u.highest.height+6)/a,1)),Math.asin(Math.min(s/l,1))-Math.asin(f/l))),c=Math.max(i,Math.min(o,c))),e.labelRotation=c}afterCalculateLabelRotation(){v(this.options.afterCalculateLabelRotation,[this])}beforeFit(){v(this.options.beforeFit,[this])}fit(){const e=this,t={width:0,height:0},{chart:n,options:{ticks:r,title:i,grid:o}}=e,a=e._isVisible(),s=e.isHorizontal();if(a){const a=Sr(i,n.options.font);if(s?(t.width=e.maxWidth,t.height=kr(o)+a):(t.height=e.maxHeight,t.width=kr(o)+a),r.display&&e.ticks.length){const{first:n,last:i,widest:o,highest:a}=e._getLabelSizes(),l=2*r.padding,c=$(e.labelRotation),u=Math.cos(c),d=Math.sin(c);if(s){const n=r.mirror?0:d*o.width+u*a.height;t.height=Math.min(e.maxHeight,t.height+n+l)}else{const n=r.mirror?0:u*o.width+d*a.height;t.width=Math.min(e.maxWidth,t.width+n+l)}e._calculatePadding(n,i,d,u)}}e._handleMargins(),s?(e.width=e._length=n.width-e._margins.left-e._margins.right,e.height=t.height):(e.width=t.width,e.height=e._length=n.height-e._margins.top-e._margins.bottom)}_calculatePadding(e,t,n,r){const i=this,{ticks:{align:o,padding:a},position:s}=i.options,l=0!==i.labelRotation,c="top"!==s&&"x"===i.axis;if(i.isHorizontal()){const s=i.getPixelForTick(0)-i.left,u=i.right-i.getPixelForTick(i.ticks.length-1);let d=0,f=0;l?c?(d=r*e.width,f=n*t.height):(d=n*e.height,f=r*t.width):"start"===o?f=t.width:"end"===o?d=e.width:(d=e.width/2,f=t.width/2),i.paddingLeft=Math.max((d-s+a)*i.width/(i.width-s),0),i.paddingRight=Math.max((f-u+a)*i.width/(i.width-u),0)}else{let n=t.height/2,r=e.height/2;"start"===o?(n=0,r=e.height):"end"===o&&(n=t.height,r=0),i.paddingTop=n+a,i.paddingBottom=r+a}}_handleMargins(){const e=this;e._margins&&(e._margins.left=Math.max(e.paddingLeft,e._margins.left),e._margins.top=Math.max(e.paddingTop,e._margins.top),e._margins.right=Math.max(e.paddingRight,e._margins.right),e._margins.bottom=Math.max(e.paddingBottom,e._margins.bottom))}afterFit(){v(this.options.afterFit,[this])}isHorizontal(){const{axis:e,position:t}=this.options;return"top"===t||"bottom"===t||"x"===e}isFullSize(){return this.options.fullSize}_convertTicksToLabels(e){const t=this;let n,r;for(t.beforeTickToLabelConversion(),t.generateTickLabels(e),n=0,r=e.length;n<r;n++)u(e[n].label)&&(e.splice(n,1),r--,n--);t.afterTickToLabelConversion()}_getLabelSizes(){const e=this;let t=e._labelSizes;if(!t){const n=e.options.ticks.sampleSize;let r=e.ticks;n<r.length&&(r=_r(r,n)),e._labelSizes=t=e._computeLabelSizes(r,r.length)}return t}_computeLabelSizes(e,t){const{ctx:n,_longestTextCache:r}=this,i=[],o=[];let a,s,l,c,f,h,p,g,m,v,y,x=0,_=0;for(a=0;a<t;++a){if(c=e[a].label,f=this._resolveTickFontOptions(a),n.font=h=f.string,p=r[h]=r[h]||{data:{},gc:[]},g=f.lineHeight,m=v=0,u(c)||d(c)){if(d(c))for(s=0,l=c.length;s<l;++s)y=c[s],u(y)||d(y)||(m=Be(n,p.data,p.gc,m,y),v+=g)}else m=Be(n,p.data,p.gc,m,c),v=g;i.push(m),o.push(v),x=Math.max(m,x),_=Math.max(v,_)}!function(e,t){b(e,(e=>{const n=e.gc,r=n.length/2;let i;if(r>t){for(i=0;i<r;++i)delete e.data[n[i]];n.splice(0,r)}}))}(r,t);const w=i.indexOf(x),k=o.indexOf(_),S=e=>({width:i[e]||0,height:o[e]||0});return{first:S(0),last:S(t-1),widest:S(w),highest:S(k),widths:i,heights:o}}getLabelForValue(e){return e}getPixelForValue(e,t){return NaN}getValueForPixel(e){}getPixelForTick(e){const t=this.ticks;return e<0||e>t.length-1?null:this.getPixelForValue(t[e].value)}getPixelForDecimal(e){const t=this;t._reversePixels&&(e=1-e);const n=t._startPixel+e*t._length;return G(t._alignToPixels?We(t.chart,n,0):n,-32768,32767)}getDecimalForPixel(e){const t=(e-this._startPixel)/this._length;return this._reversePixels?1-t:t}getBasePixel(){return this.getPixelForValue(this.getBaseValue())}getBaseValue(){const{min:e,max:t}=this;return e<0&&t<0?t:e>0&&t>0?e:0}getContext(e){const t=this,n=t.ticks||[];if(e>=0&&e<n.length){const r=n[e];return r.$context||(r.$context=function(e,t,n){return Object.assign(Object.create(e),{tick:n,index:t,type:"tick"})}(t.getContext(),e,r))}return t.$context||(t.$context=(r=t.chart.getContext(),i=t,Object.assign(Object.create(r),{scale:i,type:"scale"})));var r,i}_tickSize(){const e=this,t=e.options.ticks,n=$(e.labelRotation),r=Math.abs(Math.cos(n)),i=Math.abs(Math.sin(n)),o=e._getLabelSizes(),a=t.autoSkipPadding||0,s=o?o.widest.width+a:0,l=o?o.highest.height+a:0;return e.isHorizontal()?l*r>s*i?s/r:l/i:l*i<s*r?l/r:s/i}_isVisible(){const e=this.options.display;return"auto"!==e?!!e:this.getMatchingVisibleMetas().length>0}_computeGridLineItems(e){const t=this,n=t.axis,r=t.chart,i=t.options,{grid:o,position:a}=i,s=o.offset,l=t.isHorizontal(),c=t.ticks.length+(s?1:0),u=kr(o),d=[],h=o.setContext(t.getContext()),p=h.drawBorder?h.borderWidth:0,m=p/2,v=function(e){return We(r,e,p)};let b,y,x,_,w,k,S,E,M,C,P,O;if("top"===a)b=v(t.bottom),k=t.bottom-u,E=b-m,C=v(e.top)+m,O=e.bottom;else if("bottom"===a)b=v(t.top),C=e.top,O=v(e.bottom)-m,k=b+m,E=t.top+u;else if("left"===a)b=v(t.right),w=t.right-u,S=b-m,M=v(e.left)+m,P=e.right;else if("right"===a)b=v(t.left),M=e.left,P=v(e.right)-m,w=b+m,S=t.left+u;else if("x"===n){if("center"===a)b=v((e.top+e.bottom)/2+.5);else if(f(a)){const e=Object.keys(a)[0],n=a[e];b=v(t.chart.scales[e].getPixelForValue(n))}C=e.top,O=e.bottom,k=b+m,E=k+u}else if("y"===n){if("center"===a)b=v((e.left+e.right)/2);else if(f(a)){const e=Object.keys(a)[0],n=a[e];b=v(t.chart.scales[e].getPixelForValue(n))}w=b-m,S=w-u,M=e.left,P=e.right}const T=g(i.ticks.maxTicksLimit,c),D=Math.max(1,Math.ceil(c/T));for(y=0;y<c;y+=D){const e=o.setContext(t.getContext(y)),n=e.lineWidth,i=e.color,a=o.borderDash||[],c=e.borderDashOffset,u=e.tickWidth,f=e.tickColor,h=e.tickBorderDash||[],p=e.tickBorderDashOffset;x=wr(t,y,s),void 0!==x&&(_=We(r,x,n),l?w=S=M=P=_:k=E=C=O=_,d.push({tx1:w,ty1:k,tx2:S,ty2:E,x1:M,y1:C,x2:P,y2:O,width:n,color:i,borderDash:a,borderDashOffset:c,tickWidth:u,tickColor:f,tickBorderDash:h,tickBorderDashOffset:p}))}return t._ticksLength=c,t._borderValue=b,d}_computeLabelItems(e){const t=this,n=t.axis,r=t.options,{position:i,ticks:o}=r,a=t.isHorizontal(),s=t.ticks,{align:l,crossAlign:c,padding:u,mirror:h}=o,p=kr(r.grid),g=p+u,m=h?-u:g,v=-$(t.labelRotation),b=[];let y,x,_,w,k,S,E,M,C,P,O,T,D="middle";if("top"===i)S=t.bottom-m,E=t._getXAxisLabelAlignment();else if("bottom"===i)S=t.top+m,E=t._getXAxisLabelAlignment();else if("left"===i){const e=t._getYAxisLabelAlignment(p);E=e.textAlign,k=e.x}else if("right"===i){const e=t._getYAxisLabelAlignment(p);E=e.textAlign,k=e.x}else if("x"===n){if("center"===i)S=(e.top+e.bottom)/2+g;else if(f(i)){const e=Object.keys(i)[0],n=i[e];S=t.chart.scales[e].getPixelForValue(n)+g}E=t._getXAxisLabelAlignment()}else if("y"===n){if("center"===i)k=(e.left+e.right)/2-g;else if(f(i)){const e=Object.keys(i)[0],n=i[e];k=t.chart.scales[e].getPixelForValue(n)}E=t._getYAxisLabelAlignment(p).textAlign}"y"===n&&("start"===l?D="top":"end"===l&&(D="bottom"));const L=t._getLabelSizes();for(y=0,x=s.length;y<x;++y){_=s[y],w=_.label;const e=o.setContext(t.getContext(y));M=t.getPixelForTick(y)+o.labelOffset,C=t._resolveTickFontOptions(y),P=C.lineHeight,O=d(w)?w.length:1;const n=O/2,r=e.color,l=e.textStrokeColor,u=e.textStrokeWidth;let f;if(a?(k=M,T="top"===i?"near"===c||0!==v?-O*P+P/2:"center"===c?-L.highest.height/2-n*P+P:-L.highest.height+P/2:"near"===c||0!==v?P/2:"center"===c?L.highest.height/2-n*P:L.highest.height-O*P,h&&(T*=-1)):(S=M,T=(1-O)*P/2),e.showLabelBackdrop){const t=ot(e.backdropPadding),n=L.heights[y],r=L.widths[y];let i=S+T-t.top,o=k-t.left;switch(D){case"middle":i-=n/2;break;case"bottom":i-=n}switch(E){case"center":o-=r/2;break;case"right":o-=r}f={left:o,top:i,width:r+t.width,height:n+t.height,color:e.backdropColor}}b.push({rotation:v,label:w,font:C,color:r,strokeColor:l,strokeWidth:u,textOffset:T,textAlign:E,textBaseline:D,translation:[k,S],backdrop:f})}return b}_getXAxisLabelAlignment(){const{position:e,ticks:t}=this.options;if(-$(this.labelRotation))return"top"===e?"left":"right";let n="center";return"start"===t.align?n="left":"end"===t.align&&(n="right"),n}_getYAxisLabelAlignment(e){const t=this,{position:n,ticks:{crossAlign:r,mirror:i,padding:o}}=t.options,a=e+o,s=t._getLabelSizes().widest.width;let l,c;return"left"===n?i?(l="left",c=t.right+o):(c=t.right-a,"near"===r?l="right":"center"===r?(l="center",c-=s/2):(l="left",c=t.left)):"right"===n?i?(l="right",c=t.left+o):(c=t.left+a,"near"===r?l="left":"center"===r?(l="center",c+=s/2):(l="right",c=t.right)):l="right",{textAlign:l,x:c}}_computeLabelArea(){const e=this;if(e.options.ticks.mirror)return;const t=e.chart,n=e.options.position;return"left"===n||"right"===n?{top:0,left:e.left,bottom:t.height,right:e.right}:"top"===n||"bottom"===n?{top:e.top,left:0,bottom:e.bottom,right:t.width}:void 0}drawBackground(){const{ctx:e,options:{backgroundColor:t},left:n,top:r,width:i,height:o}=this;t&&(e.save(),e.fillStyle=t,e.fillRect(n,r,i,o),e.restore())}getLineWidthForValue(e){const t=this,n=t.options.grid;if(!t._isVisible()||!n.display)return 0;const r=t.ticks.findIndex((t=>t.value===e));return r>=0?n.setContext(t.getContext(r)).lineWidth:0}drawGrid(e){const t=this,n=t.options.grid,r=t.ctx,i=t._gridLineItems||(t._gridLineItems=t._computeGridLineItems(e));let o,a;const s=(e,t,n)=>{n.width&&n.color&&(r.save(),r.lineWidth=n.width,r.strokeStyle=n.color,r.setLineDash(n.borderDash||[]),r.lineDashOffset=n.borderDashOffset,r.beginPath(),r.moveTo(e.x,e.y),r.lineTo(t.x,t.y),r.stroke(),r.restore())};if(n.display)for(o=0,a=i.length;o<a;++o){const e=i[o];n.drawOnChartArea&&s({x:e.x1,y:e.y1},{x:e.x2,y:e.y2},e),n.drawTicks&&s({x:e.tx1,y:e.ty1},{x:e.tx2,y:e.ty2},{color:e.tickColor,width:e.tickWidth,borderDash:e.tickBorderDash,borderDashOffset:e.tickBorderDashOffset})}}drawBorder(){const e=this,{chart:t,ctx:n,options:{grid:r}}=e,i=r.setContext(e.getContext()),o=r.drawBorder?i.borderWidth:0;if(!o)return;const a=r.setContext(e.getContext(0)).lineWidth,s=e._borderValue;let l,c,u,d;e.isHorizontal()?(l=We(t,e.left,o)-o/2,c=We(t,e.right,a)+a/2,u=d=s):(u=We(t,e.top,o)-o/2,d=We(t,e.bottom,a)+a/2,l=c=s),n.save(),n.lineWidth=i.borderWidth,n.strokeStyle=i.borderColor,n.beginPath(),n.moveTo(l,u),n.lineTo(c,d),n.stroke(),n.restore()}drawLabels(e){const t=this;if(!t.options.ticks.display)return;const n=t.ctx,r=t._computeLabelArea();r&&Ye(n,r);const i=t._labelItems||(t._labelItems=t._computeLabelItems(e));let o,a;for(o=0,a=i.length;o<a;++o){const e=i[o],t=e.font,r=e.label;e.backdrop&&(n.fillStyle=e.backdrop.color,n.fillRect(e.backdrop.left,e.backdrop.top,e.backdrop.width,e.backdrop.height)),Ke(n,r,0,e.textOffset,t,e)}r&&qe(n)}drawTitle(){const{ctx:e,options:{position:t,title:n,reverse:r}}=this;if(!n.display)return;const i=at(n.font),o=ot(n.padding),a=n.align;let l=i.lineHeight/2;"bottom"===t?(l+=o.bottom,d(n.text)&&(l+=i.lineHeight*(n.text.length-1))):l+=o.top;const{titleX:c,titleY:u,maxWidth:f,rotation:h}=function(e,t,n,r){const{top:i,left:o,bottom:a,right:l}=e;let c,u,d,f=0;return e.isHorizontal()?(u=s(r,o,l),d=xr(e,n,t),c=l-o):(u=xr(e,n,t),d=s(r,a,i),f="left"===n?-N:N),{titleX:u,titleY:d,maxWidth:c,rotation:f}}(this,l,t,a);Ke(e,n.text,0,0,i,{color:n.color,maxWidth:f,rotation:h,textAlign:Er(a,t,r),textBaseline:"middle",translation:[c,u]})}draw(e){const t=this;t._isVisible()&&(t.drawBackground(),t.drawGrid(e),t.drawBorder(),t.drawTitle(),t.drawLabels(e))}_layers(){const e=this,t=e.options,n=t.ticks&&t.ticks.z||0,r=t.grid&&t.grid.z||0;return e._isVisible()&&e.draw===Mr.prototype.draw?[{z:r,draw(t){e.drawBackground(),e.drawGrid(t),e.drawTitle()}},{z:r+1,draw(){e.drawBorder()}},{z:n,draw(t){e.drawLabels(t)}}]:[{z:n,draw(t){e.draw(t)}}]}getMatchingVisibleMetas(e){const t=this,n=t.chart.getSortedVisibleDatasetMetas(),r=t.axis+"AxisID",i=[];let o,a;for(o=0,a=n.length;o<a;++o){const a=n[o];a[r]!==t.id||e&&a.type!==e||i.push(a)}return i}_resolveTickFontOptions(e){return at(this.options.ticks.setContext(this.getContext(e)).font)}_maxDigits(){const e=this,t=e._resolveTickFontOptions(0).lineHeight;return(e.isHorizontal()?e.width:e.height)/t}}class Cr{constructor(e,t,n){this.type=e,this.scope=t,this.override=n,this.items=Object.create(null)}isForType(e){return Object.prototype.isPrototypeOf.call(this.type.prototype,e.prototype)}register(e){const t=this,n=Object.getPrototypeOf(e);let r;(function(e){return"id"in e&&"defaults"in e})(n)&&(r=t.register(n));const i=t.items,o=e.id,a=t.scope+"."+o;if(!o)throw new Error("class does not have id: "+e);return o in i||(i[o]=e,function(e,t,n){const r=k(Object.create(null),[n?Ie.get(n):{},Ie.get(t),e.defaults]);Ie.set(t,r),e.defaultRoutes&&function(e,t){Object.keys(t).forEach((n=>{const r=n.split("."),i=r.pop(),o=[e].concat(r).join("."),a=t[n].split("."),s=a.pop(),l=a.join(".");Ie.route(o,i,l,s)}))}(t,e.defaultRoutes),e.descriptors&&Ie.describe(t,e.descriptors)}(e,a,r),t.override&&Ie.override(e.id,e.overrides)),a}get(e){return this.items[e]}unregister(e){const t=this.items,n=e.id,r=this.scope;n in t&&delete t[n],r&&n in Ie[r]&&(delete Ie[r][n],this.override&&delete Re[n])}}var Pr=new class{constructor(){this.controllers=new Cr(xn,"datasets",!0),this.elements=new Cr(mr,"elements"),this.plugins=new Cr(Object,"plugins"),this.scales=new Cr(Mr,"scales"),this._typedRegistries=[this.controllers,this.scales,this.elements]}add(...e){this._each("register",e)}remove(...e){this._each("unregister",e)}addControllers(...e){this._each("register",e,this.controllers)}addElements(...e){this._each("register",e,this.elements)}addPlugins(...e){this._each("register",e,this.plugins)}addScales(...e){this._each("register",e,this.scales)}getController(e){return this._get(e,this.controllers,"controller")}getElement(e){return this._get(e,this.elements,"element")}getPlugin(e){return this._get(e,this.plugins,"plugin")}getScale(e){return this._get(e,this.scales,"scale")}removeControllers(...e){this._each("unregister",e,this.controllers)}removeElements(...e){this._each("unregister",e,this.elements)}removePlugins(...e){this._each("unregister",e,this.plugins)}removeScales(...e){this._each("unregister",e,this.scales)}_each(e,t,n){const r=this;[...t].forEach((t=>{const i=n||r._getRegistryForType(t);n||i.isForType(t)||i===r.plugins&&t.id?r._exec(e,i,t):b(t,(t=>{const i=n||r._getRegistryForType(t);r._exec(e,i,t)}))}))}_exec(e,t,n){const r=P(e);v(n["before"+r],[],n),t[e](n),v(n["after"+r],[],n)}_getRegistryForType(e){for(let t=0;t<this._typedRegistries.length;t++){const n=this._typedRegistries[t];if(n.isForType(e))return n}return this.plugins}_get(e,t,n){const r=t.get(e);if(void 0===r)throw new Error('"'+e+'" is not a registered '+n+".");return r}};class Or{constructor(){this._init=[]}notify(e,t,n,r){const i=this;"beforeInit"===t&&(i._init=i._createDescriptors(e,!0),i._notify(i._init,e,"install"));const o=r?i._descriptors(e).filter(r):i._descriptors(e),a=i._notify(o,e,t,n);return"destroy"===t&&(i._notify(o,e,"stop"),i._notify(i._init,e,"uninstall")),a}_notify(e,t,n,r){r=r||{};for(const i of e){const e=i.plugin;if(!1===v(e[n],[t,r,i.options],e)&&r.cancelable)return!1}return!0}invalidate(){u(this._cache)||(this._oldCache=this._cache,this._cache=void 0)}_descriptors(e){if(this._cache)return this._cache;const t=this._cache=this._createDescriptors(e);return this._notifyStateChanges(e),t}_createDescriptors(e,t){const n=e&&e.config,r=g(n.options&&n.options.plugins,{}),i=function(e){const t=[],n=Object.keys(Pr.plugins.items);for(let e=0;e<n.length;e++)t.push(Pr.getPlugin(n[e]));const r=e.plugins||[];for(let e=0;e<r.length;e++){const n=r[e];-1===t.indexOf(n)&&t.push(n)}return t}(n);return!1!==r||t?function(e,t,n,r){const i=[],o=e.getContext();for(let a=0;a<t.length;a++){const s=t[a],l=Tr(n[s.id],r);null!==l&&i.push({plugin:s,options:Dr(e.config,s,l,o)})}return i}(e,i,r,t):[]}_notifyStateChanges(e){const t=this._oldCache||[],n=this._cache,r=(e,t)=>e.filter((e=>!t.some((t=>e.plugin.id===t.plugin.id))));this._notify(r(t,n),e,"stop"),this._notify(r(n,t),e,"start")}}function Tr(e,t){return t||!1!==e?!0===e?{}:e:null}function Dr(e,t,n,r){const i=e.pluginScopeKeys(t),o=e.getOptionScopes(n,i);return e.createResolver(o,r,[""],{scriptable:!1,indexable:!1,allKeys:!0})}function Lr(e,t){const n=Ie.datasets[e]||{};return((t.datasets||{})[e]||{}).indexAxis||t.indexAxis||n.indexAxis||"x"}function jr(e,t){return"x"===e||"y"===e?e:t.axis||("top"===(n=t.position)||"bottom"===n?"x":"left"===n||"right"===n?"y":void 0)||e.charAt(0).toLowerCase();var n}function Ar(e){const t=e.options||(e.options={});t.plugins=g(t.plugins,{}),t.scales=function(e,t){const n=Re[e.type]||{scales:{}},r=t.scales||{},i=Lr(e.type,t),o=Object.create(null),a=Object.create(null);return Object.keys(r).forEach((e=>{const t=r[e],s=jr(e,t),l=function(e,t){return e===t?"_index_":"_value_"}(s,i),c=n.scales||{};o[s]=o[s]||e,a[e]=S(Object.create(null),[{axis:s},t,c[s],c[l]])})),e.data.datasets.forEach((n=>{const i=n.type||e.type,s=n.indexAxis||Lr(i,t),l=(Re[i]||{}).scales||{};Object.keys(l).forEach((e=>{const t=function(e,t){let n=e;return"_index_"===e?n=t:"_value_"===e&&(n="x"===t?"y":"x"),n}(e,s),i=n[t+"AxisID"]||o[t]||t;a[i]=a[i]||Object.create(null),S(a[i],[{axis:t},r[i],l[e]])}))})),Object.keys(a).forEach((e=>{const t=a[e];S(t,[Ie.scales[t.type],Ie.scale])})),a}(e,t)}function Rr(e){return(e=e||{}).datasets=e.datasets||[],e.labels=e.labels||[],e}const Nr=new Map,zr=new Set;function Fr(e,t){let n=Nr.get(e);return n||(n=t(),Nr.set(e,n),zr.add(n)),n}const Ir=(e,t,n)=>{const r=C(t,n);void 0!==r&&e.add(r)};class Br{constructor(e){this._config=function(e){return(e=e||{}).data=Rr(e.data),Ar(e),e}(e),this._scopeCache=new Map,this._resolverCache=new Map}get type(){return this._config.type}set type(e){this._config.type=e}get data(){return this._config.data}set data(e){this._config.data=Rr(e)}get options(){return this._config.options}set options(e){this._config.options=e}get plugins(){return this._config.plugins}update(){const e=this._config;this.clearCache(),Ar(e)}clearCache(){this._scopeCache.clear(),this._resolverCache.clear()}datasetScopeKeys(e){return Fr(e,(()=>[[`datasets.${e}`,""]]))}datasetAnimationScopeKeys(e,t){return Fr(`${e}.transition.${t}`,(()=>[[`datasets.${e}.transitions.${t}`,`transitions.${t}`],[`datasets.${e}`,""]]))}datasetElementScopeKeys(e,t){return Fr(`${e}-${t}`,(()=>[[`datasets.${e}.elements.${t}`,`datasets.${e}`,`elements.${t}`,""]]))}pluginScopeKeys(e){const t=e.id;return Fr(`${this.type}-plugin-${t}`,(()=>[[`plugins.${t}`,...e.additionalOptionScopes||[]]]))}_cachedScopes(e,t){const n=this._scopeCache;let r=n.get(e);return r&&!t||(r=new Map,n.set(e,r)),r}getOptionScopes(e,t,n){const{options:r,type:i}=this,o=this._cachedScopes(e,n),a=o.get(t);if(a)return a;const s=new Set;t.forEach((t=>{e&&(s.add(e),t.forEach((t=>Ir(s,e,t)))),t.forEach((e=>Ir(s,r,e))),t.forEach((e=>Ir(s,Re[i]||{},e))),t.forEach((e=>Ir(s,Ie,e))),t.forEach((e=>Ir(s,Ne,e)))}));const l=Array.from(s);return zr.has(t)&&o.set(t,l),l}chartOptionScopes(){const{options:e,type:t}=this;return[e,Re[t]||{},Ie.datasets[t]||{},{type:t},Ie,Ne]}resolveNamedOptions(e,t,n,r=[""]){const i={$shared:!0},{resolver:o,subPrefixes:a}=Vr(this._resolverCache,e,r);let s=o;(function(e,t){const{isScriptable:n,isIndexable:r}=mt(e);for(const i of t)if(n(i)&&T(e[i])||r(i)&&d(e[i]))return!0;return!1})(o,t)&&(i.$shared=!1,s=gt(o,n=T(n)?n():n,this.createResolver(e,n,a)));for(const e of t)i[e]=s[e];return i}createResolver(e,t,n=[""],r){const{resolver:i}=Vr(this._resolverCache,e,n);return f(t)?gt(i,t,void 0,r):i}}function Vr(e,t,n){let r=e.get(t);r||(r=new Map,e.set(t,r));const i=n.join();let o=r.get(i);return o||(o={resolver:pt(t,n),subPrefixes:n.filter((e=>!e.toLowerCase().includes("hover")))},r.set(i,o)),o}const Wr=["top","bottom","left","right","chartArea"];function Ur(e,t){return"top"===e||"bottom"===e||-1===Wr.indexOf(e)&&"x"===t}function Hr(e,t){return function(n,r){return n[e]===r[e]?n[t]-r[t]:n[e]-r[e]}}function $r(e){const t=e.chart,n=t.options.animation;t.notifyPlugins("afterRender"),v(n&&n.onComplete,[e],t)}function Yr(e){const t=e.chart,n=t.options.animation;v(n&&n.onProgress,[e],t)}function qr(){return"undefined"!=typeof window&&"undefined"!=typeof document}function Qr(e){return qr()&&"string"==typeof e?e=document.getElementById(e):e&&e.length&&(e=e[0]),e&&e.canvas&&(e=e.canvas),e}const Xr={},Kr=e=>{const t=Qr(e);return Object.values(Xr).filter((e=>e.canvas===t)).pop()};class Zr{constructor(e,t){const n=this;this.config=t=new Br(t);const r=Qr(e),i=Kr(r);if(i)throw new Error("Canvas is already in use. Chart with ID '"+i.id+"' must be destroyed before the canvas can be reused.");const o=t.createResolver(t.chartOptionScopes(),n.getContext());this.platform=n._initializePlatform(r,t);const a=n.platform.acquireContext(r,o.aspectRatio),s=a&&a.canvas,l=s&&s.height,u=s&&s.width;this.id=c(),this.ctx=a,this.canvas=s,this.width=u,this.height=l,this._options=o,this._aspectRatio=this.aspectRatio,this._layers=[],this._metasets=[],this._stacks=void 0,this.boxes=[],this.currentDevicePixelRatio=void 0,this.chartArea=void 0,this._active=[],this._lastEvent=void 0,this._listeners={},this._responsiveListeners=void 0,this._sortedMetasets=[],this.scales={},this.scale=void 0,this._plugins=new Or,this.$proxies={},this._hiddenIndices={},this.attached=!1,this._animationsDisabled=void 0,this.$context=void 0,this._doResize=function(e,t){let n;return function(){return t?(clearTimeout(n),n=setTimeout(e,t)):e(),t}}((()=>this.update("resize")),o.resizeDelay||0),Xr[n.id]=n,a&&s?(nn.listen(n,"complete",$r),nn.listen(n,"progress",Yr),n._initialize(),n.attached&&n.update()):console.error("Failed to create chart: can't acquire context from the given item")}get aspectRatio(){const{options:{aspectRatio:e,maintainAspectRatio:t},width:n,height:r,_aspectRatio:i}=this;return u(e)?t&&i?i:r?n/r:null:e}get data(){return this.config.data}set data(e){this.config.data=e}get options(){return this._options}set options(e){this.config.options=e}_initialize(){const e=this;return e.notifyPlugins("beforeInit"),e.options.responsive?e.resize():Bt(e,e.options.devicePixelRatio),e.bindEvents(),e.notifyPlugins("afterInit"),e}_initializePlatform(e,t){return t.platform?new t.platform:!qr()||"undefined"!=typeof OffscreenCanvas&&e instanceof OffscreenCanvas?new nr:new gr}clear(){return Ue(this.canvas,this.ctx),this}stop(){return nn.stop(this),this}resize(e,t){nn.running(this)?this._resizeBeforeDraw={width:e,height:t}:this._resize(e,t)}_resize(e,t){const n=this,r=n.options,i=n.canvas,o=r.maintainAspectRatio&&n.aspectRatio,a=n.platform.getMaximumSize(i,e,t,o),s=r.devicePixelRatio||n.platform.getDevicePixelRatio();n.width=a.width,n.height=a.height,n._aspectRatio=n.aspectRatio,Bt(n,s,!0)&&(n.notifyPlugins("resize",{size:a}),v(r.onResize,[n,a],n),n.attached&&n._doResize()&&n.render())}ensureScalesHaveIDs(){b(this.options.scales||{},((e,t)=>{e.id=t}))}buildOrUpdateScales(){const e=this,t=e.options,n=t.scales,r=e.scales,i=Object.keys(r).reduce(((e,t)=>(e[t]=!1,e)),{});let o=[];n&&(o=o.concat(Object.keys(n).map((e=>{const t=n[e],r=jr(e,t),i="r"===r,o="x"===r;return{options:t,dposition:i?"chartArea":o?"bottom":"left",dtype:i?"radialLinear":o?"category":"linear"}})))),b(o,(n=>{const o=n.options,a=o.id,s=jr(a,o),l=g(o.type,n.dtype);void 0!==o.position&&Ur(o.position,s)===Ur(n.dposition)||(o.position=n.dposition),i[a]=!0;let c=null;a in r&&r[a].type===l?c=r[a]:(c=new(Pr.getScale(l))({id:a,type:l,ctx:e.ctx,chart:e}),r[c.id]=c),c.init(o,t)})),b(i,((e,t)=>{e||delete r[t]})),b(r,(t=>{er.configure(e,t,t.options),er.addBox(e,t)}))}_updateMetasets(){const e=this,t=e._metasets,n=e.data.datasets.length,r=t.length;if(t.sort(((e,t)=>e.index-t.index)),r>n){for(let t=n;t<r;++t)e._destroyDatasetMeta(t);t.splice(n,r-n)}e._sortedMetasets=t.slice(0).sort(Hr("order","index"))}_removeUnreferencedMetasets(){const e=this,{_metasets:t,data:{datasets:n}}=e;t.length>n.length&&delete e._stacks,t.forEach(((t,r)=>{0===n.filter((e=>e===t._dataset)).length&&e._destroyDatasetMeta(r)}))}buildOrUpdateControllers(){const e=this,t=[],n=e.data.datasets;let r,i;for(e._removeUnreferencedMetasets(),r=0,i=n.length;r<i;r++){const i=n[r];let o=e.getDatasetMeta(r);const a=i.type||e.config.type;if(o.type&&o.type!==a&&(e._destroyDatasetMeta(r),o=e.getDatasetMeta(r)),o.type=a,o.indexAxis=i.indexAxis||Lr(a,e.options),o.order=i.order||0,o.index=r,o.label=""+i.label,o.visible=e.isDatasetVisible(r),o.controller)o.controller.updateIndex(r),o.controller.linkScales();else{const n=Pr.getController(a),{datasetElementType:i,dataElementType:s}=Ie.datasets[a];Object.assign(n.prototype,{dataElementType:Pr.getElement(s),datasetElementType:i&&Pr.getElement(i)}),o.controller=new n(e,r),t.push(o.controller)}}return e._updateMetasets(),t}_resetElements(){const e=this;b(e.data.datasets,((t,n)=>{e.getDatasetMeta(n).controller.reset()}),e)}reset(){this._resetElements(),this.notifyPlugins("reset")}update(e){const t=this,n=t.config;n.update(),t._options=n.createResolver(n.chartOptionScopes(),t.getContext()),b(t.scales,(e=>{er.removeBox(t,e)}));const r=t._animationsDisabled=!t.options.animation;if(t.ensureScalesHaveIDs(),t.buildOrUpdateScales(),((e,t)=>{if(e.size!==t.size)return!1;for(const n of e)if(!t.has(n))return!1;return!0})(new Set(Object.keys(t._listeners)),new Set(t.options.events))&&!!this._responsiveListeners===t.options.responsive||(t.unbindEvents(),t.bindEvents()),t._plugins.invalidate(),!1===t.notifyPlugins("beforeUpdate",{mode:e,cancelable:!0}))return;const i=t.buildOrUpdateControllers();t.notifyPlugins("beforeElementsUpdate");let o=0;for(let e=0,n=t.data.datasets.length;e<n;e++){const{controller:n}=t.getDatasetMeta(e),a=!r&&-1===i.indexOf(n);n.buildOrUpdateElements(a),o=Math.max(+n.getMaxOverflow(),o)}t._minPadding=o,t._updateLayout(o),r||b(i,(e=>{e.reset()})),t._updateDatasets(e),t.notifyPlugins("afterUpdate",{mode:e}),t._layers.sort(Hr("z","_idx")),t._lastEvent&&t._eventHandler(t._lastEvent,!0),t.render()}_updateLayout(e){const t=this;if(!1===t.notifyPlugins("beforeLayout",{cancelable:!0}))return;er.update(t,t.width,t.height,e);const n=t.chartArea,r=n.width<=0||n.height<=0;t._layers=[],b(t.boxes,(e=>{r&&"chartArea"===e.position||(e.configure&&e.configure(),t._layers.push(...e._layers()))}),t),t._layers.forEach(((e,t)=>{e._idx=t})),t.notifyPlugins("afterLayout")}_updateDatasets(e){const t=this,n="function"==typeof e;if(!1!==t.notifyPlugins("beforeDatasetsUpdate",{mode:e,cancelable:!0})){for(let r=0,i=t.data.datasets.length;r<i;++r)t._updateDataset(r,n?e({datasetIndex:r}):e);t.notifyPlugins("afterDatasetsUpdate",{mode:e})}}_updateDataset(e,t){const n=this,r=n.getDatasetMeta(e),i={meta:r,index:e,mode:t,cancelable:!0};!1!==n.notifyPlugins("beforeDatasetUpdate",i)&&(r.controller._update(t),i.cancelable=!1,n.notifyPlugins("afterDatasetUpdate",i))}render(){const e=this;!1!==e.notifyPlugins("beforeRender",{cancelable:!0})&&(nn.has(e)?e.attached&&!nn.running(e)&&nn.start(e):(e.draw(),$r({chart:e})))}draw(){const e=this;let t;if(e._resizeBeforeDraw){const{width:t,height:n}=e._resizeBeforeDraw;e._resize(t,n),e._resizeBeforeDraw=null}if(e.clear(),e.width<=0||e.height<=0)return;if(!1===e.notifyPlugins("beforeDraw",{cancelable:!0}))return;const n=e._layers;for(t=0;t<n.length&&n[t].z<=0;++t)n[t].draw(e.chartArea);for(e._drawDatasets();t<n.length;++t)n[t].draw(e.chartArea);e.notifyPlugins("afterDraw")}_getSortedDatasetMetas(e){const t=this._sortedMetasets,n=[];let r,i;for(r=0,i=t.length;r<i;++r){const i=t[r];e&&!i.visible||n.push(i)}return n}getSortedVisibleDatasetMetas(){return this._getSortedDatasetMetas(!0)}_drawDatasets(){const e=this;if(!1===e.notifyPlugins("beforeDatasetsDraw",{cancelable:!0}))return;const t=e.getSortedVisibleDatasetMetas();for(let n=t.length-1;n>=0;--n)e._drawDataset(t[n]);e.notifyPlugins("afterDatasetsDraw")}_drawDataset(e){const t=this,n=t.ctx,r=e._clip,i=!r.disabled,o=t.chartArea,a={meta:e,index:e.index,cancelable:!0};!1!==t.notifyPlugins("beforeDatasetDraw",a)&&(i&&Ye(n,{left:!1===r.left?0:o.left-r.left,right:!1===r.right?t.width:o.right+r.right,top:!1===r.top?0:o.top-r.top,bottom:!1===r.bottom?t.height:o.bottom+r.bottom}),e.controller.draw(),i&&qe(n),a.cancelable=!1,t.notifyPlugins("afterDatasetDraw",a))}getElementsAtEventForMode(e,t,n,r){const i=Un.modes[t];return"function"==typeof i?i(this,e,n,r):[]}getDatasetMeta(e){const t=this.data.datasets[e],n=this._metasets;let r=n.filter((e=>e&&e._dataset===t)).pop();return r||(r={type:null,data:[],dataset:null,controller:null,hidden:null,xAxisID:null,yAxisID:null,order:t&&t.order||0,index:e,_dataset:t,_parsed:[],_sorted:!1},n.push(r)),r}getContext(){return this.$context||(this.$context={chart:this,type:"chart"})}getVisibleDatasetCount(){return this.getSortedVisibleDatasetMetas().length}isDatasetVisible(e){const t=this.data.datasets[e];if(!t)return!1;const n=this.getDatasetMeta(e);return"boolean"==typeof n.hidden?!n.hidden:!t.hidden}setDatasetVisibility(e,t){this.getDatasetMeta(e).hidden=!t}toggleDataVisibility(e){this._hiddenIndices[e]=!this._hiddenIndices[e]}getDataVisibility(e){return!this._hiddenIndices[e]}_updateDatasetVisibility(e,t){const n=this,r=t?"show":"hide",i=n.getDatasetMeta(e),o=i.controller._resolveAnimations(void 0,r);n.setDatasetVisibility(e,t),o.update(i,{visible:t}),n.update((t=>t.datasetIndex===e?r:void 0))}hide(e){this._updateDatasetVisibility(e,!1)}show(e){this._updateDatasetVisibility(e,!0)}_destroyDatasetMeta(e){const t=this,n=t._metasets&&t._metasets[e];n&&n.controller&&(n.controller._destroy(),delete t._metasets[e])}destroy(){const e=this,{canvas:t,ctx:n}=e;let r,i;for(e.stop(),nn.remove(e),r=0,i=e.data.datasets.length;r<i;++r)e._destroyDatasetMeta(r);e.config.clearCache(),t&&(e.unbindEvents(),Ue(t,n),e.platform.releaseContext(n),e.canvas=null,e.ctx=null),e.notifyPlugins("destroy"),delete Xr[e.id]}toBase64Image(...e){return this.canvas.toDataURL(...e)}bindEvents(){this.bindUserEvents(),this.options.responsive?this.bindResponsiveEvents():this.attached=!0}bindUserEvents(){const e=this,t=e._listeners,n=e.platform,r=function(t,n,r){t.offsetX=n,t.offsetY=r,e._eventHandler(t)};b(e.options.events,(i=>((r,i)=>{n.addEventListener(e,r,i),t[r]=i})(i,r)))}bindResponsiveEvents(){const e=this;e._responsiveListeners||(e._responsiveListeners={});const t=e._responsiveListeners,n=e.platform,r=(r,i)=>{n.addEventListener(e,r,i),t[r]=i},i=(r,i)=>{t[r]&&(n.removeEventListener(e,r,i),delete t[r])},o=(t,n)=>{e.canvas&&e.resize(t,n)};let a;const s=()=>{i("attach",s),e.attached=!0,e.resize(),r("resize",o),r("detach",a)};a=()=>{e.attached=!1,i("resize",o),r("attach",s)},n.isAttached(e.canvas)?s():a()}unbindEvents(){const e=this;b(e._listeners,((t,n)=>{e.platform.removeEventListener(e,n,t)})),e._listeners={},b(e._responsiveListeners,((t,n)=>{e.platform.removeEventListener(e,n,t)})),e._responsiveListeners=void 0}updateHoverStyle(e,t,n){const r=n?"set":"remove";let i,o,a,s;for("dataset"===t&&(i=this.getDatasetMeta(e[0].datasetIndex),i.controller["_"+r+"DatasetHoverStyle"]()),a=0,s=e.length;a<s;++a){o=e[a];const t=o&&this.getDatasetMeta(o.datasetIndex).controller;t&&t[r+"HoverStyle"](o.element,o.datasetIndex,o.index)}}getActiveElements(){return this._active||[]}setActiveElements(e){const t=this,n=t._active||[],r=e.map((({datasetIndex:e,index:n})=>{const r=t.getDatasetMeta(e);if(!r)throw new Error("No dataset found at index "+e);return{datasetIndex:e,element:r.data[n],index:n}}));!y(r,n)&&(t._active=r,t._updateHoverStyles(r,n))}notifyPlugins(e,t,n){return this._plugins.notify(this,e,t,n)}_updateHoverStyles(e,t,n){const r=this,i=r.options.hover,o=(e,t)=>e.filter((e=>!t.some((t=>e.datasetIndex===t.datasetIndex&&e.index===t.index)))),a=o(t,e),s=n?e:o(e,t);a.length&&r.updateHoverStyle(a,i.mode,!1),s.length&&i.mode&&r.updateHoverStyle(s,i.mode,!0)}_eventHandler(e,t){const n=this,r={event:e,replay:t,cancelable:!0},i=t=>(t.options.events||this.options.events).includes(e.type);if(!1===n.notifyPlugins("beforeEvent",r,i))return;const o=n._handleEvent(e,t);return r.cancelable=!1,n.notifyPlugins("afterEvent",r,i),(o||r.changed)&&n.render(),n}_handleEvent(e,t){const n=this,{_active:r=[],options:i}=n,o=i.hover,a=t;let s=[],l=!1,c=null;return"mouseout"!==e.type&&(s=n.getElementsAtEventForMode(e,o.mode,o,a),c="click"===e.type?n._lastEvent:e),n._lastEvent=null,$e(e,n.chartArea,n._minPadding)&&(v(i.onHover,[e,s,n],n),"mouseup"!==e.type&&"click"!==e.type&&"contextmenu"!==e.type||v(i.onClick,[e,s,n],n)),l=!y(s,r),(l||t)&&(n._active=s,n._updateHoverStyles(s,r,t)),n._lastEvent=c,l}}const Gr=()=>b(Zr.instances,(e=>e._plugins.invalidate())),Jr=!0;function ei(e,t,n){const{startAngle:r,pixelMargin:i,x:o,y:a,outerRadius:s,innerRadius:l}=t;let c=i/s;e.beginPath(),e.arc(o,a,s,r-c,n+c),l>i?(c=i/l,e.arc(o,a,l,n+c,r-c,!0)):e.arc(o,a,i,n+N,r-N),e.closePath(),e.clip()}function ti(e,t,n,r){return{x:n+e*Math.cos(t),y:r+e*Math.sin(t)}}function ni(e,t,n,r,i){const{x:o,y:a,startAngle:s,pixelMargin:l,innerRadius:c}=t,u=Math.max(t.outerRadius+r+n-l,0),d=c>0?c+r+n+l:0;let f=0;const h=i-s;if(r){const e=((c>0?c-r:0)+(u>0?u-r:0))/2;f=(h-(0!==e?h*e/(e+r):h))/2}const p=(h-Math.max(.001,h*u-n/D)/u)/2,g=s+p+f,m=i-p-f,{outerStart:v,outerEnd:b,innerStart:y,innerEnd:x}=function(e,t,n,r){const i=nt(e.options.borderRadius,["outerStart","outerEnd","innerStart","innerEnd"]),o=(n-t)/2,a=Math.min(o,r*t/2),s=e=>{const t=(n-Math.min(o,e))*r/2;return G(e,0,Math.min(o,t))};return{outerStart:s(i.outerStart),outerEnd:s(i.outerEnd),innerStart:G(i.innerStart,0,a),innerEnd:G(i.innerEnd,0,a)}}(t,d,u,m-g),_=u-v,w=u-b,k=g+v/_,S=m-b/w,E=d+y,M=d+x,C=g+y/E,P=m-x/M;if(e.beginPath(),e.arc(o,a,u,k,S),b>0){const t=ti(w,S,o,a);e.arc(t.x,t.y,b,S,m+N)}const O=ti(M,m,o,a);if(e.lineTo(O.x,O.y),x>0){const t=ti(M,P,o,a);e.arc(t.x,t.y,x,m+N,P+Math.PI)}if(e.arc(o,a,d,m-x/d,g+y/d,!0),y>0){const t=ti(E,C,o,a);e.arc(t.x,t.y,y,C+Math.PI,g-N)}const T=ti(_,g,o,a);if(e.lineTo(T.x,T.y),v>0){const t=ti(_,k,o,a);e.arc(t.x,t.y,v,g-N,k)}e.closePath()}Object.defineProperties(Zr,{defaults:{enumerable:Jr,value:Ie},instances:{enumerable:Jr,value:Xr},overrides:{enumerable:Jr,value:Re},registry:{enumerable:Jr,value:Pr},version:{enumerable:Jr,value:"3.4.1"},getChart:{enumerable:Jr,value:Kr},register:{enumerable:Jr,value:(...e)=>{Pr.add(...e),Gr()}},unregister:{enumerable:Jr,value:(...e)=>{Pr.remove(...e),Gr()}}});class ri extends mr{constructor(e){super(),this.options=void 0,this.circumference=void 0,this.startAngle=void 0,this.endAngle=void 0,this.innerRadius=void 0,this.outerRadius=void 0,this.pixelMargin=0,this.fullCircles=0,e&&Object.assign(this,e)}inRange(e,t,n){const r=this.getProps(["x","y"],n),{angle:i,distance:o}=function(e,t){const n=t.x-e.x,r=t.y-e.y,i=Math.sqrt(n*n+r*r);let o=Math.atan2(r,n);return o<-.5*D&&(o+=L),{angle:o,distance:i}}(r,{x:e,y:t}),{startAngle:a,endAngle:s,innerRadius:l,outerRadius:c,circumference:u}=this.getProps(["startAngle","endAngle","innerRadius","outerRadius","circumference"],n),d=this.options.spacing/2;return(u>=L||Z(i,a,s))&&o>=l+d&&o<=c+d}getCenterPoint(e){const{x:t,y:n,startAngle:r,endAngle:i,innerRadius:o,outerRadius:a}=this.getProps(["x","y","startAngle","endAngle","innerRadius","outerRadius","circumference"],e),{offset:s,spacing:l}=this.options,c=(r+i)/2,u=(o+a+l+s)/2;return{x:t+Math.cos(c)*u,y:n+Math.sin(c)*u}}tooltipPosition(e){return this.getCenterPoint(e)}draw(e){const t=this,{options:n,circumference:r}=t,i=(n.offset||0)/2,o=(n.spacing||0)/2;if(t.pixelMargin="inner"===n.borderAlign?.33:0,t.fullCircles=r>L?Math.floor(r/L):0,0===r||t.innerRadius<0||t.outerRadius<0)return;e.save();let a=0;if(i){a=i/2;const n=(t.startAngle+t.endAngle)/2;e.translate(Math.cos(n)*a,Math.sin(n)*a),t.circumference>=D&&(a=i)}e.fillStyle=n.backgroundColor,e.strokeStyle=n.borderColor;const s=function(e,t,n,r){const{fullCircles:i,startAngle:o,circumference:a}=t;let s=t.endAngle;if(i){ni(e,t,n,r,o+L);for(let t=0;t<i;++t)e.fill();isNaN(a)||(s=o+a%L,a%L==0&&(s+=L))}return ni(e,t,n,r,s),e.fill(),s}(e,t,a,o);(function(e,t,n,r,i){const{options:o}=t,a="inner"===o.borderAlign;o.borderWidth&&(a?(e.lineWidth=2*o.borderWidth,e.lineJoin="round"):(e.lineWidth=o.borderWidth,e.lineJoin="bevel"),t.fullCircles&&function(e,t,n){const{x:r,y:i,startAngle:o,pixelMargin:a,fullCircles:s}=t,l=Math.max(t.outerRadius-a,0),c=t.innerRadius+a;let u;for(n&&ei(e,t,o+L),e.beginPath(),e.arc(r,i,c,o+L,o,!0),u=0;u<s;++u)e.stroke();for(e.beginPath(),e.arc(r,i,l,o,o+L),u=0;u<s;++u)e.stroke()}(e,t,a),a&&ei(e,t,i),ni(e,t,n,r,i),e.stroke())})(e,t,a,o,s),e.restore()}}function ii(e,t,n=t){e.lineCap=g(n.borderCapStyle,t.borderCapStyle),e.setLineDash(g(n.borderDash,t.borderDash)),e.lineDashOffset=g(n.borderDashOffset,t.borderDashOffset),e.lineJoin=g(n.borderJoinStyle,t.borderJoinStyle),e.lineWidth=g(n.borderWidth,t.borderWidth),e.strokeStyle=g(n.borderColor,t.borderColor)}function oi(e,t,n){e.lineTo(n.x,n.y)}function ai(e,t,n={}){const r=e.length,{start:i=0,end:o=r-1}=n,{start:a,end:s}=t,l=Math.max(i,a),c=Math.min(o,s),u=i<a&&o<a||i>s&&o>s;return{count:r,start:l,loop:t.loop,ilen:c<l&&!u?r+c-l:c-l}}function si(e,t,n,r){const{points:i,options:o}=t,{count:a,start:s,loop:l,ilen:c}=ai(i,n,r),u=function(e){return e.stepped?Qe:e.tension||"monotone"===e.cubicInterpolationMode?Xe:oi}(o);let d,f,h,{move:p=!0,reverse:g}=r||{};for(d=0;d<=c;++d)f=i[(s+(g?c-d:d))%a],f.skip||(p?(e.moveTo(f.x,f.y),p=!1):u(e,h,f,g,o.stepped),h=f);return l&&(f=i[(s+(g?c:0))%a],u(e,h,f,g,o.stepped)),!!l}function li(e,t,n,r){const i=t.points,{count:o,start:a,ilen:s}=ai(i,n,r),{move:l=!0,reverse:c}=r||{};let u,d,f,h,p,g,m=0,v=0;const b=e=>(a+(c?s-e:e))%o,y=()=>{h!==p&&(e.lineTo(m,p),e.lineTo(m,h),e.lineTo(m,g))};for(l&&(d=i[b(0)],e.moveTo(d.x,d.y)),u=0;u<=s;++u){if(d=i[b(u)],d.skip)continue;const t=d.x,n=d.y,r=0|t;r===f?(n<h?h=n:n>p&&(p=n),m=(v*m+t)/++v):(y(),e.lineTo(t,n),f=r,v=0,h=p=n),g=n}y()}function ci(e){const t=e.options,n=t.borderDash&&t.borderDash.length;return e._decimated||e._loop||t.tension||"monotone"===t.cubicInterpolationMode||t.stepped||n?si:li}ri.id="arc",ri.defaults={borderAlign:"center",borderColor:"#fff",borderRadius:0,borderWidth:2,offset:0,spacing:0,angle:void 0},ri.defaultRoutes={backgroundColor:"backgroundColor"};const ui="function"==typeof Path2D;class di extends mr{constructor(e){super(),this.animated=!0,this.options=void 0,this._loop=void 0,this._fullLoop=void 0,this._path=void 0,this._points=void 0,this._segments=void 0,this._decimated=!1,this._pointsUpdated=!1,e&&Object.assign(this,e)}updateControlPoints(e,t){const n=this,r=n.options;if((r.tension||"monotone"===r.cubicInterpolationMode)&&!r.stepped&&!n._pointsUpdated){const i=r.spanGaps?n._loop:n._fullLoop;Lt(n._points,r,e,i,t),n._pointsUpdated=!0}}set points(e){const t=this;t._points=e,delete t._segments,delete t._path,t._pointsUpdated=!1}get points(){return this._points}get segments(){return this._segments||(this._segments=function(e,t){const n=e.points,r=e.options.spanGaps,i=n.length;if(!i)return[];const o=!!e._loop,{start:a,end:s}=function(e,t,n,r){let i=0,o=t-1;if(n&&!r)for(;i<t&&!e[i].skip;)i++;for(;i<t&&e[i].skip;)i++;for(i%=t,n&&(o+=i);o>i&&e[o%t].skip;)o--;return o%=t,{start:i,end:o}}(n,i,o,r);return function(e,t,n){return n&&n.setContext&&t?function(e,t,n){const r=t.length,i=[];let o=e[0].start,a=o;for(const l of e){let e,c,u=t[o%r];for(a=o+1;a<=l.end;a++){const d=t[a%r];c={backgroundColor:(s=n.setContext({type:"segment",p0:u,p1:d})).backgroundColor,borderCapStyle:s.borderCapStyle,borderDash:s.borderDash,borderDashOffset:s.borderDashOffset,borderJoinStyle:s.borderJoinStyle,borderWidth:s.borderWidth,borderColor:s.borderColor},tn(c,e)&&(i.push({start:o,end:a-1,loop:l.loop,style:e}),e=c,o=a-1),u=d,e=c}o<a-1&&(i.push({start:o,end:a-1,loop:l.loop,style:c}),o=a-1)}var s;return i}(e,t,n):e}(!0===r?[{start:a,end:s,loop:o}]:function(e,t,n,r){const i=e.length,o=[];let a,s=t,l=e[t];for(a=t+1;a<=n;++a){const n=e[a%i];n.skip||n.stop?l.skip||(r=!1,o.push({start:t%i,end:(a-1)%i,loop:r}),t=s=n.stop?a:null):(s=a,l.skip&&(t=a)),l=n}return null!==s&&o.push({start:t%i,end:s%i,loop:r}),o}(n,a,s<a?s+i:s,!!e._fullLoop&&0===a&&s===i-1),n,t)}(this,this.options.segment))}first(){const e=this.segments,t=this.points;return e.length&&t[e[0].start]}last(){const e=this.segments,t=this.points,n=e.length;return n&&t[e[n-1].end]}interpolate(e,t){const n=this,r=n.options,i=e[t],o=n.points,a=en(n,{property:t,start:i,end:i});if(!a.length)return;const s=[],l=function(e){return e.stepped?Ht:e.tension||"monotone"===e.cubicInterpolationMode?$t:Ut}(r);let c,u;for(c=0,u=a.length;c<u;++c){const{start:n,end:u}=a[c],d=o[n],f=o[u];if(d===f){s.push(d);continue}const h=l(d,f,Math.abs((i-d[t])/(f[t]-d[t])),r.stepped);h[t]=e[t],s.push(h)}return 1===s.length?s[0]:s}pathSegment(e,t,n){return ci(this)(e,this,t,n)}path(e,t,n){const r=this,i=r.segments,o=ci(r);let a=r._loop;t=t||0,n=n||r.points.length-t;for(const s of i)a&=o(e,r,s,{start:t,end:t+n-1});return!!a}draw(e,t,n,r){const i=this,o=i.options||{};(i.points||[]).length&&o.borderWidth&&(e.save(),function(e,t,n,r){ui&&1===t.segments.length?function(e,t,n,r){let i=t._path;i||(i=t._path=new Path2D,t.path(i,n,r)&&i.closePath()),ii(e,t.options),e.stroke(i)}(e,t,n,r):function(e,t,n,r){const{segments:i,options:o}=t,a=ci(t);for(const s of i)ii(e,o,s.style),e.beginPath(),a(e,t,s,{start:n,end:n+r-1})&&e.closePath(),e.stroke()}(e,t,n,r)}(e,i,n,r),e.restore(),i.animated&&(i._pointsUpdated=!1,i._path=void 0))}}function fi(e,t,n,r){const i=e.options,{[n]:o}=e.getProps([n],r);return Math.abs(t-o)<i.radius+i.hitRadius}di.id="line",di.defaults={borderCapStyle:"butt",borderDash:[],borderDashOffset:0,borderJoinStyle:"miter",borderWidth:3,capBezierPoints:!0,cubicInterpolationMode:"default",fill:!1,spanGaps:!1,stepped:!1,tension:0},di.defaultRoutes={backgroundColor:"backgroundColor",borderColor:"borderColor"},di.descriptors={_scriptable:!0,_indexable:e=>"borderDash"!==e&&"fill"!==e};class hi extends mr{constructor(e){super(),this.options=void 0,this.parsed=void 0,this.skip=void 0,this.stop=void 0,e&&Object.assign(this,e)}inRange(e,t,n){const r=this.options,{x:i,y:o}=this.getProps(["x","y"],n);return Math.pow(e-i,2)+Math.pow(t-o,2)<Math.pow(r.hitRadius+r.radius,2)}inXRange(e,t){return fi(this,e,"x",t)}inYRange(e,t){return fi(this,e,"y",t)}getCenterPoint(e){const{x:t,y:n}=this.getProps(["x","y"],e);return{x:t,y:n}}size(e){let t=(e=e||this.options||{}).radius||0;return t=Math.max(t,t&&e.hoverRadius||0),2*(t+(t&&e.borderWidth||0))}draw(e){const t=this,n=t.options;t.skip||n.radius<.1||(e.strokeStyle=n.borderColor,e.lineWidth=n.borderWidth,e.fillStyle=n.backgroundColor,He(e,n,t.x,t.y))}getRange(){const e=this.options||{};return e.radius+e.hitRadius}}function pi(e,t){const{x:n,y:r,base:i,width:o,height:a}=e.getProps(["x","y","base","width","height"],t);let s,l,c,u,d;return e.horizontal?(d=a/2,s=Math.min(n,i),l=Math.max(n,i),c=r-d,u=r+d):(d=o/2,s=n-d,l=n+d,c=Math.min(r,i),u=Math.max(r,i)),{left:s,top:c,right:l,bottom:u}}function gi(e){let t=e.options.borderSkipped;const n={};return t?(t=e.horizontal?mi(t,"left","right",e.base>e.x):mi(t,"bottom","top",e.base<e.y),n[t]=!0,n):n}function mi(e,t,n,r){var i,o,a;return r?(a=n,e=vi(e=(i=e)===(o=t)?a:i===a?o:i,n,t)):e=vi(e,t,n),e}function vi(e,t,n){return"start"===e?t:"end"===e?n:e}function bi(e,t,n,r){return e?0:Math.max(Math.min(t,r),n)}function yi(e,t,n,r){const i=null===t,o=null===n,a=e&&!(i&&o)&&pi(e,r);return a&&(i||t>=a.left&&t<=a.right)&&(o||n>=a.top&&n<=a.bottom)}function xi(e,t){e.rect(t.x,t.y,t.w,t.h)}hi.id="point",hi.defaults={borderWidth:1,hitRadius:1,hoverBorderWidth:1,hoverRadius:4,pointStyle:"circle",radius:3,rotation:0},hi.defaultRoutes={backgroundColor:"backgroundColor",borderColor:"borderColor"};class _i extends mr{constructor(e){super(),this.options=void 0,this.horizontal=void 0,this.base=void 0,this.width=void 0,this.height=void 0,e&&Object.assign(this,e)}draw(e){const t=this.options,{inner:n,outer:r}=function(e){const t=pi(e),n=t.right-t.left,r=t.bottom-t.top,i=function(e,t,n){const r=e.options.borderWidth,i=gi(e),o=rt(r);return{t:bi(i.top,o.top,0,n),r:bi(i.right,o.right,0,t),b:bi(i.bottom,o.bottom,0,n),l:bi(i.left,o.left,0,t)}}(e,n/2,r/2),o=function(e,t,n){const{enableBorderRadius:r}=e.getProps(["enableBorderRadius"]),i=e.options.borderRadius,o=it(i),a=Math.min(t,n),s=gi(e),l=r||f(i);return{topLeft:bi(!l||s.top||s.left,o.topLeft,0,a),topRight:bi(!l||s.top||s.right,o.topRight,0,a),bottomLeft:bi(!l||s.bottom||s.left,o.bottomLeft,0,a),bottomRight:bi(!l||s.bottom||s.right,o.bottomRight,0,a)}}(e,n/2,r/2);return{outer:{x:t.left,y:t.top,w:n,h:r,radius:o},inner:{x:t.left+i.l,y:t.top+i.t,w:n-i.l-i.r,h:r-i.t-i.b,radius:{topLeft:Math.max(0,o.topLeft-Math.max(i.t,i.l)),topRight:Math.max(0,o.topRight-Math.max(i.t,i.r)),bottomLeft:Math.max(0,o.bottomLeft-Math.max(i.b,i.l)),bottomRight:Math.max(0,o.bottomRight-Math.max(i.b,i.r))}}}}(this),i=(o=r.radius).topLeft||o.topRight||o.bottomLeft||o.bottomRight?Ge:xi;var o;e.save(),r.w===n.w&&r.h===n.h||(e.beginPath(),i(e,r),e.clip(),i(e,n),e.fillStyle=t.borderColor,e.fill("evenodd")),e.beginPath(),i(e,n),e.fillStyle=t.backgroundColor,e.fill(),e.restore()}inRange(e,t,n){return yi(this,e,t,n)}inXRange(e,t){return yi(this,e,null,t)}inYRange(e,t){return yi(this,null,e,t)}getCenterPoint(e){const{x:t,y:n,base:r,horizontal:i}=this.getProps(["x","y","base","horizontal"],e);return{x:i?(t+r)/2:t,y:i?n:(n+r)/2}}getRange(e){return"x"===e?this.width/2:this.height/2}}_i.id="bar",_i.defaults={borderSkipped:"start",borderWidth:0,borderRadius:0,enableBorderRadius:!0,pointStyle:void 0},_i.defaultRoutes={backgroundColor:"backgroundColor",borderColor:"borderColor"};var wi=Object.freeze({__proto__:null,ArcElement:ri,LineElement:di,PointElement:hi,BarElement:_i});function ki(e){if(e._decimated){const t=e._data;delete e._decimated,delete e._data,Object.defineProperty(e,"data",{value:t})}}function Si(e){e.data.datasets.forEach((e=>{ki(e)}))}var Ei={id:"decimation",defaults:{algorithm:"min-max",enabled:!1},beforeElementsUpdate:(e,t,n)=>{if(!n.enabled)return void Si(e);const r=e.width;e.data.datasets.forEach(((t,i)=>{const{_data:o,indexAxis:a}=t,s=e.getDatasetMeta(i),l=o||t.data;if("y"===st([a,e.options.indexAxis]))return;if("line"!==s.type)return;const c=e.scales[s.xAxisID];if("linear"!==c.type&&"time"!==c.type)return;if(e.options.parsing)return;let d,{start:f,count:h}=function(e,t){const n=t.length;let r,i=0;const{iScale:o}=e,{min:a,max:s,minDefined:l,maxDefined:c}=o.getUserBounds();return l&&(i=G(ct(t,o.axis,a).lo,0,n-1)),r=c?G(ct(t,o.axis,s).hi+1,i,n)-i:n-i,{start:i,count:r}}(s,l);if(h<=4*r)ki(t);else{switch(u(o)&&(t._data=l,delete t.data,Object.defineProperty(t,"data",{configurable:!0,enumerable:!0,get:function(){return this._decimated},set:function(e){this._data=e}})),n.algorithm){case"lttb":d=function(e,t,n,r,i){const o=i.samples||r;if(o>=n)return e.slice(t,t+n);const a=[],s=(n-2)/(o-2);let l=0;const c=t+n-1;let u,d,f,h,p,g=t;for(a[l++]=e[g],u=0;u<o-2;u++){let r,i=0,o=0;const c=Math.floor((u+1)*s)+1+t,m=Math.min(Math.floor((u+2)*s)+1,n)+t,v=m-c;for(r=c;r<m;r++)i+=e[r].x,o+=e[r].y;i/=v,o/=v;const b=Math.floor(u*s)+1+t,y=Math.floor((u+1)*s)+1+t,{x,y:_}=e[g];for(f=h=-1,r=b;r<y;r++)h=.5*Math.abs((x-i)*(e[r].y-_)-(x-e[r].x)*(o-_)),h>f&&(f=h,d=e[r],p=r);a[l++]=d,g=p}return a[l++]=e[c],a}(l,f,h,r,n);break;case"min-max":d=function(e,t,n,r){let i,o,a,s,l,c,d,f,h,p,g=0,m=0;const v=[],b=t+n-1,y=e[t].x,x=e[b].x-y;for(i=t;i<t+n;++i){o=e[i],a=(o.x-y)/x*r,s=o.y;const t=0|a;if(t===l)s<h?(h=s,c=i):s>p&&(p=s,d=i),g=(m*g+o.x)/++m;else{const n=i-1;if(!u(c)&&!u(d)){const t=Math.min(c,d),r=Math.max(c,d);t!==f&&t!==n&&v.push({...e[t],x:g}),r!==f&&r!==n&&v.push({...e[r],x:g})}i>0&&n!==f&&v.push(e[n]),v.push(o),l=t,m=0,h=p=s,c=d=f=i}}return v}(l,f,h,r);break;default:throw new Error(`Unsupported decimation algorithm '${n.algorithm}'`)}t._decimated=d}}))},destroy(e){Si(e)}};function Mi(e,t,n){const r=function(e){const t=e.options,n=t.fill;let r=g(n&&n.target,n);return void 0===r&&(r=!!t.backgroundColor),!1!==r&&null!==r&&(!0===r?"origin":r)}(e);if(f(r))return!isNaN(r.value)&&r;let i=parseFloat(r);return h(i)&&Math.floor(i)===i?("-"!==r[0]&&"+"!==r[0]||(i=t+i),!(i===t||i<0||i>=n)&&i):["origin","start","end","stack"].indexOf(r)>=0&&r}class Ci{constructor(e){this.x=e.x,this.y=e.y,this.radius=e.radius}pathSegment(e,t,n){const{x:r,y:i,radius:o}=this;return t=t||{start:0,end:L},e.arc(r,i,o,t.end,t.start,!0),!n.bounds}interpolate(e){const{x:t,y:n,radius:r}=this,i=e.angle;return{x:t+Math.cos(i)*r,y:n+Math.sin(i)*r,angle:i}}}function Pi(e,t,n){for(;t>e;t--){const e=n[t];if(!isNaN(e.x)&&!isNaN(e.y))break}return t}const Oi=e=>"line"===e.type&&!e.hidden;function Ti(e,t,n){const r=[];for(let i=0;i<n.length;i++){const o=n[i],{first:a,last:s,point:l}=Di(o,t,"x");if(!(!l||a&&s))if(a)r.unshift(l);else if(e.push(l),!s)break}e.push(...r)}function Di(e,t,n){const r=e.interpolate(t,n);if(!r)return{};const i=r[n],o=e.segments,a=e.points;let s=!1,l=!1;for(let e=0;e<o.length;e++){const t=o[e],r=a[t.start][n],c=a[t.end][n];if(i>=r&&i<=c){s=i===r,l=i===c;break}}return{first:s,last:l,point:r}}function Li(e,t){let n=[],r=!1;return d(e)?(r=!0,n=e):n=function(e,t){const{x:n=null,y:r=null}=e||{},i=t.points,o=[];return t.segments.forEach((({start:e,end:t})=>{t=Pi(e,t,i);const a=i[e],s=i[t];null!==r?(o.push({x:a.x,y:r}),o.push({x:s.x,y:r})):null!==n&&(o.push({x:n,y:a.y}),o.push({x:n,y:s.y}))})),o}(e,t),n.length?new di({points:n,options:{tension:0},_loop:r,_fullLoop:r}):null}function ji(e,t,n){let r=e[t].fill;const i=[t];let o;if(!n)return r;for(;!1!==r&&-1===i.indexOf(r);){if(!h(r))return r;if(o=e[r],!o)return!1;if(o.visible)return r;i.push(r),r=o.fill}return!1}function Ai(e,t,n){e.beginPath(),t.path(e),e.lineTo(t.last().x,n),e.lineTo(t.first().x,n),e.closePath(),e.clip()}function Ri(e,t,n,r){if(r)return;let i=t[e],o=n[e];return"angle"===e&&(i=K(i),o=K(o)),{property:e,start:i,end:o}}function Ni(e,t,n,r){return e&&t?r(e[n],t[n]):e?e[n]:t?t[n]:0}function zi(e,t,n){const{top:r,bottom:i}=t.chart.chartArea,{property:o,start:a,end:s}=n||{};"x"===o&&(e.beginPath(),e.rect(a,r,s-a,i-r),e.clip())}function Fi(e,t,n,r){const i=t.interpolate(n,r);i&&e.lineTo(i.x,i.y)}function Ii(e,t){const{line:n,target:r,property:i,color:o,scale:a}=t,s=function(e,t,n){const r=e.segments,i=e.points,o=t.points,a=[];for(const e of r){let{start:r,end:s}=e;s=Pi(r,s,i);const l=Ri(n,i[r],i[s],e.loop);if(!t.segments){a.push({source:e,target:l,start:i[r],end:i[s]});continue}const c=en(t,l);for(const t of c){const r=Ri(n,o[t.start],o[t.end],t.loop),s=Jt(e,i,r);for(const e of s)a.push({source:e,target:t,start:{[n]:Ni(l,r,"start",Math.max)},end:{[n]:Ni(l,r,"end",Math.min)}})}}return a}(n,r,i);for(const{source:t,target:l,start:c,end:u}of s){const{style:{backgroundColor:s=o}={}}=t;e.save(),e.fillStyle=s,zi(e,a,Ri(i,c,u)),e.beginPath();const d=!!n.pathSegment(e,t);d?e.closePath():Fi(e,r,u,i);const f=!!r.pathSegment(e,l,{move:d,reverse:!0}),h=d&&f;h||Fi(e,r,c,i),e.closePath(),e.fill(h?"evenodd":"nonzero"),e.restore()}}function Bi(e,t,n){const r=function(e){const{chart:t,fill:n,line:r}=e;if(h(n))return function(e,t){const n=e.getDatasetMeta(t);return n&&e.isDatasetVisible(t)?n.dataset:null}(t,n);if("stack"===n)return function(e){const{chart:t,scale:n,index:r,line:i}=e,o=[],a=i.segments,s=i.points,l=function(e,t){const n=[],r=e.getSortedVisibleDatasetMetas();for(let e=0;e<r.length;e++){const i=r[e];if(i.index===t)break;Oi(i)&&n.unshift(i.dataset)}return n}(t,r);l.push(Li({x:null,y:n.bottom},i));for(let e=0;e<a.length;e++){const t=a[e];for(let e=t.start;e<=t.end;e++)Ti(o,s[e],l)}return new di({points:o,options:{}})}(e);const i=function(e){return(e.scale||{}).getPointPositionForValue?function(e){const{scale:t,fill:n}=e,r=t.options,i=t.getLabels().length,o=[],a=r.reverse?t.max:t.min,s=r.reverse?t.min:t.max;let l,c,u;if(u="start"===n?a:"end"===n?s:f(n)?n.value:t.getBaseValue(),r.grid.circular)return c=t.getPointPositionForValue(0,a),new Ci({x:c.x,y:c.y,radius:t.getDistanceFromCenterForValue(u)});for(l=0;l<i;++l)o.push(t.getPointPositionForValue(l,u));return o}(e):function(e){const{scale:t={},fill:n}=e;let r,i=null;return"start"===n?i=t.bottom:"end"===n?i=t.top:f(n)?i=t.getPixelForValue(n.value):t.getBasePixel&&(i=t.getBasePixel()),h(i)?(r=t.isHorizontal(),{x:r?i:null,y:r?null:i}):null}(e)}(e);return i instanceof Ci?i:Li(i,r)}(t),{line:i,scale:o,axis:a}=t,s=i.options,l=s.fill,c=s.backgroundColor,{above:u=c,below:d=c}=l||{};r&&i.points.length&&(Ye(e,n),function(e,t){const{line:n,target:r,above:i,below:o,area:a,scale:s}=t,l=n._loop?"angle":t.axis;e.save(),"x"===l&&o!==i&&(Ai(e,r,a.top),Ii(e,{line:n,target:r,color:i,scale:s,property:l}),e.restore(),e.save(),Ai(e,r,a.bottom)),Ii(e,{line:n,target:r,color:o,scale:s,property:l}),e.restore()}(e,{line:i,target:r,above:u,below:d,area:n,scale:o,axis:a}),qe(e))}var Vi={id:"filler",afterDatasetsUpdate(e,t,n){const r=(e.data.datasets||[]).length,i=[];let o,a,s,l;for(a=0;a<r;++a)o=e.getDatasetMeta(a),s=o.dataset,l=null,s&&s.options&&s instanceof di&&(l={visible:e.isDatasetVisible(a),index:a,fill:Mi(s,a,r),chart:e,axis:o.controller.options.indexAxis,scale:o.vScale,line:s}),o.$filler=l,i.push(l);for(a=0;a<r;++a)l=i[a],l&&!1!==l.fill&&(l.fill=ji(i,a,n.propagate))},beforeDraw(e,t,n){const r="beforeDraw"===n.drawTime,i=e.getSortedVisibleDatasetMetas(),o=e.chartArea;for(let t=i.length-1;t>=0;--t){const n=i[t].$filler;n&&(n.line.updateControlPoints(o,n.axis),r&&Bi(e.ctx,n,o))}},beforeDatasetsDraw(e,t,n){if("beforeDatasetsDraw"!==n.drawTime)return;const r=e.getSortedVisibleDatasetMetas();for(let t=r.length-1;t>=0;--t){const n=r[t].$filler;n&&Bi(e.ctx,n,e.chartArea)}},beforeDatasetDraw(e,t,n){const r=t.meta.$filler;r&&!1!==r.fill&&"beforeDatasetDraw"===n.drawTime&&Bi(e.ctx,r,e.chartArea)},defaults:{propagate:!0,drawTime:"beforeDatasetDraw"}};const Wi=(e,t)=>{let{boxHeight:n=t,boxWidth:r=t}=e;return e.usePointStyle&&(n=Math.min(n,t),r=Math.min(r,t)),{boxWidth:r,boxHeight:n,itemHeight:Math.max(t,n)}};class Ui extends mr{constructor(e){super(),this._added=!1,this.legendHitBoxes=[],this._hoveredItem=null,this.doughnutMode=!1,this.chart=e.chart,this.options=e.options,this.ctx=e.ctx,this.legendItems=void 0,this.columnSizes=void 0,this.lineWidths=void 0,this.maxHeight=void 0,this.maxWidth=void 0,this.top=void 0,this.bottom=void 0,this.left=void 0,this.right=void 0,this.height=void 0,this.width=void 0,this._margins=void 0,this.position=void 0,this.weight=void 0,this.fullSize=void 0}update(e,t,n){const r=this;r.maxWidth=e,r.maxHeight=t,r._margins=n,r.setDimensions(),r.buildLabels(),r.fit()}setDimensions(){const e=this;e.isHorizontal()?(e.width=e.maxWidth,e.left=e._margins.left,e.right=e.width):(e.height=e.maxHeight,e.top=e._margins.top,e.bottom=e.height)}buildLabels(){const e=this,t=e.options.labels||{};let n=v(t.generateLabels,[e.chart],e)||[];t.filter&&(n=n.filter((n=>t.filter(n,e.chart.data)))),t.sort&&(n=n.sort(((n,r)=>t.sort(n,r,e.chart.data)))),e.options.reverse&&n.reverse(),e.legendItems=n}fit(){const e=this,{options:t,ctx:n}=e;if(!t.display)return void(e.width=e.height=0);const r=t.labels,i=at(r.font),o=i.size,a=e._computeTitleHeight(),{boxWidth:s,itemHeight:l}=Wi(r,o);let c,u;n.font=i.string,e.isHorizontal()?(c=e.maxWidth,u=e._fitRows(a,o,s,l)+10):(u=e.maxHeight,c=e._fitCols(a,o,s,l)+10),e.width=Math.min(c,t.maxWidth||e.maxWidth),e.height=Math.min(u,t.maxHeight||e.maxHeight)}_fitRows(e,t,n,r){const i=this,{ctx:o,maxWidth:a,options:{labels:{padding:s}}}=i,l=i.legendHitBoxes=[],c=i.lineWidths=[0],u=r+s;let d=e;o.textAlign="left",o.textBaseline="middle";let f=-1,h=-u;return i.legendItems.forEach(((e,i)=>{const p=n+t/2+o.measureText(e.text).width;(0===i||c[c.length-1]+p+2*s>a)&&(d+=u,c[c.length-(i>0?0:1)]=0,h+=u,f++),l[i]={left:0,top:h,row:f,width:p,height:r},c[c.length-1]+=p+s})),d}_fitCols(e,t,n,r){const i=this,{ctx:o,maxHeight:a,options:{labels:{padding:s}}}=i,l=i.legendHitBoxes=[],c=i.columnSizes=[],u=a-e;let d=s,f=0,h=0,p=0,g=0;return i.legendItems.forEach(((e,i)=>{const a=n+t/2+o.measureText(e.text).width;i>0&&h+r+2*s>u&&(d+=f+s,c.push({width:f,height:h}),p+=f+s,g++,f=h=0),l[i]={left:p,top:h,col:g,width:a,height:r},f=Math.max(f,a),h+=r+s})),d+=f,c.push({width:f,height:h}),d}adjustHitBoxes(){const e=this;if(!e.options.display)return;const t=e._computeTitleHeight(),{legendHitBoxes:n,options:{align:r,labels:{padding:i},rtl:o}}=e;if(this.isHorizontal()){let a=0,l=s(r,e.left+i,e.right-e.lineWidths[a]);for(const o of n)a!==o.row&&(a=o.row,l=s(r,e.left+i,e.right-e.lineWidths[a])),o.top+=e.top+t+i,o.left=l,l+=o.width+i;if(o){const t=n.reduce(((e,t)=>(e[t.row]=e[t.row]||[],e[t.row].push(t),e)),{}),r=[];Object.keys(t).forEach((e=>{t[e].reverse(),r.push(...t[e])})),e.legendHitBoxes=r}}else{let o=0,a=s(r,e.top+t+i,e.bottom-e.columnSizes[o].height);for(const l of n)l.col!==o&&(o=l.col,a=s(r,e.top+t+i,e.bottom-e.columnSizes[o].height)),l.top=a,l.left+=e.left+i,a+=l.height+i}}isHorizontal(){return"top"===this.options.position||"bottom"===this.options.position}draw(){const e=this;if(e.options.display){const t=e.ctx;Ye(t,e),e._draw(),qe(t)}}_draw(){const e=this,{options:t,columnSizes:n,lineWidths:r,ctx:i}=e,{align:o,labels:a}=t,l=Ie.color,c=Qt(t.rtl,e.left,e.width),u=at(a.font),{color:d,padding:f}=a,h=u.size,p=h/2;let m;e.drawTitle(),i.textAlign=c.textAlign("left"),i.textBaseline="middle",i.lineWidth=.5,i.font=u.string;const{boxWidth:v,boxHeight:b,itemHeight:y}=Wi(a,h),x=e.isHorizontal(),_=this._computeTitleHeight();m=x?{x:s(o,e.left+f,e.right-r[0]),y:e.top+f+_,line:0}:{x:e.left+f,y:s(o,e.top+_+f,e.bottom-n[0].height),line:0},Xt(e.ctx,t.textDirection);const w=y+f;e.legendItems.forEach(((k,S)=>{i.strokeStyle=k.fontColor||d,i.fillStyle=k.fontColor||d;const E=i.measureText(k.text).width,M=c.textAlign(k.textAlign||(k.textAlign=a.textAlign)),C=v+p+E;let P=m.x,O=m.y;c.setWidth(e.width),x?S>0&&P+C+f>e.right&&(O=m.y+=w,m.line++,P=m.x=s(o,e.left+f,e.right-r[m.line])):S>0&&O+w>e.bottom&&(P=m.x=P+n[m.line].width+f,m.line++,O=m.y=s(o,e.top+_+f,e.bottom-n[m.line].height)),function(e,t,n){if(isNaN(v)||v<=0||isNaN(b)||b<0)return;i.save();const r=g(n.lineWidth,1);if(i.fillStyle=g(n.fillStyle,l),i.lineCap=g(n.lineCap,"butt"),i.lineDashOffset=g(n.lineDashOffset,0),i.lineJoin=g(n.lineJoin,"miter"),i.lineWidth=r,i.strokeStyle=g(n.strokeStyle,l),i.setLineDash(g(n.lineDash,[])),a.usePointStyle){const o={radius:v*Math.SQRT2/2,pointStyle:n.pointStyle,rotation:n.rotation,borderWidth:r},a=c.xPlus(e,v/2);He(i,o,a,t+p)}else{const o=t+Math.max((h-b)/2,0),a=c.leftForLtr(e,v),s=it(n.borderRadius);i.beginPath(),Object.values(s).some((e=>0!==e))?Ge(i,{x:a,y:o,w:v,h:b,radius:s}):i.rect(a,o,v,b),i.fill(),0!==r&&i.stroke()}i.restore()}(c.x(P),O,k),P=((e,t,n,r)=>e===(r?"left":"right")?n:"center"===e?(t+n)/2:t)(M,P+v+p,x?P+C:e.right,t.rtl),function(e,t,n){Ke(i,n.text,e,t+y/2,u,{strikethrough:n.hidden,textAlign:c.textAlign(n.textAlign)})}(c.x(P),O,k),x?m.x+=C+f:m.y+=w})),Kt(e.ctx,t.textDirection)}drawTitle(){const e=this,t=e.options,n=t.title,r=at(n.font),i=ot(n.padding);if(!n.display)return;const o=Qt(t.rtl,e.left,e.width),l=e.ctx,c=n.position,u=r.size/2,d=i.top+u;let f,h=e.left,p=e.width;if(this.isHorizontal())p=Math.max(...e.lineWidths),f=e.top+d,h=s(t.align,h,e.right-p);else{const n=e.columnSizes.reduce(((e,t)=>Math.max(e,t.height)),0);f=d+s(t.align,e.top,e.bottom-n-t.labels.padding-e._computeTitleHeight())}const g=s(c,h,h+p);l.textAlign=o.textAlign(a(c)),l.textBaseline="middle",l.strokeStyle=n.color,l.fillStyle=n.color,l.font=r.string,Ke(l,n.text,g,f,r)}_computeTitleHeight(){const e=this.options.title,t=at(e.font),n=ot(e.padding);return e.display?t.lineHeight+n.height:0}_getLegendItemAt(e,t){const n=this;let r,i,o;if(e>=n.left&&e<=n.right&&t>=n.top&&t<=n.bottom)for(o=n.legendHitBoxes,r=0;r<o.length;++r)if(i=o[r],e>=i.left&&e<=i.left+i.width&&t>=i.top&&t<=i.top+i.height)return n.legendItems[r];return null}handleEvent(e){const t=this,n=t.options;if(!function(e,t){return!("mousemove"!==e||!t.onHover&&!t.onLeave)||!(!t.onClick||"click"!==e&&"mouseup"!==e)}(e.type,n))return;const r=t._getLegendItemAt(e.x,e.y);if("mousemove"===e.type){const a=t._hoveredItem,s=(o=r,null!==(i=a)&&null!==o&&i.datasetIndex===o.datasetIndex&&i.index===o.index);a&&!s&&v(n.onLeave,[e,a,t],t),t._hoveredItem=r,r&&!s&&v(n.onHover,[e,r,t],t)}else r&&v(n.onClick,[e,r,t],t);var i,o}}var Hi={id:"legend",_element:Ui,start(e,t,n){const r=e.legend=new Ui({ctx:e.ctx,options:n,chart:e});er.configure(e,r,n),er.addBox(e,r)},stop(e){er.removeBox(e,e.legend),delete e.legend},beforeUpdate(e,t,n){const r=e.legend;er.configure(e,r,n),r.options=n},afterUpdate(e){const t=e.legend;t.buildLabels(),t.adjustHitBoxes()},afterEvent(e,t){t.replay||e.legend.handleEvent(t.event)},defaults:{display:!0,position:"top",align:"center",fullSize:!0,reverse:!1,weight:1e3,onClick(e,t,n){const r=t.datasetIndex,i=n.chart;i.isDatasetVisible(r)?(i.hide(r),t.hidden=!0):(i.show(r),t.hidden=!1)},onHover:null,onLeave:null,labels:{color:e=>e.chart.options.color,boxWidth:40,padding:10,generateLabels(e){const t=e.data.datasets,{labels:{usePointStyle:n,pointStyle:r,textAlign:i,color:o}}=e.legend.options;return e._getSortedDatasetMetas().map((e=>{const a=e.controller.getStyle(n?0:void 0),s=ot(a.borderWidth);return{text:t[e.index].label,fillStyle:a.backgroundColor,fontColor:o,hidden:!e.visible,lineCap:a.borderCapStyle,lineDash:a.borderDash,lineDashOffset:a.borderDashOffset,lineJoin:a.borderJoinStyle,lineWidth:(s.width+s.height)/4,strokeStyle:a.borderColor,pointStyle:r||a.pointStyle,rotation:a.rotation,textAlign:i||a.textAlign,borderRadius:0,datasetIndex:e.index}}),this)}},title:{color:e=>e.chart.options.color,display:!1,position:"center",text:""}},descriptors:{_scriptable:e=>!e.startsWith("on"),labels:{_scriptable:e=>!["generateLabels","filter","sort"].includes(e)}}};class $i extends mr{constructor(e){super(),this.chart=e.chart,this.options=e.options,this.ctx=e.ctx,this._padding=void 0,this.top=void 0,this.bottom=void 0,this.left=void 0,this.right=void 0,this.width=void 0,this.height=void 0,this.position=void 0,this.weight=void 0,this.fullSize=void 0}update(e,t){const n=this,r=n.options;if(n.left=0,n.top=0,!r.display)return void(n.width=n.height=n.right=n.bottom=0);n.width=n.right=e,n.height=n.bottom=t;const i=d(r.text)?r.text.length:1;n._padding=ot(r.padding);const o=i*at(r.font).lineHeight+n._padding.height;n.isHorizontal()?n.height=o:n.width=o}isHorizontal(){const e=this.options.position;return"top"===e||"bottom"===e}_drawArgs(e){const{top:t,left:n,bottom:r,right:i,options:o}=this,a=o.align;let l,c,u,d=0;return this.isHorizontal()?(c=s(a,n,i),u=t+e,l=i-n):("left"===o.position?(c=n+e,u=s(a,r,t),d=-.5*D):(c=i-e,u=s(a,t,r),d=.5*D),l=r-t),{titleX:c,titleY:u,maxWidth:l,rotation:d}}draw(){const e=this,t=e.ctx,n=e.options;if(!n.display)return;const r=at(n.font),i=r.lineHeight/2+e._padding.top,{titleX:o,titleY:s,maxWidth:l,rotation:c}=e._drawArgs(i);Ke(t,n.text,0,0,r,{color:n.color,maxWidth:l,rotation:c,textAlign:a(n.align),textBaseline:"middle",translation:[o,s]})}}var Yi={id:"title",_element:$i,start(e,t,n){!function(e,t){const n=new $i({ctx:e.ctx,options:t,chart:e});er.configure(e,n,t),er.addBox(e,n),e.titleBlock=n}(e,n)},stop(e){const t=e.titleBlock;er.removeBox(e,t),delete e.titleBlock},beforeUpdate(e,t,n){const r=e.titleBlock;er.configure(e,r,n),r.options=n},defaults:{align:"center",display:!1,font:{weight:"bold"},fullSize:!0,padding:10,position:"top",text:"",weight:2e3},defaultRoutes:{color:"color"},descriptors:{_scriptable:!0,_indexable:!1}};const qi=new WeakMap;var Qi={id:"subtitle",start(e,t,n){const r=new $i({ctx:e.ctx,options:n,chart:e});er.configure(e,r,n),er.addBox(e,r),qi.set(e,r)},stop(e){er.removeBox(e,qi.get(e)),qi.delete(e)},beforeUpdate(e,t,n){const r=qi.get(e);er.configure(e,r,n),r.options=n},defaults:{align:"center",display:!1,font:{weight:"normal"},fullSize:!0,padding:0,position:"top",text:"",weight:1500},defaultRoutes:{color:"color"},descriptors:{_scriptable:!0,_indexable:!1}};const Xi={average(e){if(!e.length)return!1;let t,n,r=0,i=0,o=0;for(t=0,n=e.length;t<n;++t){const n=e[t].element;if(n&&n.hasValue()){const e=n.tooltipPosition();r+=e.x,i+=e.y,++o}}return{x:r/o,y:i/o}},nearest(e,t){if(!e.length)return!1;let n,r,i,o=t.x,a=t.y,s=Number.POSITIVE_INFINITY;for(n=0,r=e.length;n<r;++n){const r=e[n].element;if(r&&r.hasValue()){const e=Q(t,r.getCenterPoint());e<s&&(s=e,i=r)}}if(i){const e=i.tooltipPosition();o=e.x,a=e.y}return{x:o,y:a}}};function Ki(e,t){return t&&(d(t)?Array.prototype.push.apply(e,t):e.push(t)),e}function Zi(e){return("string"==typeof e||e instanceof String)&&e.indexOf("\n")>-1?e.split("\n"):e}function Gi(e,t){const{element:n,datasetIndex:r,index:i}=t,o=e.getDatasetMeta(r).controller,{label:a,value:s}=o.getLabelAndValue(i);return{chart:e,label:a,parsed:o.getParsed(i),raw:e.data.datasets[r].data[i],formattedValue:s,dataset:o.getDataset(),dataIndex:i,datasetIndex:r,element:n}}function Ji(e,t){const n=e._chart.ctx,{body:r,footer:i,title:o}=e,{boxWidth:a,boxHeight:s}=t,l=at(t.bodyFont),c=at(t.titleFont),u=at(t.footerFont),d=o.length,f=i.length,h=r.length,p=ot(t.padding);let g=p.height,m=0,v=r.reduce(((e,t)=>e+t.before.length+t.lines.length+t.after.length),0);v+=e.beforeBody.length+e.afterBody.length,d&&(g+=d*c.lineHeight+(d-1)*t.titleSpacing+t.titleMarginBottom),v&&(g+=h*(t.displayColors?Math.max(s,l.lineHeight):l.lineHeight)+(v-h)*l.lineHeight+(v-1)*t.bodySpacing),f&&(g+=t.footerMarginTop+f*u.lineHeight+(f-1)*t.footerSpacing);let y=0;const x=function(e){m=Math.max(m,n.measureText(e).width+y)};return n.save(),n.font=c.string,b(e.title,x),n.font=l.string,b(e.beforeBody.concat(e.afterBody),x),y=t.displayColors?a+2:0,b(r,(e=>{b(e.before,x),b(e.lines,x),b(e.after,x)})),y=0,n.font=u.string,b(e.footer,x),n.restore(),m+=p.width,{width:m,height:g}}function eo(e,t,n,r){const{x:i,width:o}=n,{width:a,chartArea:{left:s,right:l}}=e;let c="center";return"center"===r?c=i<=(s+l)/2?"left":"right":i<=o/2?c="left":i>=a-o/2&&(c="right"),function(e,t,n,r){const{x:i,width:o}=r,a=n.caretSize+n.caretPadding;return"left"===e&&i+o+a>t.width||"right"===e&&i-o-a<0||void 0}(c,e,t,n)&&(c="center"),c}function to(e,t,n){const r=t.yAlign||function(e,t){const{y:n,height:r}=t;return n<r/2?"top":n>e.height-r/2?"bottom":"center"}(e,n);return{xAlign:t.xAlign||eo(e,t,n,r),yAlign:r}}function no(e,t,n,r){const{caretSize:i,caretPadding:o,cornerRadius:a}=e,{xAlign:s,yAlign:l}=n,c=i+o,u=a+o;let d=function(e,t){let{x:n,width:r}=e;return"right"===t?n-=r:"center"===t&&(n-=r/2),n}(t,s);const f=function(e,t,n){let{y:r,height:i}=e;return"top"===t?r+=n:r-="bottom"===t?i+n:i/2,r}(t,l,c);return"center"===l?"left"===s?d+=c:"right"===s&&(d-=c):"left"===s?d-=u:"right"===s&&(d+=u),{x:G(d,0,r.width-t.width),y:G(f,0,r.height-t.height)}}function ro(e,t,n){const r=ot(n.padding);return"center"===t?e.x+e.width/2:"right"===t?e.x+e.width-r.right:e.x+r.left}function io(e){return Ki([],Zi(e))}function oo(e,t){const n=t&&t.dataset&&t.dataset.tooltip&&t.dataset.tooltip.callbacks;return n?e.override(n):e}class ao extends mr{constructor(e){super(),this.opacity=0,this._active=[],this._chart=e._chart,this._eventPosition=void 0,this._size=void 0,this._cachedAnimations=void 0,this._tooltipItems=[],this.$animations=void 0,this.$context=void 0,this.options=e.options,this.dataPoints=void 0,this.title=void 0,this.beforeBody=void 0,this.body=void 0,this.afterBody=void 0,this.footer=void 0,this.xAlign=void 0,this.yAlign=void 0,this.x=void 0,this.y=void 0,this.height=void 0,this.width=void 0,this.caretX=void 0,this.caretY=void 0,this.labelColors=void 0,this.labelPointStyles=void 0,this.labelTextColors=void 0}initialize(e){this.options=e,this._cachedAnimations=void 0,this.$context=void 0}_resolveAnimations(){const e=this,t=e._cachedAnimations;if(t)return t;const n=e._chart,r=e.options.setContext(e.getContext()),i=r.enabled&&n.options.animation&&r.animations,o=new ln(e._chart,i);return i._cacheable&&(e._cachedAnimations=Object.freeze(o)),o}getContext(){const e=this;return e.$context||(e.$context=(t=e._chart.getContext(),n=e,r=e._tooltipItems,Object.assign(Object.create(t),{tooltip:n,tooltipItems:r,type:"tooltip"})));var t,n,r}getTitle(e,t){const n=this,{callbacks:r}=t,i=r.beforeTitle.apply(n,[e]),o=r.title.apply(n,[e]),a=r.afterTitle.apply(n,[e]);let s=[];return s=Ki(s,Zi(i)),s=Ki(s,Zi(o)),s=Ki(s,Zi(a)),s}getBeforeBody(e,t){return io(t.callbacks.beforeBody.apply(this,[e]))}getBody(e,t){const n=this,{callbacks:r}=t,i=[];return b(e,(e=>{const t={before:[],lines:[],after:[]},o=oo(r,e);Ki(t.before,Zi(o.beforeLabel.call(n,e))),Ki(t.lines,o.label.call(n,e)),Ki(t.after,Zi(o.afterLabel.call(n,e))),i.push(t)})),i}getAfterBody(e,t){return io(t.callbacks.afterBody.apply(this,[e]))}getFooter(e,t){const n=this,{callbacks:r}=t,i=r.beforeFooter.apply(n,[e]),o=r.footer.apply(n,[e]),a=r.afterFooter.apply(n,[e]);let s=[];return s=Ki(s,Zi(i)),s=Ki(s,Zi(o)),s=Ki(s,Zi(a)),s}_createItems(e){const t=this,n=t._active,r=t._chart.data,i=[],o=[],a=[];let s,l,c=[];for(s=0,l=n.length;s<l;++s)c.push(Gi(t._chart,n[s]));return e.filter&&(c=c.filter(((t,n,i)=>e.filter(t,n,i,r)))),e.itemSort&&(c=c.sort(((t,n)=>e.itemSort(t,n,r)))),b(c,(n=>{const r=oo(e.callbacks,n);i.push(r.labelColor.call(t,n)),o.push(r.labelPointStyle.call(t,n)),a.push(r.labelTextColor.call(t,n))})),t.labelColors=i,t.labelPointStyles=o,t.labelTextColors=a,t.dataPoints=c,c}update(e,t){const n=this,r=n.options.setContext(n.getContext()),i=n._active;let o,a=[];if(i.length){const e=Xi[r.position].call(n,i,n._eventPosition);a=n._createItems(r),n.title=n.getTitle(a,r),n.beforeBody=n.getBeforeBody(a,r),n.body=n.getBody(a,r),n.afterBody=n.getAfterBody(a,r),n.footer=n.getFooter(a,r);const t=n._size=Ji(n,r),s=Object.assign({},e,t),l=to(n._chart,r,s),c=no(r,s,l,n._chart);n.xAlign=l.xAlign,n.yAlign=l.yAlign,o={opacity:1,x:c.x,y:c.y,width:t.width,height:t.height,caretX:e.x,caretY:e.y}}else 0!==n.opacity&&(o={opacity:0});n._tooltipItems=a,n.$context=void 0,o&&n._resolveAnimations().update(n,o),e&&r.external&&r.external.call(n,{chart:n._chart,tooltip:n,replay:t})}drawCaret(e,t,n,r){const i=this.getCaretPosition(e,n,r);t.lineTo(i.x1,i.y1),t.lineTo(i.x2,i.y2),t.lineTo(i.x3,i.y3)}getCaretPosition(e,t,n){const{xAlign:r,yAlign:i}=this,{cornerRadius:o,caretSize:a}=n,{x:s,y:l}=e,{width:c,height:u}=t;let d,f,h,p,g,m;return"center"===i?(g=l+u/2,"left"===r?(d=s,f=d-a,p=g+a,m=g-a):(d=s+c,f=d+a,p=g-a,m=g+a),h=d):(f="left"===r?s+o+a:"right"===r?s+c-o-a:this.caretX,"top"===i?(p=l,g=p-a,d=f-a,h=f+a):(p=l+u,g=p+a,d=f+a,h=f-a),m=p),{x1:d,x2:f,x3:h,y1:p,y2:g,y3:m}}drawTitle(e,t,n){const r=this,i=r.title,o=i.length;let a,s,l;if(o){const c=Qt(n.rtl,r.x,r.width);for(e.x=ro(r,n.titleAlign,n),t.textAlign=c.textAlign(n.titleAlign),t.textBaseline="middle",a=at(n.titleFont),s=n.titleSpacing,t.fillStyle=n.titleColor,t.font=a.string,l=0;l<o;++l)t.fillText(i[l],c.x(e.x),e.y+a.lineHeight/2),e.y+=a.lineHeight+s,l+1===o&&(e.y+=n.titleMarginBottom-s)}}_drawColorBox(e,t,n,r,i){const o=this,a=o.labelColors[n],s=o.labelPointStyles[n],{boxHeight:l,boxWidth:c}=i,u=at(i.bodyFont),d=ro(o,"left",i),f=r.x(d),h=l<u.lineHeight?(u.lineHeight-l)/2:0,p=t.y+h;if(i.usePointStyle){const t={radius:Math.min(c,l)/2,pointStyle:s.pointStyle,rotation:s.rotation,borderWidth:1},n=r.leftForLtr(f,c)+c/2,o=p+l/2;e.strokeStyle=i.multiKeyBackground,e.fillStyle=i.multiKeyBackground,He(e,t,n,o),e.strokeStyle=a.borderColor,e.fillStyle=a.backgroundColor,He(e,t,n,o)}else{e.lineWidth=a.borderWidth||1,e.strokeStyle=a.borderColor,e.setLineDash(a.borderDash||[]),e.lineDashOffset=a.borderDashOffset||0;const t=r.leftForLtr(f,c),n=r.leftForLtr(r.xPlus(f,1),c-2),o=it(a.borderRadius);Object.values(o).some((e=>0!==e))?(e.beginPath(),e.fillStyle=i.multiKeyBackground,Ge(e,{x:t,y:p,w:c,h:l,radius:o}),e.fill(),e.stroke(),e.fillStyle=a.backgroundColor,e.beginPath(),Ge(e,{x:n,y:p+1,w:c-2,h:l-2,radius:o}),e.fill()):(e.fillStyle=i.multiKeyBackground,e.fillRect(t,p,c,l),e.strokeRect(t,p,c,l),e.fillStyle=a.backgroundColor,e.fillRect(n,p+1,c-2,l-2))}e.fillStyle=o.labelTextColors[n]}drawBody(e,t,n){const r=this,{body:i}=r,{bodySpacing:o,bodyAlign:a,displayColors:s,boxHeight:l,boxWidth:c}=n,u=at(n.bodyFont);let d=u.lineHeight,f=0;const h=Qt(n.rtl,r.x,r.width),p=function(n){t.fillText(n,h.x(e.x+f),e.y+d/2),e.y+=d+o},g=h.textAlign(a);let m,v,y,x,_,w,k;for(t.textAlign=a,t.textBaseline="middle",t.font=u.string,e.x=ro(r,g,n),t.fillStyle=n.bodyColor,b(r.beforeBody,p),f=s&&"right"!==g?"center"===a?c/2+1:c+2:0,x=0,w=i.length;x<w;++x){for(m=i[x],v=r.labelTextColors[x],t.fillStyle=v,b(m.before,p),y=m.lines,s&&y.length&&(r._drawColorBox(t,e,x,h,n),d=Math.max(u.lineHeight,l)),_=0,k=y.length;_<k;++_)p(y[_]),d=u.lineHeight;b(m.after,p)}f=0,d=u.lineHeight,b(r.afterBody,p),e.y-=o}drawFooter(e,t,n){const r=this,i=r.footer,o=i.length;let a,s;if(o){const l=Qt(n.rtl,r.x,r.width);for(e.x=ro(r,n.footerAlign,n),e.y+=n.footerMarginTop,t.textAlign=l.textAlign(n.footerAlign),t.textBaseline="middle",a=at(n.footerFont),t.fillStyle=n.footerColor,t.font=a.string,s=0;s<o;++s)t.fillText(i[s],l.x(e.x),e.y+a.lineHeight/2),e.y+=a.lineHeight+n.footerSpacing}}drawBackground(e,t,n,r){const{xAlign:i,yAlign:o}=this,{x:a,y:s}=e,{width:l,height:c}=n,u=r.cornerRadius;t.fillStyle=r.backgroundColor,t.strokeStyle=r.borderColor,t.lineWidth=r.borderWidth,t.beginPath(),t.moveTo(a+u,s),"top"===o&&this.drawCaret(e,t,n,r),t.lineTo(a+l-u,s),t.quadraticCurveTo(a+l,s,a+l,s+u),"center"===o&&"right"===i&&this.drawCaret(e,t,n,r),t.lineTo(a+l,s+c-u),t.quadraticCurveTo(a+l,s+c,a+l-u,s+c),"bottom"===o&&this.drawCaret(e,t,n,r),t.lineTo(a+u,s+c),t.quadraticCurveTo(a,s+c,a,s+c-u),"center"===o&&"left"===i&&this.drawCaret(e,t,n,r),t.lineTo(a,s+u),t.quadraticCurveTo(a,s,a+u,s),t.closePath(),t.fill(),r.borderWidth>0&&t.stroke()}_updateAnimationTarget(e){const t=this,n=t._chart,r=t.$animations,i=r&&r.x,o=r&&r.y;if(i||o){const r=Xi[e.position].call(t,t._active,t._eventPosition);if(!r)return;const a=t._size=Ji(t,e),s=Object.assign({},r,t._size),l=to(n,e,s),c=no(e,s,l,n);i._to===c.x&&o._to===c.y||(t.xAlign=l.xAlign,t.yAlign=l.yAlign,t.width=a.width,t.height=a.height,t.caretX=r.x,t.caretY=r.y,t._resolveAnimations().update(t,c))}}draw(e){const t=this,n=t.options.setContext(t.getContext());let r=t.opacity;if(!r)return;t._updateAnimationTarget(n);const i={width:t.width,height:t.height},o={x:t.x,y:t.y};r=Math.abs(r)<.001?0:r;const a=ot(n.padding),s=t.title.length||t.beforeBody.length||t.body.length||t.afterBody.length||t.footer.length;n.enabled&&s&&(e.save(),e.globalAlpha=r,t.drawBackground(o,e,i,n),Xt(e,n.textDirection),o.y+=a.top,t.drawTitle(o,e,n),t.drawBody(o,e,n),t.drawFooter(o,e,n),Kt(e,n.textDirection),e.restore())}getActiveElements(){return this._active||[]}setActiveElements(e,t){const n=this,r=n._active,i=e.map((({datasetIndex:e,index:t})=>{const r=n._chart.getDatasetMeta(e);if(!r)throw new Error("Cannot find a dataset at index "+e);return{datasetIndex:e,element:r.data[t],index:t}})),o=!y(r,i),a=n._positionChanged(i,t);(o||a)&&(n._active=i,n._eventPosition=t,n.update(!0))}handleEvent(e,t){const n=this,r=n.options,i=n._active||[];let o=!1,a=[];"mouseout"!==e.type&&(a=n._chart.getElementsAtEventForMode(e,r.mode,r,t),r.reverse&&a.reverse());const s=n._positionChanged(a,e);return o=t||!y(a,i)||s,o&&(n._active=a,(r.enabled||r.external)&&(n._eventPosition={x:e.x,y:e.y},n.update(!0,t))),o}_positionChanged(e,t){const{caretX:n,caretY:r,options:i}=this,o=Xi[i.position].call(this,e,t);return!1!==o&&(n!==o.x||r!==o.y)}}ao.positioners=Xi;var so={id:"tooltip",_element:ao,positioners:Xi,afterInit(e,t,n){n&&(e.tooltip=new ao({_chart:e,options:n}))},beforeUpdate(e,t,n){e.tooltip&&e.tooltip.initialize(n)},reset(e,t,n){e.tooltip&&e.tooltip.initialize(n)},afterDraw(e){const t=e.tooltip,n={tooltip:t};!1!==e.notifyPlugins("beforeTooltipDraw",n)&&(t&&t.draw(e.ctx),e.notifyPlugins("afterTooltipDraw",n))},afterEvent(e,t){if(e.tooltip){const n=t.replay;e.tooltip.handleEvent(t.event,n)&&(t.changed=!0)}},defaults:{enabled:!0,external:null,position:"average",backgroundColor:"rgba(0,0,0,0.8)",titleColor:"#fff",titleFont:{weight:"bold"},titleSpacing:2,titleMarginBottom:6,titleAlign:"left",bodyColor:"#fff",bodySpacing:2,bodyFont:{},bodyAlign:"left",footerColor:"#fff",footerSpacing:2,footerMarginTop:6,footerFont:{weight:"bold"},footerAlign:"left",padding:6,caretPadding:2,caretSize:5,cornerRadius:6,boxHeight:(e,t)=>t.bodyFont.size,boxWidth:(e,t)=>t.bodyFont.size,multiKeyBackground:"#fff",displayColors:!0,borderColor:"rgba(0,0,0,0)",borderWidth:0,animation:{duration:400,easing:"easeOutQuart"},animations:{numbers:{type:"number",properties:["x","y","width","height","caretX","caretY"]},opacity:{easing:"linear",duration:200}},callbacks:{beforeTitle:l,title(e){if(e.length>0){const t=e[0],n=t.chart.data.labels,r=n?n.length:0;if(this&&this.options&&"dataset"===this.options.mode)return t.dataset.label||"";if(t.label)return t.label;if(r>0&&t.dataIndex<r)return n[t.dataIndex]}return""},afterTitle:l,beforeBody:l,beforeLabel:l,label(e){if(this&&this.options&&"dataset"===this.options.mode)return e.label+": "+e.formattedValue||e.formattedValue;let t=e.dataset.label||"";t&&(t+=": ");const n=e.formattedValue;return u(n)||(t+=n),t},labelColor(e){const t=e.chart.getDatasetMeta(e.datasetIndex).controller.getStyle(e.dataIndex);return{borderColor:t.borderColor,backgroundColor:t.backgroundColor,borderWidth:t.borderWidth,borderDash:t.borderDash,borderDashOffset:t.borderDashOffset,borderRadius:0}},labelTextColor(){return this.options.bodyColor},labelPointStyle(e){const t=e.chart.getDatasetMeta(e.datasetIndex).controller.getStyle(e.dataIndex);return{pointStyle:t.pointStyle,rotation:t.rotation}},afterLabel:l,afterBody:l,beforeFooter:l,footer:l,afterFooter:l}},defaultRoutes:{bodyFont:"font",footerFont:"font",titleFont:"font"},descriptors:{_scriptable:e=>"filter"!==e&&"itemSort"!==e&&"external"!==e,_indexable:!1,callbacks:{_scriptable:!1,_indexable:!1},animation:{_fallback:!1},animations:{_fallback:"animation"}},additionalOptionScopes:["interaction"]},lo=Object.freeze({__proto__:null,Decimation:Ei,Filler:Vi,Legend:Hi,SubTitle:Qi,Title:Yi,Tooltip:so});class co extends Mr{constructor(e){super(e),this._startValue=void 0,this._valueRange=0}parse(e,t){if(u(e))return null;const n=this.getLabels();return((e,t)=>null===e?null:G(Math.round(e),0,t))(t=isFinite(t)&&n[t]===e?t:function(e,t,n){const r=e.indexOf(t);return-1===r?((e,t,n)=>"string"==typeof t?e.push(t)-1:isNaN(t)?null:n)(e,t,n):r!==e.lastIndexOf(t)?n:r}(n,e,g(t,e)),n.length-1)}determineDataLimits(){const e=this,{minDefined:t,maxDefined:n}=e.getUserBounds();let{min:r,max:i}=e.getMinMax(!0);"ticks"===e.options.bounds&&(t||(r=0),n||(i=e.getLabels().length-1)),e.min=r,e.max=i}buildTicks(){const e=this,t=e.min,n=e.max,r=e.options.offset,i=[];let o=e.getLabels();o=0===t&&n===o.length-1?o:o.slice(t,n+1),e._valueRange=Math.max(o.length-(r?0:1),1),e._startValue=e.min-(r?.5:0);for(let e=t;e<=n;e++)i.push({value:e});return i}getLabelForValue(e){const t=this.getLabels();return e>=0&&e<t.length?t[e]:e}configure(){const e=this;super.configure(),e.isHorizontal()||(e._reversePixels=!e._reversePixels)}getPixelForValue(e){const t=this;return"number"!=typeof e&&(e=t.parse(e)),null===e?NaN:t.getPixelForDecimal((e-t._startValue)/t._valueRange)}getPixelForTick(e){const t=this.ticks;return e<0||e>t.length-1?null:this.getPixelForValue(t[e].value)}getValueForPixel(e){const t=this;return Math.round(t._startValue+t.getDecimalForPixel(e)*t._valueRange)}getBasePixel(){return this.bottom}}function uo(e,t,{horizontal:n,minRotation:r}){const i=$(r),o=(n?Math.sin(i):Math.cos(i))||.001,a=.75*t*(""+e).length;return Math.min(t/o,a)}co.id="category",co.defaults={ticks:{callback:co.prototype.getLabelForValue}};class fo extends Mr{constructor(e){super(e),this.start=void 0,this.end=void 0,this._startValue=void 0,this._endValue=void 0,this._valueRange=0}parse(e,t){return u(e)||("number"==typeof e||e instanceof Number)&&!isFinite(+e)?null:+e}handleTickRangeOptions(){const e=this,{beginAtZero:t}=e.options,{minDefined:n,maxDefined:r}=e.getUserBounds();let{min:i,max:o}=e;const a=e=>i=n?i:e,s=e=>o=r?o:e;if(t){const e=B(i),t=B(o);e<0&&t<0?s(0):e>0&&t>0&&a(0)}i===o&&(s(o+1),t||a(i-1)),e.min=i,e.max=o}getTickLimit(){const e=this,t=e.options.ticks;let n,{maxTicksLimit:r,stepSize:i}=t;return i?n=Math.ceil(e.max/i)-Math.floor(e.min/i)+1:(n=e.computeTickLimit(),r=r||11),r&&(n=Math.min(r,n)),n}computeTickLimit(){return Number.POSITIVE_INFINITY}buildTicks(){const e=this,t=e.options,n=t.ticks;let r=e.getTickLimit();r=Math.max(2,r);const i=function(e,t){const n=[],{bounds:r,step:i,min:o,max:a,precision:s,count:l,maxTicks:c,maxDigits:d,includeBounds:f}=e,h=i||1,p=c-1,{min:g,max:m}=t,v=!u(o),b=!u(a),y=!u(l),x=(m-g)/(d+1);let _,w,k,S,E=V((m-g)/p/h)*h;if(E<1e-14&&!v&&!b)return[{value:g},{value:m}];S=Math.ceil(m/E)-Math.floor(g/E),S>p&&(E=V(S*E/p/h)*h),u(s)||(_=Math.pow(10,s),E=Math.ceil(E*_)/_),"ticks"===r?(w=Math.floor(g/E)*E,k=Math.ceil(m/E)*E):(w=g,k=m),v&&b&&i&&function(e,t){const n=Math.round(e);return n-t<=e&&n+t>=e}((a-o)/i,E/1e3)?(S=Math.round(Math.min((a-o)/E,c)),E=(a-o)/S,w=o,k=a):y?(w=v?o:w,k=b?a:k,S=l-1,E=(k-w)/S):(S=(k-w)/E,S=U(S,Math.round(S),E/1e3)?Math.round(S):Math.ceil(S));const M=Math.max(q(E),q(w));_=Math.pow(10,u(s)?M:s),w=Math.round(w*_)/_,k=Math.round(k*_)/_;let C=0;for(v&&(f&&w!==o?(n.push({value:o}),w<o&&C++,U(Math.round((w+C*E)*_)/_,o,uo(o,x,e))&&C++):w<o&&C++);C<S;++C)n.push({value:Math.round((w+C*E)*_)/_});return b&&f&&k!==a?U(n[n.length-1].value,a,uo(a,x,e))?n[n.length-1].value=a:n.push({value:a}):b&&k!==a||n.push({value:k}),n}({maxTicks:r,bounds:t.bounds,min:t.min,max:t.max,precision:n.precision,step:n.stepSize,count:n.count,maxDigits:e._maxDigits(),horizontal:e.isHorizontal(),minRotation:n.minRotation||0,includeBounds:!1!==n.includeBounds},e._range||e);return"ticks"===t.bounds&&H(i,e,"value"),t.reverse?(i.reverse(),e.start=e.max,e.end=e.min):(e.start=e.min,e.end=e.max),i}configure(){const e=this,t=e.ticks;let n=e.min,r=e.max;if(super.configure(),e.options.offset&&t.length){const e=(r-n)/Math.max(t.length-1,1)/2;n-=e,r+=e}e._startValue=n,e._endValue=r,e._valueRange=r-n}getLabelForValue(e){return qt(e,this.chart.options.locale)}}class ho extends fo{determineDataLimits(){const e=this,{min:t,max:n}=e.getMinMax(!0);e.min=h(t)?t:0,e.max=h(n)?n:1,e.handleTickRangeOptions()}computeTickLimit(){const e=this,t=e.isHorizontal(),n=t?e.width:e.height,r=$(e.options.ticks.minRotation),i=(t?Math.sin(r):Math.cos(r))||.001,o=e._resolveTickFontOptions(0);return Math.ceil(n/Math.min(40,o.lineHeight/i))}getPixelForValue(e){return null===e?NaN:this.getPixelForDecimal((e-this._startValue)/this._valueRange)}getValueForPixel(e){return this._startValue+this.getDecimalForPixel(e)*this._valueRange}}function po(e){return 1==e/Math.pow(10,Math.floor(I(e)))}ho.id="linear",ho.defaults={ticks:{callback:br.formatters.numeric}};class go extends Mr{constructor(e){super(e),this.start=void 0,this.end=void 0,this._startValue=void 0,this._valueRange=0}parse(e,t){const n=fo.prototype.parse.apply(this,[e,t]);if(0!==n)return h(n)&&n>0?n:null;this._zero=!0}determineDataLimits(){const e=this,{min:t,max:n}=e.getMinMax(!0);e.min=h(t)?Math.max(0,t):null,e.max=h(n)?Math.max(0,n):null,e.options.beginAtZero&&(e._zero=!0),e.handleTickRangeOptions()}handleTickRangeOptions(){const e=this,{minDefined:t,maxDefined:n}=e.getUserBounds();let r=e.min,i=e.max;const o=e=>r=t?r:e,a=e=>i=n?i:e,s=(e,t)=>Math.pow(10,Math.floor(I(e))+t);r===i&&(r<=0?(o(1),a(10)):(o(s(r,-1)),a(s(i,1)))),r<=0&&o(s(i,-1)),i<=0&&a(s(r,1)),e._zero&&e.min!==e._suggestedMin&&r===s(e.min,0)&&o(s(r,-1)),e.min=r,e.max=i}buildTicks(){const e=this,t=e.options,n=function(e,t){const n=Math.floor(I(t.max)),r=Math.ceil(t.max/Math.pow(10,n)),i=[];let o=p(e.min,Math.pow(10,Math.floor(I(t.min)))),a=Math.floor(I(o)),s=Math.floor(o/Math.pow(10,a)),l=a<0?Math.pow(10,Math.abs(a)):1;do{i.push({value:o,major:po(o)}),++s,10===s&&(s=1,++a,l=a>=0?1:l),o=Math.round(s*Math.pow(10,a)*l)/l}while(a<n||a===n&&s<r);const c=p(e.max,o);return i.push({value:c,major:po(o)}),i}({min:e._userMin,max:e._userMax},e);return"ticks"===t.bounds&&H(n,e,"value"),t.reverse?(n.reverse(),e.start=e.max,e.end=e.min):(e.start=e.min,e.end=e.max),n}getLabelForValue(e){return void 0===e?"0":qt(e,this.chart.options.locale)}configure(){const e=this,t=e.min;super.configure(),e._startValue=I(t),e._valueRange=I(e.max)-I(t)}getPixelForValue(e){const t=this;return void 0!==e&&0!==e||(e=t.min),null===e||isNaN(e)?NaN:t.getPixelForDecimal(e===t.min?0:(I(e)-t._startValue)/t._valueRange)}getValueForPixel(e){const t=this,n=t.getDecimalForPixel(e);return Math.pow(10,t._startValue+n*t._valueRange)}}function mo(e){const t=e.ticks;if(t.display&&e.display){const e=ot(t.backdropPadding);return g(t.font&&t.font.size,Ie.font.size)+e.height}return 0}function vo(e,t,n,r,i){return e===r||e===i?{start:t-n/2,end:t+n/2}:e<r||e>i?{start:t-n,end:t}:{start:t,end:t+n}}function bo(e){return 0===e||180===e?"center":e<180?"left":"right"}function yo(e,t,n){return 90===n||270===n?e-=t/2:(n>270||n<90)&&(e-=t),e}function xo(e,t,n,r){const{ctx:i}=e;if(n)i.arc(e.xCenter,e.yCenter,t,0,L);else{let n=e.getPointPosition(0,t);i.moveTo(n.x,n.y);for(let o=1;o<r;o++)n=e.getPointPosition(o,t),i.lineTo(n.x,n.y)}}function _o(e){return W(e)?e:0}go.id="logarithmic",go.defaults={ticks:{callback:br.formatters.logarithmic,major:{enabled:!0}}};class wo extends fo{constructor(e){super(e),this.xCenter=void 0,this.yCenter=void 0,this.drawingArea=void 0,this._pointLabels=[],this._pointLabelItems=[]}setDimensions(){const e=this;e.width=e.maxWidth,e.height=e.maxHeight,e.paddingTop=mo(e.options)/2,e.xCenter=Math.floor(e.width/2),e.yCenter=Math.floor((e.height-e.paddingTop)/2),e.drawingArea=Math.min(e.height-e.paddingTop,e.width)/2}determineDataLimits(){const e=this,{min:t,max:n}=e.getMinMax(!1);e.min=h(t)&&!isNaN(t)?t:0,e.max=h(n)&&!isNaN(n)?n:0,e.handleTickRangeOptions()}computeTickLimit(){return Math.ceil(this.drawingArea/mo(this.options))}generateTickLabels(e){const t=this;fo.prototype.generateTickLabels.call(t,e),t._pointLabels=t.getLabels().map(((e,n)=>{const r=v(t.options.pointLabels.callback,[e,n],t);return r||0===r?r:""}))}fit(){const e=this,t=e.options;t.display&&t.pointLabels.display?function(e){const t={l:0,r:e.width,t:0,b:e.height-e.paddingTop},n={},r=[],i=[],o=e.getLabels().length;for(let c=0;c<o;c++){const o=e.options.pointLabels.setContext(e.getContext(c));i[c]=o.padding;const u=e.getPointPosition(c,e.drawingArea+i[c]),f=at(o.font),h=(a=e.ctx,s=f,l=d(l=e._pointLabels[c])?l:[l],{w:Ve(a,s.string,l),h:l.length*s.lineHeight});r[c]=h;const p=e.getIndexAngle(c),g=Y(p),m=vo(g,u.x,h.w,0,180),v=vo(g,u.y,h.h,90,270);m.start<t.l&&(t.l=m.start,n.l=p),m.end>t.r&&(t.r=m.end,n.r=p),v.start<t.t&&(t.t=v.start,n.t=p),v.end>t.b&&(t.b=v.end,n.b=p)}var a,s,l;e._setReductions(e.drawingArea,t,n),e._pointLabelItems=function(e,t,n){const r=[],i=e.getLabels().length,o=e.options,a=mo(o),s=e.getDistanceFromCenterForValue(o.ticks.reverse?e.min:e.max);for(let o=0;o<i;o++){const i=0===o?a/2:0,d=e.getPointPosition(o,s+i+n[o]),f=Y(e.getIndexAngle(o)),h=t[o],p=yo(d.y,h.h,f),g=bo(f),m=(l=d.x,c=h.w,"right"===(u=g)?l-=c:"center"===u&&(l-=c/2),l);r.push({x:d.x,y:p,textAlign:g,left:m,top:p,right:m+h.w,bottom:p+h.h})}var l,c,u;return r}(e,r,i)}(e):e.setCenterPoint(0,0,0,0)}_setReductions(e,t,n){const r=this;let i=t.l/Math.sin(n.l),o=Math.max(t.r-r.width,0)/Math.sin(n.r),a=-t.t/Math.cos(n.t),s=-Math.max(t.b-(r.height-r.paddingTop),0)/Math.cos(n.b);i=_o(i),o=_o(o),a=_o(a),s=_o(s),r.drawingArea=Math.max(e/2,Math.min(Math.floor(e-(i+o)/2),Math.floor(e-(a+s)/2))),r.setCenterPoint(i,o,a,s)}setCenterPoint(e,t,n,r){const i=this,o=i.width-t-i.drawingArea,a=e+i.drawingArea,s=n+i.drawingArea,l=i.height-i.paddingTop-r-i.drawingArea;i.xCenter=Math.floor((a+o)/2+i.left),i.yCenter=Math.floor((s+l)/2+i.top+i.paddingTop)}getIndexAngle(e){return K(e*(L/this.getLabels().length)+$(this.options.startAngle||0))}getDistanceFromCenterForValue(e){const t=this;if(u(e))return NaN;const n=t.drawingArea/(t.max-t.min);return t.options.reverse?(t.max-e)*n:(e-t.min)*n}getValueForDistanceFromCenter(e){if(u(e))return NaN;const t=this,n=e/(t.drawingArea/(t.max-t.min));return t.options.reverse?t.max-n:t.min+n}getPointPosition(e,t){const n=this,r=n.getIndexAngle(e)-N;return{x:Math.cos(r)*t+n.xCenter,y:Math.sin(r)*t+n.yCenter,angle:r}}getPointPositionForValue(e,t){return this.getPointPosition(e,this.getDistanceFromCenterForValue(t))}getBasePosition(e){return this.getPointPositionForValue(e||0,this.getBaseValue())}getPointLabelPosition(e){const{left:t,top:n,right:r,bottom:i}=this._pointLabelItems[e];return{left:t,top:n,right:r,bottom:i}}drawBackground(){const e=this,{backgroundColor:t,grid:{circular:n}}=e.options;if(t){const r=e.ctx;r.save(),r.beginPath(),xo(e,e.getDistanceFromCenterForValue(e._endValue),n,e.getLabels().length),r.closePath(),r.fillStyle=t,r.fill(),r.restore()}}drawGrid(){const e=this,t=e.ctx,n=e.options,{angleLines:r,grid:i}=n,o=e.getLabels().length;let a,s,l;if(n.pointLabels.display&&function(e,t){const{ctx:n,options:{pointLabels:r}}=e;for(let i=t-1;i>=0;i--){const t=r.setContext(e.getContext(i)),o=at(t.font),{x:a,y:s,textAlign:l,left:c,top:d,right:f,bottom:h}=e._pointLabelItems[i],{backdropColor:p}=t;if(!u(p)){const e=ot(t.backdropPadding);n.fillStyle=p,n.fillRect(c-e.left,d-e.top,f-c+e.width,h-d+e.height)}Ke(n,e._pointLabels[i],a,s+o.lineHeight/2,o,{color:t.color,textAlign:l,textBaseline:"middle"})}}(e,o),i.display&&e.ticks.forEach(((t,n)=>{if(0!==n){s=e.getDistanceFromCenterForValue(t.value);const r=i.setContext(e.getContext(n-1));!function(e,t,n,r){const i=e.ctx,o=t.circular,{color:a,lineWidth:s}=t;!o&&!r||!a||!s||n<0||(i.save(),i.strokeStyle=a,i.lineWidth=s,i.setLineDash(t.borderDash),i.lineDashOffset=t.borderDashOffset,i.beginPath(),xo(e,n,o,r),i.closePath(),i.stroke(),i.restore())}(e,r,s,o)}})),r.display){for(t.save(),a=e.getLabels().length-1;a>=0;a--){const i=r.setContext(e.getContext(a)),{color:o,lineWidth:c}=i;c&&o&&(t.lineWidth=c,t.strokeStyle=o,t.setLineDash(i.borderDash),t.lineDashOffset=i.borderDashOffset,s=e.getDistanceFromCenterForValue(n.ticks.reverse?e.min:e.max),l=e.getPointPosition(a,s),t.beginPath(),t.moveTo(e.xCenter,e.yCenter),t.lineTo(l.x,l.y),t.stroke())}t.restore()}}drawBorder(){}drawLabels(){const e=this,t=e.ctx,n=e.options,r=n.ticks;if(!r.display)return;const i=e.getIndexAngle(0);let o,a;t.save(),t.translate(e.xCenter,e.yCenter),t.rotate(i),t.textAlign="center",t.textBaseline="middle",e.ticks.forEach(((i,s)=>{if(0===s&&!n.reverse)return;const l=r.setContext(e.getContext(s)),c=at(l.font);if(o=e.getDistanceFromCenterForValue(e.ticks[s].value),l.showLabelBackdrop){t.font=c.string,a=t.measureText(i.label).width,t.fillStyle=l.backdropColor;const e=ot(l.backdropPadding);t.fillRect(-a/2-e.left,-o-c.size/2-e.top,a+e.width,c.size+e.height)}Ke(t,i.label,0,-o,c,{color:l.color})})),t.restore()}drawTitle(){}}wo.id="radialLinear",wo.defaults={display:!0,animate:!0,position:"chartArea",angleLines:{display:!0,lineWidth:1,borderDash:[],borderDashOffset:0},grid:{circular:!1},startAngle:0,ticks:{showLabelBackdrop:!0,callback:br.formatters.numeric},pointLabels:{backdropColor:void 0,backdropPadding:2,display:!0,font:{size:10},callback:e=>e,padding:5}},wo.defaultRoutes={"angleLines.color":"borderColor","pointLabels.color":"color","ticks.color":"color"},wo.descriptors={angleLines:{_fallback:"grid"}};const ko={millisecond:{common:!0,size:1,steps:1e3},second:{common:!0,size:1e3,steps:60},minute:{common:!0,size:6e4,steps:60},hour:{common:!0,size:36e5,steps:24},day:{common:!0,size:864e5,steps:30},week:{common:!1,size:6048e5,steps:4},month:{common:!0,size:2628e6,steps:12},quarter:{common:!1,size:7884e6,steps:4},year:{common:!0,size:3154e7}},So=Object.keys(ko);function Eo(e,t){return e-t}function Mo(e,t){if(u(t))return null;const n=e._adapter,{parser:r,round:i,isoWeekday:o}=e._parseOpts;let a=t;return"function"==typeof r&&(a=r(a)),h(a)||(a="string"==typeof r?n.parse(a,r):n.parse(a)),null===a?null:(i&&(a="week"!==i||!W(o)&&!0!==o?n.startOf(a,i):n.startOf(a,"isoWeek",o)),+a)}function Co(e,t,n,r){const i=So.length;for(let o=So.indexOf(e);o<i-1;++o){const e=ko[So[o]],i=e.steps?e.steps:Number.MAX_SAFE_INTEGER;if(e.common&&Math.ceil((n-t)/(i*e.size))<=r)return So[o]}return So[i-1]}function Po(e,t,n){if(n){if(n.length){const{lo:r,hi:i}=lt(n,t);e[n[r]>=t?n[r]:n[i]]=!0}}else e[t]=!0}function Oo(e,t,n){const r=[],i={},o=t.length;let a,s;for(a=0;a<o;++a)s=t[a],i[s]=a,r.push({value:s,major:!1});return 0!==o&&n?function(e,t,n,r){const i=e._adapter,o=+i.startOf(t[0].value,r),a=t[t.length-1].value;let s,l;for(s=o;s<=a;s=+i.add(s,1,r))l=n[s],l>=0&&(t[l].major=!0);return t}(e,r,i,n):r}class To extends Mr{constructor(e){super(e),this._cache={data:[],labels:[],all:[]},this._unit="day",this._majorUnit=void 0,this._offsets={},this._normalized=!1,this._parseOpts=void 0}init(e,t){const n=e.time||(e.time={}),r=this._adapter=new Nn._date(e.adapters.date);S(n.displayFormats,r.formats()),this._parseOpts={parser:n.parser,round:n.round,isoWeekday:n.isoWeekday},super.init(e),this._normalized=t.normalized}parse(e,t){return void 0===e?null:Mo(this,e)}beforeLayout(){super.beforeLayout(),this._cache={data:[],labels:[],all:[]}}determineDataLimits(){const e=this,t=e.options,n=e._adapter,r=t.time.unit||"day";let{min:i,max:o,minDefined:a,maxDefined:s}=e.getUserBounds();function l(e){a||isNaN(e.min)||(i=Math.min(i,e.min)),s||isNaN(e.max)||(o=Math.max(o,e.max))}a&&s||(l(e._getLabelBounds()),"ticks"===t.bounds&&"labels"===t.ticks.source||l(e.getMinMax(!1))),i=h(i)&&!isNaN(i)?i:+n.startOf(Date.now(),r),o=h(o)&&!isNaN(o)?o:+n.endOf(Date.now(),r)+1,e.min=Math.min(i,o-1),e.max=Math.max(i+1,o)}_getLabelBounds(){const e=this.getLabelTimestamps();let t=Number.POSITIVE_INFINITY,n=Number.NEGATIVE_INFINITY;return e.length&&(t=e[0],n=e[e.length-1]),{min:t,max:n}}buildTicks(){const e=this,t=e.options,n=t.time,r=t.ticks,i="labels"===r.source?e.getLabelTimestamps():e._generate();"ticks"===t.bounds&&i.length&&(e.min=e._userMin||i[0],e.max=e._userMax||i[i.length-1]);const o=e.min,a=function(e,t,n){let r=0,i=e.length;for(;r<i&&e[r]<t;)r++;for(;i>r&&e[i-1]>n;)i--;return r>0||i<e.length?e.slice(r,i):e}(i,o,e.max);return e._unit=n.unit||(r.autoSkip?Co(n.minUnit,e.min,e.max,e._getLabelCapacity(o)):function(e,t,n,r,i){for(let o=So.length-1;o>=So.indexOf(n);o--){const n=So[o];if(ko[n].common&&e._adapter.diff(i,r,n)>=t-1)return n}return So[n?So.indexOf(n):0]}(e,a.length,n.minUnit,e.min,e.max)),e._majorUnit=r.major.enabled&&"year"!==e._unit?function(e){for(let t=So.indexOf(e)+1,n=So.length;t<n;++t)if(ko[So[t]].common)return So[t]}(e._unit):void 0,e.initOffsets(i),t.reverse&&a.reverse(),Oo(e,a,e._majorUnit)}initOffsets(e){const t=this;let n,r,i=0,o=0;t.options.offset&&e.length&&(n=t.getDecimalForValue(e[0]),i=1===e.length?1-n:(t.getDecimalForValue(e[1])-n)/2,r=t.getDecimalForValue(e[e.length-1]),o=1===e.length?r:(r-t.getDecimalForValue(e[e.length-2]))/2);const a=e.length<3?.5:.25;i=G(i,0,a),o=G(o,0,a),t._offsets={start:i,end:o,factor:1/(i+1+o)}}_generate(){const e=this,t=e._adapter,n=e.min,r=e.max,i=e.options,o=i.time,a=o.unit||Co(o.minUnit,n,r,e._getLabelCapacity(n)),s=g(o.stepSize,1),l="week"===a&&o.isoWeekday,c=W(l)||!0===l,u={};let d,f,h=n;if(c&&(h=+t.startOf(h,"isoWeek",l)),h=+t.startOf(h,c?"day":a),t.diff(r,n,a)>1e5*s)throw new Error(n+" and "+r+" are too far apart with stepSize of "+s+" "+a);const p="data"===i.ticks.source&&e.getDataTimestamps();for(d=h,f=0;d<r;d=+t.add(d,s,a),f++)Po(u,d,p);return d!==r&&"ticks"!==i.bounds&&1!==f||Po(u,d,p),Object.keys(u).sort(((e,t)=>e-t)).map((e=>+e))}getLabelForValue(e){const t=this._adapter,n=this.options.time;return n.tooltipFormat?t.format(e,n.tooltipFormat):t.format(e,n.displayFormats.datetime)}_tickFormatFunction(e,t,n,r){const i=this,o=i.options,a=o.time.displayFormats,s=i._unit,l=i._majorUnit,c=s&&a[s],u=l&&a[l],d=n[t],f=l&&u&&d&&d.major,h=i._adapter.format(e,r||(f?u:c)),p=o.ticks.callback;return p?v(p,[h,t,n],i):h}generateTickLabels(e){let t,n,r;for(t=0,n=e.length;t<n;++t)r=e[t],r.label=this._tickFormatFunction(r.value,t,e)}getDecimalForValue(e){const t=this;return null===e?NaN:(e-t.min)/(t.max-t.min)}getPixelForValue(e){const t=this,n=t._offsets,r=t.getDecimalForValue(e);return t.getPixelForDecimal((n.start+r)*n.factor)}getValueForPixel(e){const t=this,n=t._offsets,r=t.getDecimalForPixel(e)/n.factor-n.end;return t.min+r*(t.max-t.min)}_getLabelSize(e){const t=this,n=t.options.ticks,r=t.ctx.measureText(e).width,i=$(t.isHorizontal()?n.maxRotation:n.minRotation),o=Math.cos(i),a=Math.sin(i),s=t._resolveTickFontOptions(0).size;return{w:r*o+s*a,h:r*a+s*o}}_getLabelCapacity(e){const t=this,n=t.options.time,r=n.displayFormats,i=r[n.unit]||r.millisecond,o=t._tickFormatFunction(e,0,Oo(t,[e],t._majorUnit),i),a=t._getLabelSize(o),s=Math.floor(t.isHorizontal()?t.width/a.w:t.height/a.h)-1;return s>0?s:1}getDataTimestamps(){const e=this;let t,n,r=e._cache.data||[];if(r.length)return r;const i=e.getMatchingVisibleMetas();if(e._normalized&&i.length)return e._cache.data=i[0].controller.getAllParsedValues(e);for(t=0,n=i.length;t<n;++t)r=r.concat(i[t].controller.getAllParsedValues(e));return e._cache.data=e.normalize(r)}getLabelTimestamps(){const e=this,t=e._cache.labels||[];let n,r;if(t.length)return t;const i=e.getLabels();for(n=0,r=i.length;n<r;++n)t.push(Mo(e,i[n]));return e._cache.labels=e._normalized?t:e.normalize(t)}normalize(e){return ht(e.sort(Eo))}}function Do(e,t,n){let r,i,o,a,s=0,l=e.length-1;n?(t>=e[s].pos&&t<=e[l].pos&&({lo:s,hi:l}=ct(e,"pos",t)),({pos:r,time:o}=e[s]),({pos:i,time:a}=e[l])):(t>=e[s].time&&t<=e[l].time&&({lo:s,hi:l}=ct(e,"time",t)),({time:r,pos:o}=e[s]),({time:i,pos:a}=e[l]));const c=i-r;return c?o+(a-o)*(t-r)/c:o}To.id="time",To.defaults={bounds:"data",adapters:{},time:{parser:!1,unit:!1,round:!1,isoWeekday:!1,minUnit:"millisecond",displayFormats:{}},ticks:{source:"auto",major:{enabled:!1}}};class Lo extends To{constructor(e){super(e),this._table=[],this._minPos=void 0,this._tableRange=void 0}initOffsets(){const e=this,t=e._getTimestampsForTable(),n=e._table=e.buildLookupTable(t);e._minPos=Do(n,e.min),e._tableRange=Do(n,e.max)-e._minPos,super.initOffsets(t)}buildLookupTable(e){const{min:t,max:n}=this,r=[],i=[];let o,a,s,l,c;for(o=0,a=e.length;o<a;++o)l=e[o],l>=t&&l<=n&&r.push(l);if(r.length<2)return[{time:t,pos:0},{time:n,pos:1}];for(o=0,a=r.length;o<a;++o)c=r[o+1],s=r[o-1],l=r[o],Math.round((c+s)/2)!==l&&i.push({time:l,pos:o/(a-1)});return i}_getTimestampsForTable(){const e=this;let t=e._cache.all||[];if(t.length)return t;const n=e.getDataTimestamps(),r=e.getLabelTimestamps();return t=n.length&&r.length?e.normalize(n.concat(r)):n.length?n:r,t=e._cache.all=t,t}getDecimalForValue(e){return(Do(this._table,e)-this._minPos)/this._tableRange}getValueForPixel(e){const t=this,n=t._offsets,r=t.getDecimalForPixel(e)/n.factor-n.end;return Do(t._table,r*t._tableRange+t._minPos,!0)}}Lo.id="timeseries",Lo.defaults=To.defaults;const jo=[jn,wi,lo,Object.freeze({__proto__:null,CategoryScale:co,LinearScale:ho,LogarithmicScale:go,RadialLinearScale:wo,TimeScale:To,TimeSeriesScale:Lo})];Zr.register(...jo);const Ao=Zr;var Ro=n(2492),No=n.n(Ro),zo=n(8583),Fo=n.n(zo),Io=n(3311),Bo=n.n(Io);function Vo(){return(Vo=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function Wo(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}var Uo=(0,r.forwardRef)((function(e,t){var n=e.id,i=e.className,o=e.height,a=void 0===o?150:o,s=e.width,l=void 0===s?300:s,c=e.redraw,u=void 0!==c&&c,d=e.type,f=e.data,h=e.options,p=void 0===h?{}:h,g=e.plugins,m=void 0===g?[]:g,v=e.getDatasetAtEvent,b=e.getElementAtEvent,y=e.getElementsAtEvent,x=e.fallbackContent,_=Wo(e,["id","className","height","width","redraw","type","data","options","plugins","getDatasetAtEvent","getElementAtEvent","getElementsAtEvent","fallbackContent"]),w=(0,r.useRef)(null),k=(0,r.useMemo)((function(){return"function"==typeof f?w.current?f(w.current):{}:No()({},f)}),[f,w.current]),S=(0,r.useState)(),E=S[0],M=S[1];(0,r.useImperativeHandle)(t,(function(){return E}),[E]);var C=function(){w.current&&M(new Ao(w.current,{type:d,data:k,options:p,plugins:m}))},P=function(){E&&E.destroy()};return(0,r.useEffect)((function(){return C(),function(){return P()}}),[]),(0,r.useEffect)((function(){u?(P(),setTimeout((function(){C()}),0)):function(){if(E){if(p&&(E.options=Vo({},p)),!E.config.data)return E.config.data=k,void E.update();var e=k.datasets,t=void 0===e?[]:e,n=Wo(k,["datasets"]),r=E.config.data.datasets,i=void 0===r?[]:r;Fo()(E.config.data,n),E.config.data.datasets=t.map((function(e){var t=Bo()(i,(function(t){return t.label===e.label&&t.type===e.type}));return t&&e.data?(t.data?t.data.length=e.data.length:t.data=[],Fo()(t.data,e.data),Vo({},t,e,{data:t.data})):e})),E.update()}}()}),[e,k]),r.createElement("canvas",Object.assign({},_,{height:a,width:l,ref:w,id:n,className:i,onClick:function(e){E&&(v&&v(E.getElementsAtEventForMode(e,"dataset",{intersect:!0},!1),e),b&&b(E.getElementsAtEventForMode(e,"nearest",{intersect:!0},!1),e),y&&y(E.getElementsAtEventForMode(e,"index",{intersect:!0},!1),e))},"data-testid":"canvas",role:"img"}),x)})),Ho=((0,r.forwardRef)((function(e,t){return r.createElement(Uo,Object.assign({},e,{type:"line",ref:t,options:e.options||{}}))})),(0,r.forwardRef)((function(e,t){return r.createElement(Uo,Object.assign({},e,{type:"bar",ref:t,options:e.options||{}}))})),(0,r.forwardRef)((function(e,t){return r.createElement(Uo,Object.assign({},e,{type:"radar",ref:t,options:e.options||{}}))}))),$o=(0,r.forwardRef)((function(e,t){return r.createElement(Uo,Object.assign({},e,{type:"doughnut",ref:t,options:e.options||{}}))}));(0,r.forwardRef)((function(e,t){return r.createElement(Uo,Object.assign({},e,{type:"polarArea",ref:t,options:e.options||{}}))})),(0,r.forwardRef)((function(e,t){return r.createElement(Uo,Object.assign({},e,{type:"bubble",ref:t,options:e.options||{}}))})),(0,r.forwardRef)((function(e,t){return r.createElement(Uo,Object.assign({},e,{type:"pie",ref:t,options:e.options||{}}))})),(0,r.forwardRef)((function(e,t){return r.createElement(Uo,Object.assign({},e,{type:"scatter",ref:t,options:e.options||{}}))}))},4448:(e,t,n)=>{"use strict";var r=n(7294),i=n(7418),o=n(3840);function a(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}if(!r)throw Error(a(227));var s=new Set,l={};function c(e,t){u(e,t),u(e+"Capture",t)}function u(e,t){for(l[e]=t,e=0;e<t.length;e++)s.add(t[e])}var d=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),f=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,h=Object.prototype.hasOwnProperty,p={},g={};function m(e,t,n,r,i,o,a){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=i,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=o,this.removeEmptyString=a}var v={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){v[e]=new m(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];v[t]=new m(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){v[e]=new m(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){v[e]=new m(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){v[e]=new m(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){v[e]=new m(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){v[e]=new m(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){v[e]=new m(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){v[e]=new m(e,5,!1,e.toLowerCase(),null,!1,!1)}));var b=/[\-:]([a-z])/g;function y(e){return e[1].toUpperCase()}function x(e,t,n,r){var i=v.hasOwnProperty(t)?v[t]:null;(null!==i?0===i.type:!r&&2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1]))||(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,i,r)&&(n=null),r||null===i?function(e){return!!h.call(g,e)||!h.call(p,e)&&(f.test(e)?g[e]=!0:(p[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):i.mustUseProperty?e[i.propertyName]=null===n?3!==i.type&&"":n:(t=i.attributeName,r=i.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(i=i.type)||4===i&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(b,y);v[t]=new m(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(b,y);v[t]=new m(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(b,y);v[t]=new m(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){v[e]=new m(e,1,!1,e.toLowerCase(),null,!1,!1)})),v.xlinkHref=new m("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){v[e]=new m(e,1,!1,e.toLowerCase(),null,!0,!0)}));var _=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,w=60103,k=60106,S=60107,E=60108,M=60114,C=60109,P=60110,O=60112,T=60113,D=60120,L=60115,j=60116,A=60121,R=60128,N=60129,z=60130,F=60131;if("function"==typeof Symbol&&Symbol.for){var I=Symbol.for;w=I("react.element"),k=I("react.portal"),S=I("react.fragment"),E=I("react.strict_mode"),M=I("react.profiler"),C=I("react.provider"),P=I("react.context"),O=I("react.forward_ref"),T=I("react.suspense"),D=I("react.suspense_list"),L=I("react.memo"),j=I("react.lazy"),A=I("react.block"),I("react.scope"),R=I("react.opaque.id"),N=I("react.debug_trace_mode"),z=I("react.offscreen"),F=I("react.legacy_hidden")}var B,V="function"==typeof Symbol&&Symbol.iterator;function W(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=V&&e[V]||e["@@iterator"])?e:null}function U(e){if(void 0===B)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);B=t&&t[1]||""}return"\n"+B+e}var H=!1;function $(e,t){if(!e||H)return"";H=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var r=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){r=e}e.call(t.prototype)}else{try{throw Error()}catch(e){r=e}e()}}catch(e){if(e&&r&&"string"==typeof e.stack){for(var i=e.stack.split("\n"),o=r.stack.split("\n"),a=i.length-1,s=o.length-1;1<=a&&0<=s&&i[a]!==o[s];)s--;for(;1<=a&&0<=s;a--,s--)if(i[a]!==o[s]){if(1!==a||1!==s)do{if(a--,0>--s||i[a]!==o[s])return"\n"+i[a].replace(" at new "," at ")}while(1<=a&&0<=s);break}}}finally{H=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?U(e):""}function Y(e){switch(e.tag){case 5:return U(e.type);case 16:return U("Lazy");case 13:return U("Suspense");case 19:return U("SuspenseList");case 0:case 2:case 15:return $(e.type,!1);case 11:return $(e.type.render,!1);case 22:return $(e.type._render,!1);case 1:return $(e.type,!0);default:return""}}function q(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case S:return"Fragment";case k:return"Portal";case M:return"Profiler";case E:return"StrictMode";case T:return"Suspense";case D:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case P:return(e.displayName||"Context")+".Consumer";case C:return(e._context.displayName||"Context")+".Provider";case O:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case L:return q(e.type);case A:return q(e._render);case j:t=e._payload,e=e._init;try{return q(e(t))}catch(e){}}return null}function Q(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function X(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function K(e){e._valueTracker||(e._valueTracker=function(e){var t=X(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var i=n.get,o=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return i.call(this)},set:function(e){r=""+e,o.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function Z(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=X(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function G(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function J(e,t){var n=t.checked;return i({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function ee(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=Q(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function te(e,t){null!=(t=t.checked)&&x(e,"checked",t,!1)}function ne(e,t){te(e,t);var n=Q(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?ie(e,t.type,n):t.hasOwnProperty("defaultValue")&&ie(e,t.type,Q(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function re(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function ie(e,t,n){"number"===t&&G(e.ownerDocument)===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}function oe(e,t){return e=i({children:void 0},t),(t=function(e){var t="";return r.Children.forEach(e,(function(e){null!=e&&(t+=e)})),t}(t.children))&&(e.children=t),e}function ae(e,t,n,r){if(e=e.options,t){t={};for(var i=0;i<n.length;i++)t["$"+n[i]]=!0;for(n=0;n<e.length;n++)i=t.hasOwnProperty("$"+e[n].value),e[n].selected!==i&&(e[n].selected=i),i&&r&&(e[n].defaultSelected=!0)}else{for(n=""+Q(n),t=null,i=0;i<e.length;i++){if(e[i].value===n)return e[i].selected=!0,void(r&&(e[i].defaultSelected=!0));null!==t||e[i].disabled||(t=e[i])}null!==t&&(t.selected=!0)}}function se(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(a(91));return i({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function le(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(a(92));if(Array.isArray(n)){if(!(1>=n.length))throw Error(a(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:Q(n)}}function ce(e,t){var n=Q(t.value),r=Q(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function ue(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}var de="http://www.w3.org/1999/xhtml";function fe(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function he(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?fe(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var pe,ge,me=(ge=function(e,t){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=t;else{for((pe=pe||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=pe.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction((function(){return ge(e,t)}))}:ge);function ve(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var be={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},ye=["Webkit","ms","Moz","O"];function xe(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||be.hasOwnProperty(e)&&be[e]?(""+t).trim():t+"px"}function _e(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),i=xe(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,i):e[n]=i}}Object.keys(be).forEach((function(e){ye.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),be[t]=be[e]}))}));var we=i({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function ke(e,t){if(t){if(we[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(a(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(a(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(a(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(a(62))}}function Se(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}function Ee(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var Me=null,Ce=null,Pe=null;function Oe(e){if(e=Jr(e)){if("function"!=typeof Me)throw Error(a(280));var t=e.stateNode;t&&(t=ti(t),Me(e.stateNode,e.type,t))}}function Te(e){Ce?Pe?Pe.push(e):Pe=[e]:Ce=e}function De(){if(Ce){var e=Ce,t=Pe;if(Pe=Ce=null,Oe(e),t)for(e=0;e<t.length;e++)Oe(t[e])}}function Le(e,t){return e(t)}function je(e,t,n,r,i){return e(t,n,r,i)}function Ae(){}var Re=Le,Ne=!1,ze=!1;function Fe(){null===Ce&&null===Pe||(Ae(),De())}function Ie(e,t){var n=e.stateNode;if(null===n)return null;var r=ti(n);if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(a(231,t,typeof n));return n}var Be=!1;if(d)try{var Ve={};Object.defineProperty(Ve,"passive",{get:function(){Be=!0}}),window.addEventListener("test",Ve,Ve),window.removeEventListener("test",Ve,Ve)}catch(ge){Be=!1}function We(e,t,n,r,i,o,a,s,l){var c=Array.prototype.slice.call(arguments,3);try{t.apply(n,c)}catch(e){this.onError(e)}}var Ue=!1,He=null,$e=!1,Ye=null,qe={onError:function(e){Ue=!0,He=e}};function Qe(e,t,n,r,i,o,a,s,l){Ue=!1,He=null,We.apply(qe,arguments)}function Xe(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(1026&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function Ke(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function Ze(e){if(Xe(e)!==e)throw Error(a(188))}function Ge(e){if(!(e=function(e){var t=e.alternate;if(!t){if(null===(t=Xe(e)))throw Error(a(188));return t!==e?null:e}for(var n=e,r=t;;){var i=n.return;if(null===i)break;var o=i.alternate;if(null===o){if(null!==(r=i.return)){n=r;continue}break}if(i.child===o.child){for(o=i.child;o;){if(o===n)return Ze(i),e;if(o===r)return Ze(i),t;o=o.sibling}throw Error(a(188))}if(n.return!==r.return)n=i,r=o;else{for(var s=!1,l=i.child;l;){if(l===n){s=!0,n=i,r=o;break}if(l===r){s=!0,r=i,n=o;break}l=l.sibling}if(!s){for(l=o.child;l;){if(l===n){s=!0,n=o,r=i;break}if(l===r){s=!0,r=o,n=i;break}l=l.sibling}if(!s)throw Error(a(189))}}if(n.alternate!==r)throw Error(a(190))}if(3!==n.tag)throw Error(a(188));return n.stateNode.current===n?e:t}(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}function Je(e,t){for(var n=e.alternate;null!==t;){if(t===e||t===n)return!0;t=t.return}return!1}var et,tt,nt,rt,it=!1,ot=[],at=null,st=null,lt=null,ct=new Map,ut=new Map,dt=[],ft="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function ht(e,t,n,r,i){return{blockedOn:e,domEventName:t,eventSystemFlags:16|n,nativeEvent:i,targetContainers:[r]}}function pt(e,t){switch(e){case"focusin":case"focusout":at=null;break;case"dragenter":case"dragleave":st=null;break;case"mouseover":case"mouseout":lt=null;break;case"pointerover":case"pointerout":ct.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":ut.delete(t.pointerId)}}function gt(e,t,n,r,i,o){return null===e||e.nativeEvent!==o?(e=ht(t,n,r,i,o),null!==t&&null!==(t=Jr(t))&&tt(t),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==i&&-1===t.indexOf(i)&&t.push(i),e)}function mt(e){var t=Gr(e.target);if(null!==t){var n=Xe(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=Ke(n)))return e.blockedOn=t,void rt(e.lanePriority,(function(){o.unstable_runWithPriority(e.priority,(function(){nt(n)}))}))}else if(3===t&&n.stateNode.hydrate)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function vt(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=Gt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n)return null!==(t=Jr(n))&&tt(t),e.blockedOn=n,!1;t.shift()}return!0}function bt(e,t,n){vt(e)&&n.delete(t)}function yt(){for(it=!1;0<ot.length;){var e=ot[0];if(null!==e.blockedOn){null!==(e=Jr(e.blockedOn))&&et(e);break}for(var t=e.targetContainers;0<t.length;){var n=Gt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n){e.blockedOn=n;break}t.shift()}null===e.blockedOn&&ot.shift()}null!==at&&vt(at)&&(at=null),null!==st&&vt(st)&&(st=null),null!==lt&&vt(lt)&&(lt=null),ct.forEach(bt),ut.forEach(bt)}function xt(e,t){e.blockedOn===t&&(e.blockedOn=null,it||(it=!0,o.unstable_scheduleCallback(o.unstable_NormalPriority,yt)))}function _t(e){function t(t){return xt(t,e)}if(0<ot.length){xt(ot[0],e);for(var n=1;n<ot.length;n++){var r=ot[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==at&&xt(at,e),null!==st&&xt(st,e),null!==lt&&xt(lt,e),ct.forEach(t),ut.forEach(t),n=0;n<dt.length;n++)(r=dt[n]).blockedOn===e&&(r.blockedOn=null);for(;0<dt.length&&null===(n=dt[0]).blockedOn;)mt(n),null===n.blockedOn&&dt.shift()}function wt(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var kt={animationend:wt("Animation","AnimationEnd"),animationiteration:wt("Animation","AnimationIteration"),animationstart:wt("Animation","AnimationStart"),transitionend:wt("Transition","TransitionEnd")},St={},Et={};function Mt(e){if(St[e])return St[e];if(!kt[e])return e;var t,n=kt[e];for(t in n)if(n.hasOwnProperty(t)&&t in Et)return St[e]=n[t];return e}d&&(Et=document.createElement("div").style,"AnimationEvent"in window||(delete kt.animationend.animation,delete kt.animationiteration.animation,delete kt.animationstart.animation),"TransitionEvent"in window||delete kt.transitionend.transition);var Ct=Mt("animationend"),Pt=Mt("animationiteration"),Ot=Mt("animationstart"),Tt=Mt("transitionend"),Dt=new Map,Lt=new Map,jt=["abort","abort",Ct,"animationEnd",Pt,"animationIteration",Ot,"animationStart","canplay","canPlay","canplaythrough","canPlayThrough","durationchange","durationChange","emptied","emptied","encrypted","encrypted","ended","ended","error","error","gotpointercapture","gotPointerCapture","load","load","loadeddata","loadedData","loadedmetadata","loadedMetadata","loadstart","loadStart","lostpointercapture","lostPointerCapture","playing","playing","progress","progress","seeking","seeking","stalled","stalled","suspend","suspend","timeupdate","timeUpdate",Tt,"transitionEnd","waiting","waiting"];function At(e,t){for(var n=0;n<e.length;n+=2){var r=e[n],i=e[n+1];i="on"+(i[0].toUpperCase()+i.slice(1)),Lt.set(r,t),Dt.set(r,i),c(i,[r])}}(0,o.unstable_now)();var Rt=8;function Nt(e){if(0!=(1&e))return Rt=15,1;if(0!=(2&e))return Rt=14,2;if(0!=(4&e))return Rt=13,4;var t=24&e;return 0!==t?(Rt=12,t):0!=(32&e)?(Rt=11,32):0!=(t=192&e)?(Rt=10,t):0!=(256&e)?(Rt=9,256):0!=(t=3584&e)?(Rt=8,t):0!=(4096&e)?(Rt=7,4096):0!=(t=4186112&e)?(Rt=6,t):0!=(t=62914560&e)?(Rt=5,t):67108864&e?(Rt=4,67108864):0!=(134217728&e)?(Rt=3,134217728):0!=(t=805306368&e)?(Rt=2,t):0!=(1073741824&e)?(Rt=1,1073741824):(Rt=8,e)}function zt(e,t){var n=e.pendingLanes;if(0===n)return Rt=0;var r=0,i=0,o=e.expiredLanes,a=e.suspendedLanes,s=e.pingedLanes;if(0!==o)r=o,i=Rt=15;else if(0!=(o=134217727&n)){var l=o&~a;0!==l?(r=Nt(l),i=Rt):0!=(s&=o)&&(r=Nt(s),i=Rt)}else 0!=(o=n&~a)?(r=Nt(o),i=Rt):0!==s&&(r=Nt(s),i=Rt);if(0===r)return 0;if(r=n&((0>(r=31-Ut(r))?0:1<<r)<<1)-1,0!==t&&t!==r&&0==(t&a)){if(Nt(t),i<=Rt)return t;Rt=i}if(0!==(t=e.entangledLanes))for(e=e.entanglements,t&=r;0<t;)i=1<<(n=31-Ut(t)),r|=e[n],t&=~i;return r}function Ft(e){return 0!=(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function It(e,t){switch(e){case 15:return 1;case 14:return 2;case 12:return 0===(e=Bt(24&~t))?It(10,t):e;case 10:return 0===(e=Bt(192&~t))?It(8,t):e;case 8:return 0===(e=Bt(3584&~t))&&0===(e=Bt(4186112&~t))&&(e=512),e;case 2:return 0===(t=Bt(805306368&~t))&&(t=268435456),t}throw Error(a(358,e))}function Bt(e){return e&-e}function Vt(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function Wt(e,t,n){e.pendingLanes|=t;var r=t-1;e.suspendedLanes&=r,e.pingedLanes&=r,(e=e.eventTimes)[t=31-Ut(t)]=n}var Ut=Math.clz32?Math.clz32:function(e){return 0===e?32:31-(Ht(e)/$t|0)|0},Ht=Math.log,$t=Math.LN2,Yt=o.unstable_UserBlockingPriority,qt=o.unstable_runWithPriority,Qt=!0;function Xt(e,t,n,r){Ne||Ae();var i=Zt,o=Ne;Ne=!0;try{je(i,e,t,n,r)}finally{(Ne=o)||Fe()}}function Kt(e,t,n,r){qt(Yt,Zt.bind(null,e,t,n,r))}function Zt(e,t,n,r){var i;if(Qt)if((i=0==(4&t))&&0<ot.length&&-1<ft.indexOf(e))e=ht(null,e,t,n,r),ot.push(e);else{var o=Gt(e,t,n,r);if(null===o)i&&pt(e,r);else{if(i){if(-1<ft.indexOf(e))return e=ht(o,e,t,n,r),void ot.push(e);if(function(e,t,n,r,i){switch(t){case"focusin":return at=gt(at,e,t,n,r,i),!0;case"dragenter":return st=gt(st,e,t,n,r,i),!0;case"mouseover":return lt=gt(lt,e,t,n,r,i),!0;case"pointerover":var o=i.pointerId;return ct.set(o,gt(ct.get(o)||null,e,t,n,r,i)),!0;case"gotpointercapture":return o=i.pointerId,ut.set(o,gt(ut.get(o)||null,e,t,n,r,i)),!0}return!1}(o,e,t,n,r))return;pt(e,r)}Dr(e,t,r,null,n)}}}function Gt(e,t,n,r){var i=Ee(r);if(null!==(i=Gr(i))){var o=Xe(i);if(null===o)i=null;else{var a=o.tag;if(13===a){if(null!==(i=Ke(o)))return i;i=null}else if(3===a){if(o.stateNode.hydrate)return 3===o.tag?o.stateNode.containerInfo:null;i=null}else o!==i&&(i=null)}}return Dr(e,t,r,i,n),null}var Jt=null,en=null,tn=null;function nn(){if(tn)return tn;var e,t,n=en,r=n.length,i="value"in Jt?Jt.value:Jt.textContent,o=i.length;for(e=0;e<r&&n[e]===i[e];e++);var a=r-e;for(t=1;t<=a&&n[r-t]===i[o-t];t++);return tn=i.slice(e,1<t?1-t:void 0)}function rn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function on(){return!0}function an(){return!1}function sn(e){function t(t,n,r,i,o){for(var a in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=i,this.target=o,this.currentTarget=null,e)e.hasOwnProperty(a)&&(t=e[a],this[a]=t?t(i):i[a]);return this.isDefaultPrevented=(null!=i.defaultPrevented?i.defaultPrevented:!1===i.returnValue)?on:an,this.isPropagationStopped=an,this}return i(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=on)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=on)},persist:function(){},isPersistent:on}),t}var ln,cn,un,dn={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},fn=sn(dn),hn=i({},dn,{view:0,detail:0}),pn=sn(hn),gn=i({},hn,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:Mn,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==un&&(un&&"mousemove"===e.type?(ln=e.screenX-un.screenX,cn=e.screenY-un.screenY):cn=ln=0,un=e),ln)},movementY:function(e){return"movementY"in e?e.movementY:cn}}),mn=sn(gn),vn=sn(i({},gn,{dataTransfer:0})),bn=sn(i({},hn,{relatedTarget:0})),yn=sn(i({},dn,{animationName:0,elapsedTime:0,pseudoElement:0})),xn=sn(i({},dn,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}})),_n=sn(i({},dn,{data:0})),wn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},kn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},Sn={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function En(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Sn[e])&&!!t[e]}function Mn(){return En}var Cn=sn(i({},hn,{key:function(e){if(e.key){var t=wn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=rn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?kn[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:Mn,charCode:function(e){return"keypress"===e.type?rn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?rn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}})),Pn=sn(i({},gn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),On=sn(i({},hn,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:Mn})),Tn=sn(i({},dn,{propertyName:0,elapsedTime:0,pseudoElement:0})),Dn=sn(i({},gn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0})),Ln=[9,13,27,32],jn=d&&"CompositionEvent"in window,An=null;d&&"documentMode"in document&&(An=document.documentMode);var Rn=d&&"TextEvent"in window&&!An,Nn=d&&(!jn||An&&8<An&&11>=An),zn=String.fromCharCode(32),Fn=!1;function In(e,t){switch(e){case"keyup":return-1!==Ln.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Bn(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Vn=!1,Wn={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Un(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Wn[e.type]:"textarea"===t}function Hn(e,t,n,r){Te(r),0<(t=jr(t,"onChange")).length&&(n=new fn("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var $n=null,Yn=null;function qn(e){Er(e,0)}function Qn(e){if(Z(ei(e)))return e}function Xn(e,t){if("change"===e)return t}var Kn=!1;if(d){var Zn;if(d){var Gn="oninput"in document;if(!Gn){var Jn=document.createElement("div");Jn.setAttribute("oninput","return;"),Gn="function"==typeof Jn.oninput}Zn=Gn}else Zn=!1;Kn=Zn&&(!document.documentMode||9<document.documentMode)}function er(){$n&&($n.detachEvent("onpropertychange",tr),Yn=$n=null)}function tr(e){if("value"===e.propertyName&&Qn(Yn)){var t=[];if(Hn(t,Yn,e,Ee(e)),e=qn,Ne)e(t);else{Ne=!0;try{Le(e,t)}finally{Ne=!1,Fe()}}}}function nr(e,t,n){"focusin"===e?(er(),Yn=n,($n=t).attachEvent("onpropertychange",tr)):"focusout"===e&&er()}function rr(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Qn(Yn)}function ir(e,t){if("click"===e)return Qn(t)}function or(e,t){if("input"===e||"change"===e)return Qn(t)}var ar="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},sr=Object.prototype.hasOwnProperty;function lr(e,t){if(ar(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++)if(!sr.call(t,n[r])||!ar(e[n[r]],t[n[r]]))return!1;return!0}function cr(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function ur(e,t){var n,r=cr(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=cr(r)}}function dr(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?dr(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function fr(){for(var e=window,t=G();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=G((e=t.contentWindow).document)}return t}function hr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var pr=d&&"documentMode"in document&&11>=document.documentMode,gr=null,mr=null,vr=null,br=!1;function yr(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;br||null==gr||gr!==G(r)||(r="selectionStart"in(r=gr)&&hr(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},vr&&lr(vr,r)||(vr=r,0<(r=jr(mr,"onSelect")).length&&(t=new fn("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=gr)))}At("cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focusin focus focusout blur input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "),0),At("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "),1),At(jt,2);for(var xr="change selectionchange textInput compositionstart compositionend compositionupdate".split(" "),_r=0;_r<xr.length;_r++)Lt.set(xr[_r],0);u("onMouseEnter",["mouseout","mouseover"]),u("onMouseLeave",["mouseout","mouseover"]),u("onPointerEnter",["pointerout","pointerover"]),u("onPointerLeave",["pointerout","pointerover"]),c("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),c("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),c("onBeforeInput",["compositionend","keypress","textInput","paste"]),c("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),c("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),c("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var wr="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),kr=new Set("cancel close invalid load scroll toggle".split(" ").concat(wr));function Sr(e,t,n){var r=e.type||"unknown-event";e.currentTarget=n,function(e,t,n,r,i,o,s,l,c){if(Qe.apply(this,arguments),Ue){if(!Ue)throw Error(a(198));var u=He;Ue=!1,He=null,$e||($e=!0,Ye=u)}}(r,t,void 0,e),e.currentTarget=null}function Er(e,t){t=0!=(4&t);for(var n=0;n<e.length;n++){var r=e[n],i=r.event;r=r.listeners;e:{var o=void 0;if(t)for(var a=r.length-1;0<=a;a--){var s=r[a],l=s.instance,c=s.currentTarget;if(s=s.listener,l!==o&&i.isPropagationStopped())break e;Sr(i,s,c),o=l}else for(a=0;a<r.length;a++){if(l=(s=r[a]).instance,c=s.currentTarget,s=s.listener,l!==o&&i.isPropagationStopped())break e;Sr(i,s,c),o=l}}}if($e)throw e=Ye,$e=!1,Ye=null,e}function Mr(e,t){var n=ni(t),r=e+"__bubble";n.has(r)||(Tr(t,e,2,!1),n.add(r))}var Cr="_reactListening"+Math.random().toString(36).slice(2);function Pr(e){e[Cr]||(e[Cr]=!0,s.forEach((function(t){kr.has(t)||Or(t,!1,e,null),Or(t,!0,e,null)})))}function Or(e,t,n,r){var i=4<arguments.length&&void 0!==arguments[4]?arguments[4]:0,o=n;if("selectionchange"===e&&9!==n.nodeType&&(o=n.ownerDocument),null!==r&&!t&&kr.has(e)){if("scroll"!==e)return;i|=2,o=r}var a=ni(o),s=e+"__"+(t?"capture":"bubble");a.has(s)||(t&&(i|=4),Tr(o,e,i,t),a.add(s))}function Tr(e,t,n,r){var i=Lt.get(t);switch(void 0===i?2:i){case 0:i=Xt;break;case 1:i=Kt;break;default:i=Zt}n=i.bind(null,t,n,e),i=void 0,!Be||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(i=!0),r?void 0!==i?e.addEventListener(t,n,{capture:!0,passive:i}):e.addEventListener(t,n,!0):void 0!==i?e.addEventListener(t,n,{passive:i}):e.addEventListener(t,n,!1)}function Dr(e,t,n,r,i){var o=r;if(0==(1&t)&&0==(2&t)&&null!==r)e:for(;;){if(null===r)return;var a=r.tag;if(3===a||4===a){var s=r.stateNode.containerInfo;if(s===i||8===s.nodeType&&s.parentNode===i)break;if(4===a)for(a=r.return;null!==a;){var l=a.tag;if((3===l||4===l)&&((l=a.stateNode.containerInfo)===i||8===l.nodeType&&l.parentNode===i))return;a=a.return}for(;null!==s;){if(null===(a=Gr(s)))return;if(5===(l=a.tag)||6===l){r=o=a;continue e}s=s.parentNode}}r=r.return}!function(e,t,n){if(ze)return e();ze=!0;try{Re(e,t,n)}finally{ze=!1,Fe()}}((function(){var r=o,i=Ee(n),a=[];e:{var s=Dt.get(e);if(void 0!==s){var l=fn,c=e;switch(e){case"keypress":if(0===rn(n))break e;case"keydown":case"keyup":l=Cn;break;case"focusin":c="focus",l=bn;break;case"focusout":c="blur",l=bn;break;case"beforeblur":case"afterblur":l=bn;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":l=mn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":l=vn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":l=On;break;case Ct:case Pt:case Ot:l=yn;break;case Tt:l=Tn;break;case"scroll":l=pn;break;case"wheel":l=Dn;break;case"copy":case"cut":case"paste":l=xn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":l=Pn}var u=0!=(4&t),d=!u&&"scroll"===e,f=u?null!==s?s+"Capture":null:s;u=[];for(var h,p=r;null!==p;){var g=(h=p).stateNode;if(5===h.tag&&null!==g&&(h=g,null!==f&&null!=(g=Ie(p,f))&&u.push(Lr(p,g,h))),d)break;p=p.return}0<u.length&&(s=new l(s,c,null,n,i),a.push({event:s,listeners:u}))}}if(0==(7&t)){if(l="mouseout"===e||"pointerout"===e,(!(s="mouseover"===e||"pointerover"===e)||0!=(16&t)||!(c=n.relatedTarget||n.fromElement)||!Gr(c)&&!c[Kr])&&(l||s)&&(s=i.window===i?i:(s=i.ownerDocument)?s.defaultView||s.parentWindow:window,l?(l=r,null!==(c=(c=n.relatedTarget||n.toElement)?Gr(c):null)&&(c!==(d=Xe(c))||5!==c.tag&&6!==c.tag)&&(c=null)):(l=null,c=r),l!==c)){if(u=mn,g="onMouseLeave",f="onMouseEnter",p="mouse","pointerout"!==e&&"pointerover"!==e||(u=Pn,g="onPointerLeave",f="onPointerEnter",p="pointer"),d=null==l?s:ei(l),h=null==c?s:ei(c),(s=new u(g,p+"leave",l,n,i)).target=d,s.relatedTarget=h,g=null,Gr(i)===r&&((u=new u(f,p+"enter",c,n,i)).target=h,u.relatedTarget=d,g=u),d=g,l&&c)e:{for(f=c,p=0,h=u=l;h;h=Ar(h))p++;for(h=0,g=f;g;g=Ar(g))h++;for(;0<p-h;)u=Ar(u),p--;for(;0<h-p;)f=Ar(f),h--;for(;p--;){if(u===f||null!==f&&u===f.alternate)break e;u=Ar(u),f=Ar(f)}u=null}else u=null;null!==l&&Rr(a,s,l,u,!1),null!==c&&null!==d&&Rr(a,d,c,u,!0)}if("select"===(l=(s=r?ei(r):window).nodeName&&s.nodeName.toLowerCase())||"input"===l&&"file"===s.type)var m=Xn;else if(Un(s))if(Kn)m=or;else{m=rr;var v=nr}else(l=s.nodeName)&&"input"===l.toLowerCase()&&("checkbox"===s.type||"radio"===s.type)&&(m=ir);switch(m&&(m=m(e,r))?Hn(a,m,n,i):(v&&v(e,s,r),"focusout"===e&&(v=s._wrapperState)&&v.controlled&&"number"===s.type&&ie(s,"number",s.value)),v=r?ei(r):window,e){case"focusin":(Un(v)||"true"===v.contentEditable)&&(gr=v,mr=r,vr=null);break;case"focusout":vr=mr=gr=null;break;case"mousedown":br=!0;break;case"contextmenu":case"mouseup":case"dragend":br=!1,yr(a,n,i);break;case"selectionchange":if(pr)break;case"keydown":case"keyup":yr(a,n,i)}var b;if(jn)e:{switch(e){case"compositionstart":var y="onCompositionStart";break e;case"compositionend":y="onCompositionEnd";break e;case"compositionupdate":y="onCompositionUpdate";break e}y=void 0}else Vn?In(e,n)&&(y="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(y="onCompositionStart");y&&(Nn&&"ko"!==n.locale&&(Vn||"onCompositionStart"!==y?"onCompositionEnd"===y&&Vn&&(b=nn()):(en="value"in(Jt=i)?Jt.value:Jt.textContent,Vn=!0)),0<(v=jr(r,y)).length&&(y=new _n(y,e,null,n,i),a.push({event:y,listeners:v}),(b||null!==(b=Bn(n)))&&(y.data=b))),(b=Rn?function(e,t){switch(e){case"compositionend":return Bn(t);case"keypress":return 32!==t.which?null:(Fn=!0,zn);case"textInput":return(e=t.data)===zn&&Fn?null:e;default:return null}}(e,n):function(e,t){if(Vn)return"compositionend"===e||!jn&&In(e,t)?(e=nn(),tn=en=Jt=null,Vn=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return Nn&&"ko"!==t.locale?null:t.data;default:return null}}(e,n))&&0<(r=jr(r,"onBeforeInput")).length&&(i=new _n("onBeforeInput","beforeinput",null,n,i),a.push({event:i,listeners:r}),i.data=b)}Er(a,t)}))}function Lr(e,t,n){return{instance:e,listener:t,currentTarget:n}}function jr(e,t){for(var n=t+"Capture",r=[];null!==e;){var i=e,o=i.stateNode;5===i.tag&&null!==o&&(i=o,null!=(o=Ie(e,n))&&r.unshift(Lr(e,o,i)),null!=(o=Ie(e,t))&&r.push(Lr(e,o,i))),e=e.return}return r}function Ar(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function Rr(e,t,n,r,i){for(var o=t._reactName,a=[];null!==n&&n!==r;){var s=n,l=s.alternate,c=s.stateNode;if(null!==l&&l===r)break;5===s.tag&&null!==c&&(s=c,i?null!=(l=Ie(n,o))&&a.unshift(Lr(n,l,s)):i||null!=(l=Ie(n,o))&&a.push(Lr(n,l,s))),n=n.return}0!==a.length&&e.push({event:t,listeners:a})}function Nr(){}var zr=null,Fr=null;function Ir(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function Br(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var Vr="function"==typeof setTimeout?setTimeout:void 0,Wr="function"==typeof clearTimeout?clearTimeout:void 0;function Ur(e){(1===e.nodeType||9===e.nodeType&&null!=(e=e.body))&&(e.textContent="")}function Hr(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break}return e}function $r(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var Yr=0,qr=Math.random().toString(36).slice(2),Qr="__reactFiber$"+qr,Xr="__reactProps$"+qr,Kr="__reactContainer$"+qr,Zr="__reactEvents$"+qr;function Gr(e){var t=e[Qr];if(t)return t;for(var n=e.parentNode;n;){if(t=n[Kr]||n[Qr]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=$r(e);null!==e;){if(n=e[Qr])return n;e=$r(e)}return t}n=(e=n).parentNode}return null}function Jr(e){return!(e=e[Qr]||e[Kr])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function ei(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(a(33))}function ti(e){return e[Xr]||null}function ni(e){var t=e[Zr];return void 0===t&&(t=e[Zr]=new Set),t}var ri=[],ii=-1;function oi(e){return{current:e}}function ai(e){0>ii||(e.current=ri[ii],ri[ii]=null,ii--)}function si(e,t){ii++,ri[ii]=e.current,e.current=t}var li={},ci=oi(li),ui=oi(!1),di=li;function fi(e,t){var n=e.type.contextTypes;if(!n)return li;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var i,o={};for(i in n)o[i]=t[i];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=o),o}function hi(e){return null!=e.childContextTypes}function pi(){ai(ui),ai(ci)}function gi(e,t,n){if(ci.current!==li)throw Error(a(168));si(ci,t),si(ui,n)}function mi(e,t,n){var r=e.stateNode;if(e=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var o in r=r.getChildContext())if(!(o in e))throw Error(a(108,q(t)||"Unknown",o));return i({},n,r)}function vi(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||li,di=ci.current,si(ci,e),si(ui,ui.current),!0}function bi(e,t,n){var r=e.stateNode;if(!r)throw Error(a(169));n?(e=mi(e,t,di),r.__reactInternalMemoizedMergedChildContext=e,ai(ui),ai(ci),si(ci,e)):ai(ui),si(ui,n)}var yi=null,xi=null,_i=o.unstable_runWithPriority,wi=o.unstable_scheduleCallback,ki=o.unstable_cancelCallback,Si=o.unstable_shouldYield,Ei=o.unstable_requestPaint,Mi=o.unstable_now,Ci=o.unstable_getCurrentPriorityLevel,Pi=o.unstable_ImmediatePriority,Oi=o.unstable_UserBlockingPriority,Ti=o.unstable_NormalPriority,Di=o.unstable_LowPriority,Li=o.unstable_IdlePriority,ji={},Ai=void 0!==Ei?Ei:function(){},Ri=null,Ni=null,zi=!1,Fi=Mi(),Ii=1e4>Fi?Mi:function(){return Mi()-Fi};function Bi(){switch(Ci()){case Pi:return 99;case Oi:return 98;case Ti:return 97;case Di:return 96;case Li:return 95;default:throw Error(a(332))}}function Vi(e){switch(e){case 99:return Pi;case 98:return Oi;case 97:return Ti;case 96:return Di;case 95:return Li;default:throw Error(a(332))}}function Wi(e,t){return e=Vi(e),_i(e,t)}function Ui(e,t,n){return e=Vi(e),wi(e,t,n)}function Hi(){if(null!==Ni){var e=Ni;Ni=null,ki(e)}$i()}function $i(){if(!zi&&null!==Ri){zi=!0;var e=0;try{var t=Ri;Wi(99,(function(){for(;e<t.length;e++){var n=t[e];do{n=n(!0)}while(null!==n)}})),Ri=null}catch(t){throw null!==Ri&&(Ri=Ri.slice(e+1)),wi(Pi,Hi),t}finally{zi=!1}}}var Yi=_.ReactCurrentBatchConfig;function qi(e,t){if(e&&e.defaultProps){for(var n in t=i({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}return t}var Qi=oi(null),Xi=null,Ki=null,Zi=null;function Gi(){Zi=Ki=Xi=null}function Ji(e){var t=Qi.current;ai(Qi),e.type._context._currentValue=t}function eo(e,t){for(;null!==e;){var n=e.alternate;if((e.childLanes&t)===t){if(null===n||(n.childLanes&t)===t)break;n.childLanes|=t}else e.childLanes|=t,null!==n&&(n.childLanes|=t);e=e.return}}function to(e,t){Xi=e,Zi=Ki=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(0!=(e.lanes&t)&&(ja=!0),e.firstContext=null)}function no(e,t){if(Zi!==e&&!1!==t&&0!==t)if("number"==typeof t&&1073741823!==t||(Zi=e,t=1073741823),t={context:e,observedBits:t,next:null},null===Ki){if(null===Xi)throw Error(a(308));Ki=t,Xi.dependencies={lanes:0,firstContext:t,responders:null}}else Ki=Ki.next=t;return e._currentValue}var ro=!1;function io(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null},effects:null}}function oo(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function ao(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function so(e,t){if(null!==(e=e.updateQueue)){var n=(e=e.shared).pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}}function lo(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var i=null,o=null;if(null!==(n=n.firstBaseUpdate)){do{var a={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===o?i=o=a:o=o.next=a,n=n.next}while(null!==n);null===o?i=o=t:o=o.next=t}else i=o=t;return n={baseState:r.baseState,firstBaseUpdate:i,lastBaseUpdate:o,shared:r.shared,effects:r.effects},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function co(e,t,n,r){var o=e.updateQueue;ro=!1;var a=o.firstBaseUpdate,s=o.lastBaseUpdate,l=o.shared.pending;if(null!==l){o.shared.pending=null;var c=l,u=c.next;c.next=null,null===s?a=u:s.next=u,s=c;var d=e.alternate;if(null!==d){var f=(d=d.updateQueue).lastBaseUpdate;f!==s&&(null===f?d.firstBaseUpdate=u:f.next=u,d.lastBaseUpdate=c)}}if(null!==a){for(f=o.baseState,s=0,d=u=c=null;;){l=a.lane;var h=a.eventTime;if((r&l)===l){null!==d&&(d=d.next={eventTime:h,lane:0,tag:a.tag,payload:a.payload,callback:a.callback,next:null});e:{var p=e,g=a;switch(l=t,h=n,g.tag){case 1:if("function"==typeof(p=g.payload)){f=p.call(h,f,l);break e}f=p;break e;case 3:p.flags=-4097&p.flags|64;case 0:if(null==(l="function"==typeof(p=g.payload)?p.call(h,f,l):p))break e;f=i({},f,l);break e;case 2:ro=!0}}null!==a.callback&&(e.flags|=32,null===(l=o.effects)?o.effects=[a]:l.push(a))}else h={eventTime:h,lane:l,tag:a.tag,payload:a.payload,callback:a.callback,next:null},null===d?(u=d=h,c=f):d=d.next=h,s|=l;if(null===(a=a.next)){if(null===(l=o.shared.pending))break;a=l.next,l.next=null,o.lastBaseUpdate=l,o.shared.pending=null}}null===d&&(c=f),o.baseState=c,o.firstBaseUpdate=u,o.lastBaseUpdate=d,Rs|=s,e.lanes=s,e.memoizedState=f}}function uo(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],i=r.callback;if(null!==i){if(r.callback=null,r=n,"function"!=typeof i)throw Error(a(191,i));i.call(r)}}}var fo=(new r.Component).refs;function ho(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:i({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var po={isMounted:function(e){return!!(e=e._reactInternals)&&Xe(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=al(),i=sl(e),o=ao(r,i);o.payload=t,null!=n&&(o.callback=n),so(e,o),ll(e,i,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=al(),i=sl(e),o=ao(r,i);o.tag=1,o.payload=t,null!=n&&(o.callback=n),so(e,o),ll(e,i,r)},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=al(),r=sl(e),i=ao(n,r);i.tag=2,null!=t&&(i.callback=t),so(e,i),ll(e,r,n)}};function go(e,t,n,r,i,o,a){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,o,a):!(t.prototype&&t.prototype.isPureReactComponent&&lr(n,r)&&lr(i,o))}function mo(e,t,n){var r=!1,i=li,o=t.contextType;return"object"==typeof o&&null!==o?o=no(o):(i=hi(t)?di:ci.current,o=(r=null!=(r=t.contextTypes))?fi(e,i):li),t=new t(n,o),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=po,e.stateNode=t,t._reactInternals=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=i,e.__reactInternalMemoizedMaskedChildContext=o),t}function vo(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&po.enqueueReplaceState(t,t.state,null)}function bo(e,t,n,r){var i=e.stateNode;i.props=n,i.state=e.memoizedState,i.refs=fo,io(e);var o=t.contextType;"object"==typeof o&&null!==o?i.context=no(o):(o=hi(t)?di:ci.current,i.context=fi(e,o)),co(e,n,i,r),i.state=e.memoizedState,"function"==typeof(o=t.getDerivedStateFromProps)&&(ho(e,t,o,n),i.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof i.getSnapshotBeforeUpdate||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||(t=i.state,"function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount(),t!==i.state&&po.enqueueReplaceState(i,i.state,null),co(e,n,i,r),i.state=e.memoizedState),"function"==typeof i.componentDidMount&&(e.flags|=4)}var yo=Array.isArray;function xo(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(a(309));var r=n.stateNode}if(!r)throw Error(a(147,e));var i=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===i?t.ref:((t=function(e){var t=r.refs;t===fo&&(t=r.refs={}),null===e?delete t[i]:t[i]=e})._stringRef=i,t)}if("string"!=typeof e)throw Error(a(284));if(!n._owner)throw Error(a(290,e))}return e}function _o(e,t){if("textarea"!==e.type)throw Error(a(31,"[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t))}function wo(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.flags=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function i(e,t){return(e=Bl(e,t)).index=0,e.sibling=null,e}function o(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags=2,n):r:(t.flags=2,n):n}function s(t){return e&&null===t.alternate&&(t.flags=2),t}function l(e,t,n,r){return null===t||6!==t.tag?((t=Hl(n,e.mode,r)).return=e,t):((t=i(t,n)).return=e,t)}function c(e,t,n,r){return null!==t&&t.elementType===n.type?((r=i(t,n.props)).ref=xo(e,t,n),r.return=e,r):((r=Vl(n.type,n.key,n.props,null,e.mode,r)).ref=xo(e,t,n),r.return=e,r)}function u(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=$l(n,e.mode,r)).return=e,t):((t=i(t,n.children||[])).return=e,t)}function d(e,t,n,r,o){return null===t||7!==t.tag?((t=Wl(n,e.mode,r,o)).return=e,t):((t=i(t,n)).return=e,t)}function f(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=Hl(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case w:return(n=Vl(t.type,t.key,t.props,null,e.mode,n)).ref=xo(e,null,t),n.return=e,n;case k:return(t=$l(t,e.mode,n)).return=e,t}if(yo(t)||W(t))return(t=Wl(t,e.mode,n,null)).return=e,t;_o(e,t)}return null}function h(e,t,n,r){var i=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==i?null:l(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case w:return n.key===i?n.type===S?d(e,t,n.props.children,r,i):c(e,t,n,r):null;case k:return n.key===i?u(e,t,n,r):null}if(yo(n)||W(n))return null!==i?null:d(e,t,n,r,null);_o(e,n)}return null}function p(e,t,n,r,i){if("string"==typeof r||"number"==typeof r)return l(t,e=e.get(n)||null,""+r,i);if("object"==typeof r&&null!==r){switch(r.$$typeof){case w:return e=e.get(null===r.key?n:r.key)||null,r.type===S?d(t,e,r.props.children,i,r.key):c(t,e,r,i);case k:return u(t,e=e.get(null===r.key?n:r.key)||null,r,i)}if(yo(r)||W(r))return d(t,e=e.get(n)||null,r,i,null);_o(t,r)}return null}function g(i,a,s,l){for(var c=null,u=null,d=a,g=a=0,m=null;null!==d&&g<s.length;g++){d.index>g?(m=d,d=null):m=d.sibling;var v=h(i,d,s[g],l);if(null===v){null===d&&(d=m);break}e&&d&&null===v.alternate&&t(i,d),a=o(v,a,g),null===u?c=v:u.sibling=v,u=v,d=m}if(g===s.length)return n(i,d),c;if(null===d){for(;g<s.length;g++)null!==(d=f(i,s[g],l))&&(a=o(d,a,g),null===u?c=d:u.sibling=d,u=d);return c}for(d=r(i,d);g<s.length;g++)null!==(m=p(d,i,g,s[g],l))&&(e&&null!==m.alternate&&d.delete(null===m.key?g:m.key),a=o(m,a,g),null===u?c=m:u.sibling=m,u=m);return e&&d.forEach((function(e){return t(i,e)})),c}function m(i,s,l,c){var u=W(l);if("function"!=typeof u)throw Error(a(150));if(null==(l=u.call(l)))throw Error(a(151));for(var d=u=null,g=s,m=s=0,v=null,b=l.next();null!==g&&!b.done;m++,b=l.next()){g.index>m?(v=g,g=null):v=g.sibling;var y=h(i,g,b.value,c);if(null===y){null===g&&(g=v);break}e&&g&&null===y.alternate&&t(i,g),s=o(y,s,m),null===d?u=y:d.sibling=y,d=y,g=v}if(b.done)return n(i,g),u;if(null===g){for(;!b.done;m++,b=l.next())null!==(b=f(i,b.value,c))&&(s=o(b,s,m),null===d?u=b:d.sibling=b,d=b);return u}for(g=r(i,g);!b.done;m++,b=l.next())null!==(b=p(g,i,m,b.value,c))&&(e&&null!==b.alternate&&g.delete(null===b.key?m:b.key),s=o(b,s,m),null===d?u=b:d.sibling=b,d=b);return e&&g.forEach((function(e){return t(i,e)})),u}return function(e,r,o,l){var c="object"==typeof o&&null!==o&&o.type===S&&null===o.key;c&&(o=o.props.children);var u="object"==typeof o&&null!==o;if(u)switch(o.$$typeof){case w:e:{for(u=o.key,c=r;null!==c;){if(c.key===u){switch(c.tag){case 7:if(o.type===S){n(e,c.sibling),(r=i(c,o.props.children)).return=e,e=r;break e}break;default:if(c.elementType===o.type){n(e,c.sibling),(r=i(c,o.props)).ref=xo(e,c,o),r.return=e,e=r;break e}}n(e,c);break}t(e,c),c=c.sibling}o.type===S?((r=Wl(o.props.children,e.mode,l,o.key)).return=e,e=r):((l=Vl(o.type,o.key,o.props,null,e.mode,l)).ref=xo(e,r,o),l.return=e,e=l)}return s(e);case k:e:{for(c=o.key;null!==r;){if(r.key===c){if(4===r.tag&&r.stateNode.containerInfo===o.containerInfo&&r.stateNode.implementation===o.implementation){n(e,r.sibling),(r=i(r,o.children||[])).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=$l(o,e.mode,l)).return=e,e=r}return s(e)}if("string"==typeof o||"number"==typeof o)return o=""+o,null!==r&&6===r.tag?(n(e,r.sibling),(r=i(r,o)).return=e,e=r):(n(e,r),(r=Hl(o,e.mode,l)).return=e,e=r),s(e);if(yo(o))return g(e,r,o,l);if(W(o))return m(e,r,o,l);if(u&&_o(e,o),void 0===o&&!c)switch(e.tag){case 1:case 22:case 0:case 11:case 15:throw Error(a(152,q(e.type)||"Component"))}return n(e,r)}}var ko=wo(!0),So=wo(!1),Eo={},Mo=oi(Eo),Co=oi(Eo),Po=oi(Eo);function Oo(e){if(e===Eo)throw Error(a(174));return e}function To(e,t){switch(si(Po,t),si(Co,e),si(Mo,Eo),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:he(null,"");break;default:t=he(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}ai(Mo),si(Mo,t)}function Do(){ai(Mo),ai(Co),ai(Po)}function Lo(e){Oo(Po.current);var t=Oo(Mo.current),n=he(t,e.type);t!==n&&(si(Co,e),si(Mo,n))}function jo(e){Co.current===e&&(ai(Mo),ai(Co))}var Ao=oi(0);function Ro(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(64&t.flags))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var No=null,zo=null,Fo=!1;function Io(e,t){var n=Fl(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=t,n.return=e,n.flags=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function Bo(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);case 13:default:return!1}}function Vo(e){if(Fo){var t=zo;if(t){var n=t;if(!Bo(e,t)){if(!(t=Hr(n.nextSibling))||!Bo(e,t))return e.flags=-1025&e.flags|2,Fo=!1,void(No=e);Io(No,n)}No=e,zo=Hr(t.firstChild)}else e.flags=-1025&e.flags|2,Fo=!1,No=e}}function Wo(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;No=e}function Uo(e){if(e!==No)return!1;if(!Fo)return Wo(e),Fo=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!Br(t,e.memoizedProps))for(t=zo;t;)Io(e,t),t=Hr(t.nextSibling);if(Wo(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(a(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){zo=Hr(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}zo=null}}else zo=No?Hr(e.stateNode.nextSibling):null;return!0}function Ho(){zo=No=null,Fo=!1}var $o=[];function Yo(){for(var e=0;e<$o.length;e++)$o[e]._workInProgressVersionPrimary=null;$o.length=0}var qo=_.ReactCurrentDispatcher,Qo=_.ReactCurrentBatchConfig,Xo=0,Ko=null,Zo=null,Go=null,Jo=!1,ea=!1;function ta(){throw Error(a(321))}function na(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!ar(e[n],t[n]))return!1;return!0}function ra(e,t,n,r,i,o){if(Xo=o,Ko=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,qo.current=null===e||null===e.memoizedState?Oa:Ta,e=n(r,i),ea){o=0;do{if(ea=!1,!(25>o))throw Error(a(301));o+=1,Go=Zo=null,t.updateQueue=null,qo.current=Da,e=n(r,i)}while(ea)}if(qo.current=Pa,t=null!==Zo&&null!==Zo.next,Xo=0,Go=Zo=Ko=null,Jo=!1,t)throw Error(a(300));return e}function ia(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===Go?Ko.memoizedState=Go=e:Go=Go.next=e,Go}function oa(){if(null===Zo){var e=Ko.alternate;e=null!==e?e.memoizedState:null}else e=Zo.next;var t=null===Go?Ko.memoizedState:Go.next;if(null!==t)Go=t,Zo=e;else{if(null===e)throw Error(a(310));e={memoizedState:(Zo=e).memoizedState,baseState:Zo.baseState,baseQueue:Zo.baseQueue,queue:Zo.queue,next:null},null===Go?Ko.memoizedState=Go=e:Go=Go.next=e}return Go}function aa(e,t){return"function"==typeof t?t(e):t}function sa(e){var t=oa(),n=t.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=e;var r=Zo,i=r.baseQueue,o=n.pending;if(null!==o){if(null!==i){var s=i.next;i.next=o.next,o.next=s}r.baseQueue=i=o,n.pending=null}if(null!==i){i=i.next,r=r.baseState;var l=s=o=null,c=i;do{var u=c.lane;if((Xo&u)===u)null!==l&&(l=l.next={lane:0,action:c.action,eagerReducer:c.eagerReducer,eagerState:c.eagerState,next:null}),r=c.eagerReducer===e?c.eagerState:e(r,c.action);else{var d={lane:u,action:c.action,eagerReducer:c.eagerReducer,eagerState:c.eagerState,next:null};null===l?(s=l=d,o=r):l=l.next=d,Ko.lanes|=u,Rs|=u}c=c.next}while(null!==c&&c!==i);null===l?o=r:l.next=s,ar(r,t.memoizedState)||(ja=!0),t.memoizedState=r,t.baseState=o,t.baseQueue=l,n.lastRenderedState=r}return[t.memoizedState,n.dispatch]}function la(e){var t=oa(),n=t.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=e;var r=n.dispatch,i=n.pending,o=t.memoizedState;if(null!==i){n.pending=null;var s=i=i.next;do{o=e(o,s.action),s=s.next}while(s!==i);ar(o,t.memoizedState)||(ja=!0),t.memoizedState=o,null===t.baseQueue&&(t.baseState=o),n.lastRenderedState=o}return[o,r]}function ca(e,t,n){var r=t._getVersion;r=r(t._source);var i=t._workInProgressVersionPrimary;if(null!==i?e=i===r:(e=e.mutableReadLanes,(e=(Xo&e)===e)&&(t._workInProgressVersionPrimary=r,$o.push(t))),e)return n(t._source);throw $o.push(t),Error(a(350))}function ua(e,t,n,r){var i=Cs;if(null===i)throw Error(a(349));var o=t._getVersion,s=o(t._source),l=qo.current,c=l.useState((function(){return ca(i,t,n)})),u=c[1],d=c[0];c=Go;var f=e.memoizedState,h=f.refs,p=h.getSnapshot,g=f.source;f=f.subscribe;var m=Ko;return e.memoizedState={refs:h,source:t,subscribe:r},l.useEffect((function(){h.getSnapshot=n,h.setSnapshot=u;var e=o(t._source);if(!ar(s,e)){e=n(t._source),ar(d,e)||(u(e),e=sl(m),i.mutableReadLanes|=e&i.pendingLanes),e=i.mutableReadLanes,i.entangledLanes|=e;for(var r=i.entanglements,a=e;0<a;){var l=31-Ut(a),c=1<<l;r[l]|=e,a&=~c}}}),[n,t,r]),l.useEffect((function(){return r(t._source,(function(){var e=h.getSnapshot,n=h.setSnapshot;try{n(e(t._source));var r=sl(m);i.mutableReadLanes|=r&i.pendingLanes}catch(e){n((function(){throw e}))}}))}),[t,r]),ar(p,n)&&ar(g,t)&&ar(f,r)||((e={pending:null,dispatch:null,lastRenderedReducer:aa,lastRenderedState:d}).dispatch=u=Ca.bind(null,Ko,e),c.queue=e,c.baseQueue=null,d=ca(i,t,n),c.memoizedState=c.baseState=d),d}function da(e,t,n){return ua(oa(),e,t,n)}function fa(e){var t=ia();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e=(e=t.queue={pending:null,dispatch:null,lastRenderedReducer:aa,lastRenderedState:e}).dispatch=Ca.bind(null,Ko,e),[t.memoizedState,e]}function ha(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=Ko.updateQueue)?(t={lastEffect:null},Ko.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function pa(e){return e={current:e},ia().memoizedState=e}function ga(){return oa().memoizedState}function ma(e,t,n,r){var i=ia();Ko.flags|=e,i.memoizedState=ha(1|t,n,void 0,void 0===r?null:r)}function va(e,t,n,r){var i=oa();r=void 0===r?null:r;var o=void 0;if(null!==Zo){var a=Zo.memoizedState;if(o=a.destroy,null!==r&&na(r,a.deps))return void ha(t,n,o,r)}Ko.flags|=e,i.memoizedState=ha(1|t,n,o,r)}function ba(e,t){return ma(516,4,e,t)}function ya(e,t){return va(516,4,e,t)}function xa(e,t){return va(4,2,e,t)}function _a(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function wa(e,t,n){return n=null!=n?n.concat([e]):null,va(4,2,_a.bind(null,t,e),n)}function ka(){}function Sa(e,t){var n=oa();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&na(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function Ea(e,t){var n=oa();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&na(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function Ma(e,t){var n=Bi();Wi(98>n?98:n,(function(){e(!0)})),Wi(97<n?97:n,(function(){var n=Qo.transition;Qo.transition=1;try{e(!1),t()}finally{Qo.transition=n}}))}function Ca(e,t,n){var r=al(),i=sl(e),o={lane:i,action:n,eagerReducer:null,eagerState:null,next:null},a=t.pending;if(null===a?o.next=o:(o.next=a.next,a.next=o),t.pending=o,a=e.alternate,e===Ko||null!==a&&a===Ko)ea=Jo=!0;else{if(0===e.lanes&&(null===a||0===a.lanes)&&null!==(a=t.lastRenderedReducer))try{var s=t.lastRenderedState,l=a(s,n);if(o.eagerReducer=a,o.eagerState=l,ar(l,s))return}catch(e){}ll(e,i,r)}}var Pa={readContext:no,useCallback:ta,useContext:ta,useEffect:ta,useImperativeHandle:ta,useLayoutEffect:ta,useMemo:ta,useReducer:ta,useRef:ta,useState:ta,useDebugValue:ta,useDeferredValue:ta,useTransition:ta,useMutableSource:ta,useOpaqueIdentifier:ta,unstable_isNewReconciler:!1},Oa={readContext:no,useCallback:function(e,t){return ia().memoizedState=[e,void 0===t?null:t],e},useContext:no,useEffect:ba,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,ma(4,2,_a.bind(null,t,e),n)},useLayoutEffect:function(e,t){return ma(4,2,e,t)},useMemo:function(e,t){var n=ia();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=ia();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e=(e=r.queue={pending:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:t}).dispatch=Ca.bind(null,Ko,e),[r.memoizedState,e]},useRef:pa,useState:fa,useDebugValue:ka,useDeferredValue:function(e){var t=fa(e),n=t[0],r=t[1];return ba((function(){var t=Qo.transition;Qo.transition=1;try{r(e)}finally{Qo.transition=t}}),[e]),n},useTransition:function(){var e=fa(!1),t=e[0];return pa(e=Ma.bind(null,e[1])),[e,t]},useMutableSource:function(e,t,n){var r=ia();return r.memoizedState={refs:{getSnapshot:t,setSnapshot:null},source:e,subscribe:n},ua(r,e,t,n)},useOpaqueIdentifier:function(){if(Fo){var e=!1,t=function(e){return{$$typeof:R,toString:e,valueOf:e}}((function(){throw e||(e=!0,n("r:"+(Yr++).toString(36))),Error(a(355))})),n=fa(t)[1];return 0==(2&Ko.mode)&&(Ko.flags|=516,ha(5,(function(){n("r:"+(Yr++).toString(36))}),void 0,null)),t}return fa(t="r:"+(Yr++).toString(36)),t},unstable_isNewReconciler:!1},Ta={readContext:no,useCallback:Sa,useContext:no,useEffect:ya,useImperativeHandle:wa,useLayoutEffect:xa,useMemo:Ea,useReducer:sa,useRef:ga,useState:function(){return sa(aa)},useDebugValue:ka,useDeferredValue:function(e){var t=sa(aa),n=t[0],r=t[1];return ya((function(){var t=Qo.transition;Qo.transition=1;try{r(e)}finally{Qo.transition=t}}),[e]),n},useTransition:function(){var e=sa(aa)[0];return[ga().current,e]},useMutableSource:da,useOpaqueIdentifier:function(){return sa(aa)[0]},unstable_isNewReconciler:!1},Da={readContext:no,useCallback:Sa,useContext:no,useEffect:ya,useImperativeHandle:wa,useLayoutEffect:xa,useMemo:Ea,useReducer:la,useRef:ga,useState:function(){return la(aa)},useDebugValue:ka,useDeferredValue:function(e){var t=la(aa),n=t[0],r=t[1];return ya((function(){var t=Qo.transition;Qo.transition=1;try{r(e)}finally{Qo.transition=t}}),[e]),n},useTransition:function(){var e=la(aa)[0];return[ga().current,e]},useMutableSource:da,useOpaqueIdentifier:function(){return la(aa)[0]},unstable_isNewReconciler:!1},La=_.ReactCurrentOwner,ja=!1;function Aa(e,t,n,r){t.child=null===e?So(t,null,n,r):ko(t,e.child,n,r)}function Ra(e,t,n,r,i){n=n.render;var o=t.ref;return to(t,i),r=ra(e,t,n,r,o,i),null===e||ja?(t.flags|=1,Aa(e,t,r,i),t.child):(t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes&=~i,Ja(e,t,i))}function Na(e,t,n,r,i,o){if(null===e){var a=n.type;return"function"!=typeof a||Il(a)||void 0!==a.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Vl(n.type,null,r,t,t.mode,o)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=a,za(e,t,a,r,i,o))}return a=e.child,0==(i&o)&&(i=a.memoizedProps,(n=null!==(n=n.compare)?n:lr)(i,r)&&e.ref===t.ref)?Ja(e,t,o):(t.flags|=1,(e=Bl(a,r)).ref=t.ref,e.return=t,t.child=e)}function za(e,t,n,r,i,o){if(null!==e&&lr(e.memoizedProps,r)&&e.ref===t.ref){if(ja=!1,0==(o&i))return t.lanes=e.lanes,Ja(e,t,o);0!=(16384&e.flags)&&(ja=!0)}return Ba(e,t,n,r,o)}function Fa(e,t,n){var r=t.pendingProps,i=r.children,o=null!==e?e.memoizedState:null;if("hidden"===r.mode||"unstable-defer-without-hiding"===r.mode)if(0==(4&t.mode))t.memoizedState={baseLanes:0},ml(0,n);else{if(0==(1073741824&n))return e=null!==o?o.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e},ml(0,e),null;t.memoizedState={baseLanes:0},ml(0,null!==o?o.baseLanes:n)}else null!==o?(r=o.baseLanes|n,t.memoizedState=null):r=n,ml(0,r);return Aa(e,t,i,n),t.child}function Ia(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.flags|=128)}function Ba(e,t,n,r,i){var o=hi(n)?di:ci.current;return o=fi(t,o),to(t,i),n=ra(e,t,n,r,o,i),null===e||ja?(t.flags|=1,Aa(e,t,n,i),t.child):(t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes&=~i,Ja(e,t,i))}function Va(e,t,n,r,i){if(hi(n)){var o=!0;vi(t)}else o=!1;if(to(t,i),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),mo(t,n,r),bo(t,n,r,i),r=!0;else if(null===e){var a=t.stateNode,s=t.memoizedProps;a.props=s;var l=a.context,c=n.contextType;c="object"==typeof c&&null!==c?no(c):fi(t,c=hi(n)?di:ci.current);var u=n.getDerivedStateFromProps,d="function"==typeof u||"function"==typeof a.getSnapshotBeforeUpdate;d||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(s!==r||l!==c)&&vo(t,a,r,c),ro=!1;var f=t.memoizedState;a.state=f,co(t,r,a,i),l=t.memoizedState,s!==r||f!==l||ui.current||ro?("function"==typeof u&&(ho(t,n,u,r),l=t.memoizedState),(s=ro||go(t,n,s,r,f,l,c))?(d||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||("function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount()),"function"==typeof a.componentDidMount&&(t.flags|=4)):("function"==typeof a.componentDidMount&&(t.flags|=4),t.memoizedProps=r,t.memoizedState=l),a.props=r,a.state=l,a.context=c,r=s):("function"==typeof a.componentDidMount&&(t.flags|=4),r=!1)}else{a=t.stateNode,oo(e,t),s=t.memoizedProps,c=t.type===t.elementType?s:qi(t.type,s),a.props=c,d=t.pendingProps,f=a.context,l="object"==typeof(l=n.contextType)&&null!==l?no(l):fi(t,l=hi(n)?di:ci.current);var h=n.getDerivedStateFromProps;(u="function"==typeof h||"function"==typeof a.getSnapshotBeforeUpdate)||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(s!==d||f!==l)&&vo(t,a,r,l),ro=!1,f=t.memoizedState,a.state=f,co(t,r,a,i);var p=t.memoizedState;s!==d||f!==p||ui.current||ro?("function"==typeof h&&(ho(t,n,h,r),p=t.memoizedState),(c=ro||go(t,n,c,r,f,p,l))?(u||"function"!=typeof a.UNSAFE_componentWillUpdate&&"function"!=typeof a.componentWillUpdate||("function"==typeof a.componentWillUpdate&&a.componentWillUpdate(r,p,l),"function"==typeof a.UNSAFE_componentWillUpdate&&a.UNSAFE_componentWillUpdate(r,p,l)),"function"==typeof a.componentDidUpdate&&(t.flags|=4),"function"==typeof a.getSnapshotBeforeUpdate&&(t.flags|=256)):("function"!=typeof a.componentDidUpdate||s===e.memoizedProps&&f===e.memoizedState||(t.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||s===e.memoizedProps&&f===e.memoizedState||(t.flags|=256),t.memoizedProps=r,t.memoizedState=p),a.props=r,a.state=p,a.context=l,r=c):("function"!=typeof a.componentDidUpdate||s===e.memoizedProps&&f===e.memoizedState||(t.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||s===e.memoizedProps&&f===e.memoizedState||(t.flags|=256),r=!1)}return Wa(e,t,n,r,o,i)}function Wa(e,t,n,r,i,o){Ia(e,t);var a=0!=(64&t.flags);if(!r&&!a)return i&&bi(t,n,!1),Ja(e,t,o);r=t.stateNode,La.current=t;var s=a&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.flags|=1,null!==e&&a?(t.child=ko(t,e.child,null,o),t.child=ko(t,null,s,o)):Aa(e,t,s,o),t.memoizedState=r.state,i&&bi(t,n,!0),t.child}function Ua(e){var t=e.stateNode;t.pendingContext?gi(0,t.pendingContext,t.pendingContext!==t.context):t.context&&gi(0,t.context,!1),To(e,t.containerInfo)}var Ha,$a,Ya,qa={dehydrated:null,retryLane:0};function Qa(e,t,n){var r,i=t.pendingProps,o=Ao.current,a=!1;return(r=0!=(64&t.flags))||(r=(null===e||null!==e.memoizedState)&&0!=(2&o)),r?(a=!0,t.flags&=-65):null!==e&&null===e.memoizedState||void 0===i.fallback||!0===i.unstable_avoidThisFallback||(o|=1),si(Ao,1&o),null===e?(void 0!==i.fallback&&Vo(t),e=i.children,o=i.fallback,a?(e=Xa(t,e,o,n),t.child.memoizedState={baseLanes:n},t.memoizedState=qa,e):"number"==typeof i.unstable_expectedLoadTime?(e=Xa(t,e,o,n),t.child.memoizedState={baseLanes:n},t.memoizedState=qa,t.lanes=33554432,e):((n=Ul({mode:"visible",children:e},t.mode,n,null)).return=t,t.child=n)):(e.memoizedState,a?(i=function(e,t,n,r,i){var o=t.mode,a=e.child;e=a.sibling;var s={mode:"hidden",children:n};return 0==(2&o)&&t.child!==a?((n=t.child).childLanes=0,n.pendingProps=s,null!==(a=n.lastEffect)?(t.firstEffect=n.firstEffect,t.lastEffect=a,a.nextEffect=null):t.firstEffect=t.lastEffect=null):n=Bl(a,s),null!==e?r=Bl(e,r):(r=Wl(r,o,i,null)).flags|=2,r.return=t,n.return=t,n.sibling=r,t.child=n,r}(e,t,i.children,i.fallback,n),a=t.child,o=e.child.memoizedState,a.memoizedState=null===o?{baseLanes:n}:{baseLanes:o.baseLanes|n},a.childLanes=e.childLanes&~n,t.memoizedState=qa,i):(n=function(e,t,n,r){var i=e.child;return e=i.sibling,n=Bl(i,{mode:"visible",children:n}),0==(2&t.mode)&&(n.lanes=r),n.return=t,n.sibling=null,null!==e&&(e.nextEffect=null,e.flags=8,t.firstEffect=t.lastEffect=e),t.child=n}(e,t,i.children,n),t.memoizedState=null,n))}function Xa(e,t,n,r){var i=e.mode,o=e.child;return t={mode:"hidden",children:t},0==(2&i)&&null!==o?(o.childLanes=0,o.pendingProps=t):o=Ul(t,i,0,null),n=Wl(n,i,r,null),o.return=e,n.return=e,o.sibling=n,e.child=o,n}function Ka(e,t){e.lanes|=t;var n=e.alternate;null!==n&&(n.lanes|=t),eo(e.return,t)}function Za(e,t,n,r,i,o){var a=e.memoizedState;null===a?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:i,lastEffect:o}:(a.isBackwards=t,a.rendering=null,a.renderingStartTime=0,a.last=r,a.tail=n,a.tailMode=i,a.lastEffect=o)}function Ga(e,t,n){var r=t.pendingProps,i=r.revealOrder,o=r.tail;if(Aa(e,t,r.children,n),0!=(2&(r=Ao.current)))r=1&r|2,t.flags|=64;else{if(null!==e&&0!=(64&e.flags))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Ka(e,n);else if(19===e.tag)Ka(e,n);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(si(Ao,r),0==(2&t.mode))t.memoizedState=null;else switch(i){case"forwards":for(n=t.child,i=null;null!==n;)null!==(e=n.alternate)&&null===Ro(e)&&(i=n),n=n.sibling;null===(n=i)?(i=t.child,t.child=null):(i=n.sibling,n.sibling=null),Za(t,!1,i,n,o,t.lastEffect);break;case"backwards":for(n=null,i=t.child,t.child=null;null!==i;){if(null!==(e=i.alternate)&&null===Ro(e)){t.child=i;break}e=i.sibling,i.sibling=n,n=i,i=e}Za(t,!0,n,null,o,t.lastEffect);break;case"together":Za(t,!1,null,null,void 0,t.lastEffect);break;default:t.memoizedState=null}return t.child}function Ja(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),Rs|=t.lanes,0!=(n&t.childLanes)){if(null!==e&&t.child!==e.child)throw Error(a(153));if(null!==t.child){for(n=Bl(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Bl(e,e.pendingProps)).return=t;n.sibling=null}return t.child}return null}function es(e,t){if(!Fo)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function ts(e,t,n){var r=t.pendingProps;switch(t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return null;case 1:return hi(t.type)&&pi(),null;case 3:return Do(),ai(ui),ai(ci),Yo(),(r=t.stateNode).pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(Uo(t)?t.flags|=4:r.hydrate||(t.flags|=256)),null;case 5:jo(t);var o=Oo(Po.current);if(n=t.type,null!==e&&null!=t.stateNode)$a(e,t,n,r),e.ref!==t.ref&&(t.flags|=128);else{if(!r){if(null===t.stateNode)throw Error(a(166));return null}if(e=Oo(Mo.current),Uo(t)){r=t.stateNode,n=t.type;var s=t.memoizedProps;switch(r[Qr]=t,r[Xr]=s,n){case"dialog":Mr("cancel",r),Mr("close",r);break;case"iframe":case"object":case"embed":Mr("load",r);break;case"video":case"audio":for(e=0;e<wr.length;e++)Mr(wr[e],r);break;case"source":Mr("error",r);break;case"img":case"image":case"link":Mr("error",r),Mr("load",r);break;case"details":Mr("toggle",r);break;case"input":ee(r,s),Mr("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!s.multiple},Mr("invalid",r);break;case"textarea":le(r,s),Mr("invalid",r)}for(var c in ke(n,s),e=null,s)s.hasOwnProperty(c)&&(o=s[c],"children"===c?"string"==typeof o?r.textContent!==o&&(e=["children",o]):"number"==typeof o&&r.textContent!==""+o&&(e=["children",""+o]):l.hasOwnProperty(c)&&null!=o&&"onScroll"===c&&Mr("scroll",r));switch(n){case"input":K(r),re(r,s,!0);break;case"textarea":K(r),ue(r);break;case"select":case"option":break;default:"function"==typeof s.onClick&&(r.onclick=Nr)}r=e,t.updateQueue=r,null!==r&&(t.flags|=4)}else{switch(c=9===o.nodeType?o:o.ownerDocument,e===de&&(e=fe(n)),e===de?"script"===n?((e=c.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=c.createElement(n,{is:r.is}):(e=c.createElement(n),"select"===n&&(c=e,r.multiple?c.multiple=!0:r.size&&(c.size=r.size))):e=c.createElementNS(e,n),e[Qr]=t,e[Xr]=r,Ha(e,t),t.stateNode=e,c=Se(n,r),n){case"dialog":Mr("cancel",e),Mr("close",e),o=r;break;case"iframe":case"object":case"embed":Mr("load",e),o=r;break;case"video":case"audio":for(o=0;o<wr.length;o++)Mr(wr[o],e);o=r;break;case"source":Mr("error",e),o=r;break;case"img":case"image":case"link":Mr("error",e),Mr("load",e),o=r;break;case"details":Mr("toggle",e),o=r;break;case"input":ee(e,r),o=J(e,r),Mr("invalid",e);break;case"option":o=oe(e,r);break;case"select":e._wrapperState={wasMultiple:!!r.multiple},o=i({},r,{value:void 0}),Mr("invalid",e);break;case"textarea":le(e,r),o=se(e,r),Mr("invalid",e);break;default:o=r}ke(n,o);var u=o;for(s in u)if(u.hasOwnProperty(s)){var d=u[s];"style"===s?_e(e,d):"dangerouslySetInnerHTML"===s?null!=(d=d?d.__html:void 0)&&me(e,d):"children"===s?"string"==typeof d?("textarea"!==n||""!==d)&&ve(e,d):"number"==typeof d&&ve(e,""+d):"suppressContentEditableWarning"!==s&&"suppressHydrationWarning"!==s&&"autoFocus"!==s&&(l.hasOwnProperty(s)?null!=d&&"onScroll"===s&&Mr("scroll",e):null!=d&&x(e,s,d,c))}switch(n){case"input":K(e),re(e,r,!1);break;case"textarea":K(e),ue(e);break;case"option":null!=r.value&&e.setAttribute("value",""+Q(r.value));break;case"select":e.multiple=!!r.multiple,null!=(s=r.value)?ae(e,!!r.multiple,s,!1):null!=r.defaultValue&&ae(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof o.onClick&&(e.onclick=Nr)}Ir(n,r)&&(t.flags|=4)}null!==t.ref&&(t.flags|=128)}return null;case 6:if(e&&null!=t.stateNode)Ya(0,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(a(166));n=Oo(Po.current),Oo(Mo.current),Uo(t)?(r=t.stateNode,n=t.memoizedProps,r[Qr]=t,r.nodeValue!==n&&(t.flags|=4)):((r=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[Qr]=t,t.stateNode=r)}return null;case 13:return ai(Ao),r=t.memoizedState,0!=(64&t.flags)?(t.lanes=n,t):(r=null!==r,n=!1,null===e?void 0!==t.memoizedProps.fallback&&Uo(t):n=null!==e.memoizedState,r&&!n&&0!=(2&t.mode)&&(null===e&&!0!==t.memoizedProps.unstable_avoidThisFallback||0!=(1&Ao.current)?0===Ls&&(Ls=3):(0!==Ls&&3!==Ls||(Ls=4),null===Cs||0==(134217727&Rs)&&0==(134217727&Ns)||fl(Cs,Os))),(r||n)&&(t.flags|=4),null);case 4:return Do(),null===e&&Pr(t.stateNode.containerInfo),null;case 10:return Ji(t),null;case 17:return hi(t.type)&&pi(),null;case 19:if(ai(Ao),null===(r=t.memoizedState))return null;if(s=0!=(64&t.flags),null===(c=r.rendering))if(s)es(r,!1);else{if(0!==Ls||null!==e&&0!=(64&e.flags))for(e=t.child;null!==e;){if(null!==(c=Ro(e))){for(t.flags|=64,es(r,!1),null!==(s=c.updateQueue)&&(t.updateQueue=s,t.flags|=4),null===r.lastEffect&&(t.firstEffect=null),t.lastEffect=r.lastEffect,r=n,n=t.child;null!==n;)e=r,(s=n).flags&=2,s.nextEffect=null,s.firstEffect=null,s.lastEffect=null,null===(c=s.alternate)?(s.childLanes=0,s.lanes=e,s.child=null,s.memoizedProps=null,s.memoizedState=null,s.updateQueue=null,s.dependencies=null,s.stateNode=null):(s.childLanes=c.childLanes,s.lanes=c.lanes,s.child=c.child,s.memoizedProps=c.memoizedProps,s.memoizedState=c.memoizedState,s.updateQueue=c.updateQueue,s.type=c.type,e=c.dependencies,s.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return si(Ao,1&Ao.current|2),t.child}e=e.sibling}null!==r.tail&&Ii()>Bs&&(t.flags|=64,s=!0,es(r,!1),t.lanes=33554432)}else{if(!s)if(null!==(e=Ro(c))){if(t.flags|=64,s=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.flags|=4),es(r,!0),null===r.tail&&"hidden"===r.tailMode&&!c.alternate&&!Fo)return null!==(t=t.lastEffect=r.lastEffect)&&(t.nextEffect=null),null}else 2*Ii()-r.renderingStartTime>Bs&&1073741824!==n&&(t.flags|=64,s=!0,es(r,!1),t.lanes=33554432);r.isBackwards?(c.sibling=t.child,t.child=c):(null!==(n=r.last)?n.sibling=c:t.child=c,r.last=c)}return null!==r.tail?(n=r.tail,r.rendering=n,r.tail=n.sibling,r.lastEffect=t.lastEffect,r.renderingStartTime=Ii(),n.sibling=null,t=Ao.current,si(Ao,s?1&t|2:1&t),n):null;case 23:case 24:return vl(),null!==e&&null!==e.memoizedState!=(null!==t.memoizedState)&&"unstable-defer-without-hiding"!==r.mode&&(t.flags|=4),null}throw Error(a(156,t.tag))}function ns(e){switch(e.tag){case 1:hi(e.type)&&pi();var t=e.flags;return 4096&t?(e.flags=-4097&t|64,e):null;case 3:if(Do(),ai(ui),ai(ci),Yo(),0!=(64&(t=e.flags)))throw Error(a(285));return e.flags=-4097&t|64,e;case 5:return jo(e),null;case 13:return ai(Ao),4096&(t=e.flags)?(e.flags=-4097&t|64,e):null;case 19:return ai(Ao),null;case 4:return Do(),null;case 10:return Ji(e),null;case 23:case 24:return vl(),null;default:return null}}function rs(e,t){try{var n="",r=t;do{n+=Y(r),r=r.return}while(r);var i=n}catch(e){i="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:i}}function is(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}Ha=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},$a=function(e,t,n,r){var o=e.memoizedProps;if(o!==r){e=t.stateNode,Oo(Mo.current);var a,s=null;switch(n){case"input":o=J(e,o),r=J(e,r),s=[];break;case"option":o=oe(e,o),r=oe(e,r),s=[];break;case"select":o=i({},o,{value:void 0}),r=i({},r,{value:void 0}),s=[];break;case"textarea":o=se(e,o),r=se(e,r),s=[];break;default:"function"!=typeof o.onClick&&"function"==typeof r.onClick&&(e.onclick=Nr)}for(d in ke(n,r),n=null,o)if(!r.hasOwnProperty(d)&&o.hasOwnProperty(d)&&null!=o[d])if("style"===d){var c=o[d];for(a in c)c.hasOwnProperty(a)&&(n||(n={}),n[a]="")}else"dangerouslySetInnerHTML"!==d&&"children"!==d&&"suppressContentEditableWarning"!==d&&"suppressHydrationWarning"!==d&&"autoFocus"!==d&&(l.hasOwnProperty(d)?s||(s=[]):(s=s||[]).push(d,null));for(d in r){var u=r[d];if(c=null!=o?o[d]:void 0,r.hasOwnProperty(d)&&u!==c&&(null!=u||null!=c))if("style"===d)if(c){for(a in c)!c.hasOwnProperty(a)||u&&u.hasOwnProperty(a)||(n||(n={}),n[a]="");for(a in u)u.hasOwnProperty(a)&&c[a]!==u[a]&&(n||(n={}),n[a]=u[a])}else n||(s||(s=[]),s.push(d,n)),n=u;else"dangerouslySetInnerHTML"===d?(u=u?u.__html:void 0,c=c?c.__html:void 0,null!=u&&c!==u&&(s=s||[]).push(d,u)):"children"===d?"string"!=typeof u&&"number"!=typeof u||(s=s||[]).push(d,""+u):"suppressContentEditableWarning"!==d&&"suppressHydrationWarning"!==d&&(l.hasOwnProperty(d)?(null!=u&&"onScroll"===d&&Mr("scroll",e),s||c===u||(s=[])):"object"==typeof u&&null!==u&&u.$$typeof===R?u.toString():(s=s||[]).push(d,u))}n&&(s=s||[]).push("style",n);var d=s;(t.updateQueue=d)&&(t.flags|=4)}},Ya=function(e,t,n,r){n!==r&&(t.flags|=4)};var os="function"==typeof WeakMap?WeakMap:Map;function as(e,t,n){(n=ao(-1,n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Hs||(Hs=!0,$s=r),is(0,t)},n}function ss(e,t,n){(n=ao(-1,n)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var i=t.value;n.payload=function(){return is(0,t),r(i)}}var o=e.stateNode;return null!==o&&"function"==typeof o.componentDidCatch&&(n.callback=function(){"function"!=typeof r&&(null===Ys?Ys=new Set([this]):Ys.add(this),is(0,t));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),n}var ls="function"==typeof WeakSet?WeakSet:Set;function cs(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){Al(e,t)}else t.current=null}function us(e,t){switch(t.tag){case 0:case 11:case 15:case 22:return;case 1:if(256&t.flags&&null!==e){var n=e.memoizedProps,r=e.memoizedState;t=(e=t.stateNode).getSnapshotBeforeUpdate(t.elementType===t.type?n:qi(t.type,n),r),e.__reactInternalSnapshotBeforeUpdate=t}return;case 3:return void(256&t.flags&&Ur(t.stateNode.containerInfo));case 5:case 6:case 4:case 17:return}throw Error(a(163))}function ds(e,t,n){switch(n.tag){case 0:case 11:case 15:case 22:if(null!==(t=null!==(t=n.updateQueue)?t.lastEffect:null)){e=t=t.next;do{if(3==(3&e.tag)){var r=e.create;e.destroy=r()}e=e.next}while(e!==t)}if(null!==(t=null!==(t=n.updateQueue)?t.lastEffect:null)){e=t=t.next;do{var i=e;r=i.next,0!=(4&(i=i.tag))&&0!=(1&i)&&(Dl(n,e),Tl(n,e)),e=r}while(e!==t)}return;case 1:return e=n.stateNode,4&n.flags&&(null===t?e.componentDidMount():(r=n.elementType===n.type?t.memoizedProps:qi(n.type,t.memoizedProps),e.componentDidUpdate(r,t.memoizedState,e.__reactInternalSnapshotBeforeUpdate))),void(null!==(t=n.updateQueue)&&uo(n,t,e));case 3:if(null!==(t=n.updateQueue)){if(e=null,null!==n.child)switch(n.child.tag){case 5:e=n.child.stateNode;break;case 1:e=n.child.stateNode}uo(n,t,e)}return;case 5:return e=n.stateNode,void(null===t&&4&n.flags&&Ir(n.type,n.memoizedProps)&&e.focus());case 6:case 4:case 12:return;case 13:return void(null===n.memoizedState&&(n=n.alternate,null!==n&&(n=n.memoizedState,null!==n&&(n=n.dehydrated,null!==n&&_t(n)))));case 19:case 17:case 20:case 21:case 23:case 24:return}throw Error(a(163))}function fs(e,t){for(var n=e;;){if(5===n.tag){var r=n.stateNode;if(t)"function"==typeof(r=r.style).setProperty?r.setProperty("display","none","important"):r.display="none";else{r=n.stateNode;var i=n.memoizedProps.style;i=null!=i&&i.hasOwnProperty("display")?i.display:null,r.style.display=xe("display",i)}}else if(6===n.tag)n.stateNode.nodeValue=t?"":n.memoizedProps;else if((23!==n.tag&&24!==n.tag||null===n.memoizedState||n===e)&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return;n=n.return}n.sibling.return=n.return,n=n.sibling}}function hs(e,t){if(xi&&"function"==typeof xi.onCommitFiberUnmount)try{xi.onCommitFiberUnmount(yi,t)}catch(e){}switch(t.tag){case 0:case 11:case 14:case 15:case 22:if(null!==(e=t.updateQueue)&&null!==(e=e.lastEffect)){var n=e=e.next;do{var r=n,i=r.destroy;if(r=r.tag,void 0!==i)if(0!=(4&r))Dl(t,n);else{r=t;try{i()}catch(e){Al(r,e)}}n=n.next}while(n!==e)}break;case 1:if(cs(t),"function"==typeof(e=t.stateNode).componentWillUnmount)try{e.props=t.memoizedProps,e.state=t.memoizedState,e.componentWillUnmount()}catch(e){Al(t,e)}break;case 5:cs(t);break;case 4:ys(e,t)}}function ps(e){e.alternate=null,e.child=null,e.dependencies=null,e.firstEffect=null,e.lastEffect=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.return=null,e.updateQueue=null}function gs(e){return 5===e.tag||3===e.tag||4===e.tag}function ms(e){e:{for(var t=e.return;null!==t;){if(gs(t))break e;t=t.return}throw Error(a(160))}var n=t;switch(t=n.stateNode,n.tag){case 5:var r=!1;break;case 3:case 4:t=t.containerInfo,r=!0;break;default:throw Error(a(161))}16&n.flags&&(ve(t,""),n.flags&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||gs(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag&&18!==n.tag;){if(2&n.flags)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.flags)){n=n.stateNode;break e}}r?vs(e,n,t):bs(e,n,t)}function vs(e,t,n){var r=e.tag,i=5===r||6===r;if(i)e=i?e.stateNode:e.stateNode.instance,t?8===n.nodeType?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(8===n.nodeType?(t=n.parentNode).insertBefore(e,n):(t=n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=Nr));else if(4!==r&&null!==(e=e.child))for(vs(e,t,n),e=e.sibling;null!==e;)vs(e,t,n),e=e.sibling}function bs(e,t,n){var r=e.tag,i=5===r||6===r;if(i)e=i?e.stateNode:e.stateNode.instance,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&null!==(e=e.child))for(bs(e,t,n),e=e.sibling;null!==e;)bs(e,t,n),e=e.sibling}function ys(e,t){for(var n,r,i=t,o=!1;;){if(!o){o=i.return;e:for(;;){if(null===o)throw Error(a(160));switch(n=o.stateNode,o.tag){case 5:r=!1;break e;case 3:case 4:n=n.containerInfo,r=!0;break e}o=o.return}o=!0}if(5===i.tag||6===i.tag){e:for(var s=e,l=i,c=l;;)if(hs(s,c),null!==c.child&&4!==c.tag)c.child.return=c,c=c.child;else{if(c===l)break e;for(;null===c.sibling;){if(null===c.return||c.return===l)break e;c=c.return}c.sibling.return=c.return,c=c.sibling}r?(s=n,l=i.stateNode,8===s.nodeType?s.parentNode.removeChild(l):s.removeChild(l)):n.removeChild(i.stateNode)}else if(4===i.tag){if(null!==i.child){n=i.stateNode.containerInfo,r=!0,i.child.return=i,i=i.child;continue}}else if(hs(e,i),null!==i.child){i.child.return=i,i=i.child;continue}if(i===t)break;for(;null===i.sibling;){if(null===i.return||i.return===t)return;4===(i=i.return).tag&&(o=!1)}i.sibling.return=i.return,i=i.sibling}}function xs(e,t){switch(t.tag){case 0:case 11:case 14:case 15:case 22:var n=t.updateQueue;if(null!==(n=null!==n?n.lastEffect:null)){var r=n=n.next;do{3==(3&r.tag)&&(e=r.destroy,r.destroy=void 0,void 0!==e&&e()),r=r.next}while(r!==n)}return;case 1:return;case 5:if(null!=(n=t.stateNode)){r=t.memoizedProps;var i=null!==e?e.memoizedProps:r;e=t.type;var o=t.updateQueue;if(t.updateQueue=null,null!==o){for(n[Xr]=r,"input"===e&&"radio"===r.type&&null!=r.name&&te(n,r),Se(e,i),t=Se(e,r),i=0;i<o.length;i+=2){var s=o[i],l=o[i+1];"style"===s?_e(n,l):"dangerouslySetInnerHTML"===s?me(n,l):"children"===s?ve(n,l):x(n,s,l,t)}switch(e){case"input":ne(n,r);break;case"textarea":ce(n,r);break;case"select":e=n._wrapperState.wasMultiple,n._wrapperState.wasMultiple=!!r.multiple,null!=(o=r.value)?ae(n,!!r.multiple,o,!1):e!==!!r.multiple&&(null!=r.defaultValue?ae(n,!!r.multiple,r.defaultValue,!0):ae(n,!!r.multiple,r.multiple?[]:"",!1))}}}return;case 6:if(null===t.stateNode)throw Error(a(162));return void(t.stateNode.nodeValue=t.memoizedProps);case 3:return void((n=t.stateNode).hydrate&&(n.hydrate=!1,_t(n.containerInfo)));case 12:return;case 13:return null!==t.memoizedState&&(Is=Ii(),fs(t.child,!0)),void _s(t);case 19:return void _s(t);case 17:return;case 23:case 24:return void fs(t,null!==t.memoizedState)}throw Error(a(163))}function _s(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new ls),t.forEach((function(t){var r=Nl.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}function ws(e,t){return null!==e&&(null===(e=e.memoizedState)||null!==e.dehydrated)&&null!==(t=t.memoizedState)&&null===t.dehydrated}var ks=Math.ceil,Ss=_.ReactCurrentDispatcher,Es=_.ReactCurrentOwner,Ms=0,Cs=null,Ps=null,Os=0,Ts=0,Ds=oi(0),Ls=0,js=null,As=0,Rs=0,Ns=0,zs=0,Fs=null,Is=0,Bs=1/0;function Vs(){Bs=Ii()+500}var Ws,Us=null,Hs=!1,$s=null,Ys=null,qs=!1,Qs=null,Xs=90,Ks=[],Zs=[],Gs=null,Js=0,el=null,tl=-1,nl=0,rl=0,il=null,ol=!1;function al(){return 0!=(48&Ms)?Ii():-1!==tl?tl:tl=Ii()}function sl(e){if(0==(2&(e=e.mode)))return 1;if(0==(4&e))return 99===Bi()?1:2;if(0===nl&&(nl=As),0!==Yi.transition){0!==rl&&(rl=null!==Fs?Fs.pendingLanes:0),e=nl;var t=4186112&~rl;return 0==(t&=-t)&&0==(t=(e=4186112&~e)&-e)&&(t=8192),t}return e=Bi(),e=It(0!=(4&Ms)&&98===e?12:e=function(e){switch(e){case 99:return 15;case 98:return 10;case 97:case 96:return 8;case 95:return 2;default:return 0}}(e),nl)}function ll(e,t,n){if(50<Js)throw Js=0,el=null,Error(a(185));if(null===(e=cl(e,t)))return null;Wt(e,t,n),e===Cs&&(Ns|=t,4===Ls&&fl(e,Os));var r=Bi();1===t?0!=(8&Ms)&&0==(48&Ms)?hl(e):(ul(e,n),0===Ms&&(Vs(),Hi())):(0==(4&Ms)||98!==r&&99!==r||(null===Gs?Gs=new Set([e]):Gs.add(e)),ul(e,n)),Fs=e}function cl(e,t){e.lanes|=t;var n=e.alternate;for(null!==n&&(n.lanes|=t),n=e,e=e.return;null!==e;)e.childLanes|=t,null!==(n=e.alternate)&&(n.childLanes|=t),n=e,e=e.return;return 3===n.tag?n.stateNode:null}function ul(e,t){for(var n=e.callbackNode,r=e.suspendedLanes,i=e.pingedLanes,o=e.expirationTimes,s=e.pendingLanes;0<s;){var l=31-Ut(s),c=1<<l,u=o[l];if(-1===u){if(0==(c&r)||0!=(c&i)){u=t,Nt(c);var d=Rt;o[l]=10<=d?u+250:6<=d?u+5e3:-1}}else u<=t&&(e.expiredLanes|=c);s&=~c}if(r=zt(e,e===Cs?Os:0),t=Rt,0===r)null!==n&&(n!==ji&&ki(n),e.callbackNode=null,e.callbackPriority=0);else{if(null!==n){if(e.callbackPriority===t)return;n!==ji&&ki(n)}15===t?(n=hl.bind(null,e),null===Ri?(Ri=[n],Ni=wi(Pi,$i)):Ri.push(n),n=ji):n=14===t?Ui(99,hl.bind(null,e)):Ui(n=function(e){switch(e){case 15:case 14:return 99;case 13:case 12:case 11:case 10:return 98;case 9:case 8:case 7:case 6:case 4:case 5:return 97;case 3:case 2:case 1:return 95;case 0:return 90;default:throw Error(a(358,e))}}(t),dl.bind(null,e)),e.callbackPriority=t,e.callbackNode=n}}function dl(e){if(tl=-1,rl=nl=0,0!=(48&Ms))throw Error(a(327));var t=e.callbackNode;if(Ol()&&e.callbackNode!==t)return null;var n=zt(e,e===Cs?Os:0);if(0===n)return null;var r=n,i=Ms;Ms|=16;var o=xl();for(Cs===e&&Os===r||(Vs(),bl(e,r));;)try{kl();break}catch(t){yl(e,t)}if(Gi(),Ss.current=o,Ms=i,null!==Ps?r=0:(Cs=null,Os=0,r=Ls),0!=(As&Ns))bl(e,0);else if(0!==r){if(2===r&&(Ms|=64,e.hydrate&&(e.hydrate=!1,Ur(e.containerInfo)),0!==(n=Ft(e))&&(r=_l(e,n))),1===r)throw t=js,bl(e,0),fl(e,n),ul(e,Ii()),t;switch(e.finishedWork=e.current.alternate,e.finishedLanes=n,r){case 0:case 1:throw Error(a(345));case 2:Ml(e);break;case 3:if(fl(e,n),(62914560&n)===n&&10<(r=Is+500-Ii())){if(0!==zt(e,0))break;if(((i=e.suspendedLanes)&n)!==n){al(),e.pingedLanes|=e.suspendedLanes&i;break}e.timeoutHandle=Vr(Ml.bind(null,e),r);break}Ml(e);break;case 4:if(fl(e,n),(4186112&n)===n)break;for(r=e.eventTimes,i=-1;0<n;){var s=31-Ut(n);o=1<<s,(s=r[s])>i&&(i=s),n&=~o}if(n=i,10<(n=(120>(n=Ii()-n)?120:480>n?480:1080>n?1080:1920>n?1920:3e3>n?3e3:4320>n?4320:1960*ks(n/1960))-n)){e.timeoutHandle=Vr(Ml.bind(null,e),n);break}Ml(e);break;case 5:Ml(e);break;default:throw Error(a(329))}}return ul(e,Ii()),e.callbackNode===t?dl.bind(null,e):null}function fl(e,t){for(t&=~zs,t&=~Ns,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-Ut(t),r=1<<n;e[n]=-1,t&=~r}}function hl(e){if(0!=(48&Ms))throw Error(a(327));if(Ol(),e===Cs&&0!=(e.expiredLanes&Os)){var t=Os,n=_l(e,t);0!=(As&Ns)&&(n=_l(e,t=zt(e,t)))}else n=_l(e,t=zt(e,0));if(0!==e.tag&&2===n&&(Ms|=64,e.hydrate&&(e.hydrate=!1,Ur(e.containerInfo)),0!==(t=Ft(e))&&(n=_l(e,t))),1===n)throw n=js,bl(e,0),fl(e,t),ul(e,Ii()),n;return e.finishedWork=e.current.alternate,e.finishedLanes=t,Ml(e),ul(e,Ii()),null}function pl(e,t){var n=Ms;Ms|=1;try{return e(t)}finally{0===(Ms=n)&&(Vs(),Hi())}}function gl(e,t){var n=Ms;Ms&=-2,Ms|=8;try{return e(t)}finally{0===(Ms=n)&&(Vs(),Hi())}}function ml(e,t){si(Ds,Ts),Ts|=t,As|=t}function vl(){Ts=Ds.current,ai(Ds)}function bl(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,Wr(n)),null!==Ps)for(n=Ps.return;null!==n;){var r=n;switch(r.tag){case 1:null!=(r=r.type.childContextTypes)&&pi();break;case 3:Do(),ai(ui),ai(ci),Yo();break;case 5:jo(r);break;case 4:Do();break;case 13:case 19:ai(Ao);break;case 10:Ji(r);break;case 23:case 24:vl()}n=n.return}Cs=e,Ps=Bl(e.current,null),Os=Ts=As=t,Ls=0,js=null,zs=Ns=Rs=0}function yl(e,t){for(;;){var n=Ps;try{if(Gi(),qo.current=Pa,Jo){for(var r=Ko.memoizedState;null!==r;){var i=r.queue;null!==i&&(i.pending=null),r=r.next}Jo=!1}if(Xo=0,Go=Zo=Ko=null,ea=!1,Es.current=null,null===n||null===n.return){Ls=1,js=t,Ps=null;break}e:{var o=e,a=n.return,s=n,l=t;if(t=Os,s.flags|=2048,s.firstEffect=s.lastEffect=null,null!==l&&"object"==typeof l&&"function"==typeof l.then){var c=l;if(0==(2&s.mode)){var u=s.alternate;u?(s.updateQueue=u.updateQueue,s.memoizedState=u.memoizedState,s.lanes=u.lanes):(s.updateQueue=null,s.memoizedState=null)}var d=0!=(1&Ao.current),f=a;do{var h;if(h=13===f.tag){var p=f.memoizedState;if(null!==p)h=null!==p.dehydrated;else{var g=f.memoizedProps;h=void 0!==g.fallback&&(!0!==g.unstable_avoidThisFallback||!d)}}if(h){var m=f.updateQueue;if(null===m){var v=new Set;v.add(c),f.updateQueue=v}else m.add(c);if(0==(2&f.mode)){if(f.flags|=64,s.flags|=16384,s.flags&=-2981,1===s.tag)if(null===s.alternate)s.tag=17;else{var b=ao(-1,1);b.tag=2,so(s,b)}s.lanes|=1;break e}l=void 0,s=t;var y=o.pingCache;if(null===y?(y=o.pingCache=new os,l=new Set,y.set(c,l)):void 0===(l=y.get(c))&&(l=new Set,y.set(c,l)),!l.has(s)){l.add(s);var x=Rl.bind(null,o,c,s);c.then(x,x)}f.flags|=4096,f.lanes=t;break e}f=f.return}while(null!==f);l=Error((q(s.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.")}5!==Ls&&(Ls=2),l=rs(l,s),f=a;do{switch(f.tag){case 3:o=l,f.flags|=4096,t&=-t,f.lanes|=t,lo(f,as(0,o,t));break e;case 1:o=l;var _=f.type,w=f.stateNode;if(0==(64&f.flags)&&("function"==typeof _.getDerivedStateFromError||null!==w&&"function"==typeof w.componentDidCatch&&(null===Ys||!Ys.has(w)))){f.flags|=4096,t&=-t,f.lanes|=t,lo(f,ss(f,o,t));break e}}f=f.return}while(null!==f)}El(n)}catch(e){t=e,Ps===n&&null!==n&&(Ps=n=n.return);continue}break}}function xl(){var e=Ss.current;return Ss.current=Pa,null===e?Pa:e}function _l(e,t){var n=Ms;Ms|=16;var r=xl();for(Cs===e&&Os===t||bl(e,t);;)try{wl();break}catch(t){yl(e,t)}if(Gi(),Ms=n,Ss.current=r,null!==Ps)throw Error(a(261));return Cs=null,Os=0,Ls}function wl(){for(;null!==Ps;)Sl(Ps)}function kl(){for(;null!==Ps&&!Si();)Sl(Ps)}function Sl(e){var t=Ws(e.alternate,e,Ts);e.memoizedProps=e.pendingProps,null===t?El(e):Ps=t,Es.current=null}function El(e){var t=e;do{var n=t.alternate;if(e=t.return,0==(2048&t.flags)){if(null!==(n=ts(n,t,Ts)))return void(Ps=n);if(24!==(n=t).tag&&23!==n.tag||null===n.memoizedState||0!=(1073741824&Ts)||0==(4&n.mode)){for(var r=0,i=n.child;null!==i;)r|=i.lanes|i.childLanes,i=i.sibling;n.childLanes=r}null!==e&&0==(2048&e.flags)&&(null===e.firstEffect&&(e.firstEffect=t.firstEffect),null!==t.lastEffect&&(null!==e.lastEffect&&(e.lastEffect.nextEffect=t.firstEffect),e.lastEffect=t.lastEffect),1<t.flags&&(null!==e.lastEffect?e.lastEffect.nextEffect=t:e.firstEffect=t,e.lastEffect=t))}else{if(null!==(n=ns(t)))return n.flags&=2047,void(Ps=n);null!==e&&(e.firstEffect=e.lastEffect=null,e.flags|=2048)}if(null!==(t=t.sibling))return void(Ps=t);Ps=t=e}while(null!==t);0===Ls&&(Ls=5)}function Ml(e){var t=Bi();return Wi(99,Cl.bind(null,e,t)),null}function Cl(e,t){do{Ol()}while(null!==Qs);if(0!=(48&Ms))throw Error(a(327));var n=e.finishedWork;if(null===n)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(a(177));e.callbackNode=null;var r=n.lanes|n.childLanes,i=r,o=e.pendingLanes&~i;e.pendingLanes=i,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=i,e.mutableReadLanes&=i,e.entangledLanes&=i,i=e.entanglements;for(var s=e.eventTimes,l=e.expirationTimes;0<o;){var c=31-Ut(o),u=1<<c;i[c]=0,s[c]=-1,l[c]=-1,o&=~u}if(null!==Gs&&0==(24&r)&&Gs.has(e)&&Gs.delete(e),e===Cs&&(Ps=Cs=null,Os=0),1<n.flags?null!==n.lastEffect?(n.lastEffect.nextEffect=n,r=n.firstEffect):r=n:r=n.firstEffect,null!==r){if(i=Ms,Ms|=32,Es.current=null,zr=Qt,hr(s=fr())){if("selectionStart"in s)l={start:s.selectionStart,end:s.selectionEnd};else e:if(l=(l=s.ownerDocument)&&l.defaultView||window,(u=l.getSelection&&l.getSelection())&&0!==u.rangeCount){l=u.anchorNode,o=u.anchorOffset,c=u.focusNode,u=u.focusOffset;try{l.nodeType,c.nodeType}catch(e){l=null;break e}var d=0,f=-1,h=-1,p=0,g=0,m=s,v=null;t:for(;;){for(var b;m!==l||0!==o&&3!==m.nodeType||(f=d+o),m!==c||0!==u&&3!==m.nodeType||(h=d+u),3===m.nodeType&&(d+=m.nodeValue.length),null!==(b=m.firstChild);)v=m,m=b;for(;;){if(m===s)break t;if(v===l&&++p===o&&(f=d),v===c&&++g===u&&(h=d),null!==(b=m.nextSibling))break;v=(m=v).parentNode}m=b}l=-1===f||-1===h?null:{start:f,end:h}}else l=null;l=l||{start:0,end:0}}else l=null;Fr={focusedElem:s,selectionRange:l},Qt=!1,il=null,ol=!1,Us=r;do{try{Pl()}catch(e){if(null===Us)throw Error(a(330));Al(Us,e),Us=Us.nextEffect}}while(null!==Us);il=null,Us=r;do{try{for(s=e;null!==Us;){var y=Us.flags;if(16&y&&ve(Us.stateNode,""),128&y){var x=Us.alternate;if(null!==x){var _=x.ref;null!==_&&("function"==typeof _?_(null):_.current=null)}}switch(1038&y){case 2:ms(Us),Us.flags&=-3;break;case 6:ms(Us),Us.flags&=-3,xs(Us.alternate,Us);break;case 1024:Us.flags&=-1025;break;case 1028:Us.flags&=-1025,xs(Us.alternate,Us);break;case 4:xs(Us.alternate,Us);break;case 8:ys(s,l=Us);var w=l.alternate;ps(l),null!==w&&ps(w)}Us=Us.nextEffect}}catch(e){if(null===Us)throw Error(a(330));Al(Us,e),Us=Us.nextEffect}}while(null!==Us);if(_=Fr,x=fr(),y=_.focusedElem,s=_.selectionRange,x!==y&&y&&y.ownerDocument&&dr(y.ownerDocument.documentElement,y)){null!==s&&hr(y)&&(x=s.start,void 0===(_=s.end)&&(_=x),"selectionStart"in y?(y.selectionStart=x,y.selectionEnd=Math.min(_,y.value.length)):(_=(x=y.ownerDocument||document)&&x.defaultView||window).getSelection&&(_=_.getSelection(),l=y.textContent.length,w=Math.min(s.start,l),s=void 0===s.end?w:Math.min(s.end,l),!_.extend&&w>s&&(l=s,s=w,w=l),l=ur(y,w),o=ur(y,s),l&&o&&(1!==_.rangeCount||_.anchorNode!==l.node||_.anchorOffset!==l.offset||_.focusNode!==o.node||_.focusOffset!==o.offset)&&((x=x.createRange()).setStart(l.node,l.offset),_.removeAllRanges(),w>s?(_.addRange(x),_.extend(o.node,o.offset)):(x.setEnd(o.node,o.offset),_.addRange(x))))),x=[];for(_=y;_=_.parentNode;)1===_.nodeType&&x.push({element:_,left:_.scrollLeft,top:_.scrollTop});for("function"==typeof y.focus&&y.focus(),y=0;y<x.length;y++)(_=x[y]).element.scrollLeft=_.left,_.element.scrollTop=_.top}Qt=!!zr,Fr=zr=null,e.current=n,Us=r;do{try{for(y=e;null!==Us;){var k=Us.flags;if(36&k&&ds(y,Us.alternate,Us),128&k){x=void 0;var S=Us.ref;if(null!==S){var E=Us.stateNode;switch(Us.tag){case 5:x=E;break;default:x=E}"function"==typeof S?S(x):S.current=x}}Us=Us.nextEffect}}catch(e){if(null===Us)throw Error(a(330));Al(Us,e),Us=Us.nextEffect}}while(null!==Us);Us=null,Ai(),Ms=i}else e.current=n;if(qs)qs=!1,Qs=e,Xs=t;else for(Us=r;null!==Us;)t=Us.nextEffect,Us.nextEffect=null,8&Us.flags&&((k=Us).sibling=null,k.stateNode=null),Us=t;if(0===(r=e.pendingLanes)&&(Ys=null),1===r?e===el?Js++:(Js=0,el=e):Js=0,n=n.stateNode,xi&&"function"==typeof xi.onCommitFiberRoot)try{xi.onCommitFiberRoot(yi,n,void 0,64==(64&n.current.flags))}catch(e){}if(ul(e,Ii()),Hs)throw Hs=!1,e=$s,$s=null,e;return 0!=(8&Ms)||Hi(),null}function Pl(){for(;null!==Us;){var e=Us.alternate;ol||null===il||(0!=(8&Us.flags)?Je(Us,il)&&(ol=!0):13===Us.tag&&ws(e,Us)&&Je(Us,il)&&(ol=!0));var t=Us.flags;0!=(256&t)&&us(e,Us),0==(512&t)||qs||(qs=!0,Ui(97,(function(){return Ol(),null}))),Us=Us.nextEffect}}function Ol(){if(90!==Xs){var e=97<Xs?97:Xs;return Xs=90,Wi(e,Ll)}return!1}function Tl(e,t){Ks.push(t,e),qs||(qs=!0,Ui(97,(function(){return Ol(),null})))}function Dl(e,t){Zs.push(t,e),qs||(qs=!0,Ui(97,(function(){return Ol(),null})))}function Ll(){if(null===Qs)return!1;var e=Qs;if(Qs=null,0!=(48&Ms))throw Error(a(331));var t=Ms;Ms|=32;var n=Zs;Zs=[];for(var r=0;r<n.length;r+=2){var i=n[r],o=n[r+1],s=i.destroy;if(i.destroy=void 0,"function"==typeof s)try{s()}catch(e){if(null===o)throw Error(a(330));Al(o,e)}}for(n=Ks,Ks=[],r=0;r<n.length;r+=2){i=n[r],o=n[r+1];try{var l=i.create;i.destroy=l()}catch(e){if(null===o)throw Error(a(330));Al(o,e)}}for(l=e.current.firstEffect;null!==l;)e=l.nextEffect,l.nextEffect=null,8&l.flags&&(l.sibling=null,l.stateNode=null),l=e;return Ms=t,Hi(),!0}function jl(e,t,n){so(e,t=as(0,t=rs(n,t),1)),t=al(),null!==(e=cl(e,1))&&(Wt(e,1,t),ul(e,t))}function Al(e,t){if(3===e.tag)jl(e,e,t);else for(var n=e.return;null!==n;){if(3===n.tag){jl(n,e,t);break}if(1===n.tag){var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Ys||!Ys.has(r))){var i=ss(n,e=rs(t,e),1);if(so(n,i),i=al(),null!==(n=cl(n,1)))Wt(n,1,i),ul(n,i);else if("function"==typeof r.componentDidCatch&&(null===Ys||!Ys.has(r)))try{r.componentDidCatch(t,e)}catch(e){}break}}n=n.return}}function Rl(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),t=al(),e.pingedLanes|=e.suspendedLanes&n,Cs===e&&(Os&n)===n&&(4===Ls||3===Ls&&(62914560&Os)===Os&&500>Ii()-Is?bl(e,0):zs|=n),ul(e,t)}function Nl(e,t){var n=e.stateNode;null!==n&&n.delete(t),0==(t=0)&&(0==(2&(t=e.mode))?t=1:0==(4&t)?t=99===Bi()?1:2:(0===nl&&(nl=As),0===(t=Bt(62914560&~nl))&&(t=4194304))),n=al(),null!==(e=cl(e,t))&&(Wt(e,t,n),ul(e,n))}function zl(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.flags=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childLanes=this.lanes=0,this.alternate=null}function Fl(e,t,n,r){return new zl(e,t,n,r)}function Il(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Bl(e,t){var n=e.alternate;return null===n?((n=Fl(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Vl(e,t,n,r,i,o){var s=2;if(r=e,"function"==typeof e)Il(e)&&(s=1);else if("string"==typeof e)s=5;else e:switch(e){case S:return Wl(n.children,i,o,t);case N:s=8,i|=16;break;case E:s=8,i|=1;break;case M:return(e=Fl(12,n,t,8|i)).elementType=M,e.type=M,e.lanes=o,e;case T:return(e=Fl(13,n,t,i)).type=T,e.elementType=T,e.lanes=o,e;case D:return(e=Fl(19,n,t,i)).elementType=D,e.lanes=o,e;case z:return Ul(n,i,o,t);case F:return(e=Fl(24,n,t,i)).elementType=F,e.lanes=o,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case C:s=10;break e;case P:s=9;break e;case O:s=11;break e;case L:s=14;break e;case j:s=16,r=null;break e;case A:s=22;break e}throw Error(a(130,null==e?e:typeof e,""))}return(t=Fl(s,n,t,i)).elementType=e,t.type=r,t.lanes=o,t}function Wl(e,t,n,r){return(e=Fl(7,e,r,t)).lanes=n,e}function Ul(e,t,n,r){return(e=Fl(23,e,r,t)).elementType=z,e.lanes=n,e}function Hl(e,t,n){return(e=Fl(6,e,null,t)).lanes=n,e}function $l(e,t,n){return(t=Fl(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Yl(e,t,n){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.pendingContext=this.context=null,this.hydrate=n,this.callbackNode=null,this.callbackPriority=0,this.eventTimes=Vt(0),this.expirationTimes=Vt(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=Vt(0),this.mutableSourceEagerHydrationData=null}function ql(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:k,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}function Ql(e,t,n,r){var i=t.current,o=al(),s=sl(i);e:if(n){t:{if(Xe(n=n._reactInternals)!==n||1!==n.tag)throw Error(a(170));var l=n;do{switch(l.tag){case 3:l=l.stateNode.context;break t;case 1:if(hi(l.type)){l=l.stateNode.__reactInternalMemoizedMergedChildContext;break t}}l=l.return}while(null!==l);throw Error(a(171))}if(1===n.tag){var c=n.type;if(hi(c)){n=mi(n,c,l);break e}}n=l}else n=li;return null===t.context?t.context=n:t.pendingContext=n,(t=ao(o,s)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),so(i,t),ll(i,s,o),s}function Xl(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:default:return e.child.stateNode}}function Kl(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function Zl(e,t){Kl(e,t),(e=e.alternate)&&Kl(e,t)}function Gl(e,t,n){var r=null!=n&&null!=n.hydrationOptions&&n.hydrationOptions.mutableSources||null;if(n=new Yl(e,t,null!=n&&!0===n.hydrate),t=Fl(3,null,null,2===t?7:1===t?3:0),n.current=t,t.stateNode=n,io(t),e[Kr]=n.current,Pr(8===e.nodeType?e.parentNode:e),r)for(e=0;e<r.length;e++){var i=(t=r[e])._getVersion;i=i(t._source),null==n.mutableSourceEagerHydrationData?n.mutableSourceEagerHydrationData=[t,i]:n.mutableSourceEagerHydrationData.push(t,i)}this._internalRoot=n}function Jl(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function ec(e,t,n,r,i){var o=n._reactRootContainer;if(o){var a=o._internalRoot;if("function"==typeof i){var s=i;i=function(){var e=Xl(a);s.call(e)}}Ql(t,a,e,i)}else{if(o=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new Gl(e,0,t?{hydrate:!0}:void 0)}(n,r),a=o._internalRoot,"function"==typeof i){var l=i;i=function(){var e=Xl(a);l.call(e)}}gl((function(){Ql(t,a,e,i)}))}return Xl(a)}function tc(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Jl(t))throw Error(a(200));return ql(e,t,null,n)}Ws=function(e,t,n){var r=t.lanes;if(null!==e)if(e.memoizedProps!==t.pendingProps||ui.current)ja=!0;else{if(0==(n&r)){switch(ja=!1,t.tag){case 3:Ua(t),Ho();break;case 5:Lo(t);break;case 1:hi(t.type)&&vi(t);break;case 4:To(t,t.stateNode.containerInfo);break;case 10:r=t.memoizedProps.value;var i=t.type._context;si(Qi,i._currentValue),i._currentValue=r;break;case 13:if(null!==t.memoizedState)return 0!=(n&t.child.childLanes)?Qa(e,t,n):(si(Ao,1&Ao.current),null!==(t=Ja(e,t,n))?t.sibling:null);si(Ao,1&Ao.current);break;case 19:if(r=0!=(n&t.childLanes),0!=(64&e.flags)){if(r)return Ga(e,t,n);t.flags|=64}if(null!==(i=t.memoizedState)&&(i.rendering=null,i.tail=null,i.lastEffect=null),si(Ao,Ao.current),r)break;return null;case 23:case 24:return t.lanes=0,Fa(e,t,n)}return Ja(e,t,n)}ja=0!=(16384&e.flags)}else ja=!1;switch(t.lanes=0,t.tag){case 2:if(r=t.type,null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,i=fi(t,ci.current),to(t,n),i=ra(null,t,r,e,i,n),t.flags|=1,"object"==typeof i&&null!==i&&"function"==typeof i.render&&void 0===i.$$typeof){if(t.tag=1,t.memoizedState=null,t.updateQueue=null,hi(r)){var o=!0;vi(t)}else o=!1;t.memoizedState=null!==i.state&&void 0!==i.state?i.state:null,io(t);var s=r.getDerivedStateFromProps;"function"==typeof s&&ho(t,r,s,e),i.updater=po,t.stateNode=i,i._reactInternals=t,bo(t,r,e,n),t=Wa(null,t,r,!0,o,n)}else t.tag=0,Aa(null,t,i,n),t=t.child;return t;case 16:i=t.elementType;e:{switch(null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,i=(o=i._init)(i._payload),t.type=i,o=t.tag=function(e){if("function"==typeof e)return Il(e)?1:0;if(null!=e){if((e=e.$$typeof)===O)return 11;if(e===L)return 14}return 2}(i),e=qi(i,e),o){case 0:t=Ba(null,t,i,e,n);break e;case 1:t=Va(null,t,i,e,n);break e;case 11:t=Ra(null,t,i,e,n);break e;case 14:t=Na(null,t,i,qi(i.type,e),r,n);break e}throw Error(a(306,i,""))}return t;case 0:return r=t.type,i=t.pendingProps,Ba(e,t,r,i=t.elementType===r?i:qi(r,i),n);case 1:return r=t.type,i=t.pendingProps,Va(e,t,r,i=t.elementType===r?i:qi(r,i),n);case 3:if(Ua(t),r=t.updateQueue,null===e||null===r)throw Error(a(282));if(r=t.pendingProps,i=null!==(i=t.memoizedState)?i.element:null,oo(e,t),co(t,r,null,n),(r=t.memoizedState.element)===i)Ho(),t=Ja(e,t,n);else{if((o=(i=t.stateNode).hydrate)&&(zo=Hr(t.stateNode.containerInfo.firstChild),No=t,o=Fo=!0),o){if(null!=(e=i.mutableSourceEagerHydrationData))for(i=0;i<e.length;i+=2)(o=e[i])._workInProgressVersionPrimary=e[i+1],$o.push(o);for(n=So(t,null,r,n),t.child=n;n;)n.flags=-3&n.flags|1024,n=n.sibling}else Aa(e,t,r,n),Ho();t=t.child}return t;case 5:return Lo(t),null===e&&Vo(t),r=t.type,i=t.pendingProps,o=null!==e?e.memoizedProps:null,s=i.children,Br(r,i)?s=null:null!==o&&Br(r,o)&&(t.flags|=16),Ia(e,t),Aa(e,t,s,n),t.child;case 6:return null===e&&Vo(t),null;case 13:return Qa(e,t,n);case 4:return To(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=ko(t,null,r,n):Aa(e,t,r,n),t.child;case 11:return r=t.type,i=t.pendingProps,Ra(e,t,r,i=t.elementType===r?i:qi(r,i),n);case 7:return Aa(e,t,t.pendingProps,n),t.child;case 8:case 12:return Aa(e,t,t.pendingProps.children,n),t.child;case 10:e:{r=t.type._context,i=t.pendingProps,s=t.memoizedProps,o=i.value;var l=t.type._context;if(si(Qi,l._currentValue),l._currentValue=o,null!==s)if(l=s.value,0==(o=ar(l,o)?0:0|("function"==typeof r._calculateChangedBits?r._calculateChangedBits(l,o):1073741823))){if(s.children===i.children&&!ui.current){t=Ja(e,t,n);break e}}else for(null!==(l=t.child)&&(l.return=t);null!==l;){var c=l.dependencies;if(null!==c){s=l.child;for(var u=c.firstContext;null!==u;){if(u.context===r&&0!=(u.observedBits&o)){1===l.tag&&((u=ao(-1,n&-n)).tag=2,so(l,u)),l.lanes|=n,null!==(u=l.alternate)&&(u.lanes|=n),eo(l.return,n),c.lanes|=n;break}u=u.next}}else s=10===l.tag&&l.type===t.type?null:l.child;if(null!==s)s.return=l;else for(s=l;null!==s;){if(s===t){s=null;break}if(null!==(l=s.sibling)){l.return=s.return,s=l;break}s=s.return}l=s}Aa(e,t,i.children,n),t=t.child}return t;case 9:return i=t.type,r=(o=t.pendingProps).children,to(t,n),r=r(i=no(i,o.unstable_observedBits)),t.flags|=1,Aa(e,t,r,n),t.child;case 14:return o=qi(i=t.type,t.pendingProps),Na(e,t,i,o=qi(i.type,o),r,n);case 15:return za(e,t,t.type,t.pendingProps,r,n);case 17:return r=t.type,i=t.pendingProps,i=t.elementType===r?i:qi(r,i),null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),t.tag=1,hi(r)?(e=!0,vi(t)):e=!1,to(t,n),mo(t,r,i),bo(t,r,i,n),Wa(null,t,r,!0,e,n);case 19:return Ga(e,t,n);case 23:case 24:return Fa(e,t,n)}throw Error(a(156,t.tag))},Gl.prototype.render=function(e){Ql(e,this._internalRoot,null,null)},Gl.prototype.unmount=function(){var e=this._internalRoot,t=e.containerInfo;Ql(null,e,null,(function(){t[Kr]=null}))},et=function(e){13===e.tag&&(ll(e,4,al()),Zl(e,4))},tt=function(e){13===e.tag&&(ll(e,67108864,al()),Zl(e,67108864))},nt=function(e){if(13===e.tag){var t=al(),n=sl(e);ll(e,n,t),Zl(e,n)}},rt=function(e,t){return t()},Me=function(e,t,n){switch(t){case"input":if(ne(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var i=ti(r);if(!i)throw Error(a(90));Z(r),ne(r,i)}}}break;case"textarea":ce(e,n);break;case"select":null!=(t=n.value)&&ae(e,!!n.multiple,t,!1)}},Le=pl,je=function(e,t,n,r,i){var o=Ms;Ms|=4;try{return Wi(98,e.bind(null,t,n,r,i))}finally{0===(Ms=o)&&(Vs(),Hi())}},Ae=function(){0==(49&Ms)&&(function(){if(null!==Gs){var e=Gs;Gs=null,e.forEach((function(e){e.expiredLanes|=24&e.pendingLanes,ul(e,Ii())}))}Hi()}(),Ol())},Re=function(e,t){var n=Ms;Ms|=2;try{return e(t)}finally{0===(Ms=n)&&(Vs(),Hi())}};var nc={Events:[Jr,ei,ti,Te,De,Ol,{current:!1}]},rc={findFiberByHostInstance:Gr,bundleType:0,version:"17.0.2",rendererPackageName:"react-dom"},ic={bundleType:rc.bundleType,version:rc.version,rendererPackageName:rc.rendererPackageName,rendererConfig:rc.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:_.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=Ge(e))?null:e.stateNode},findFiberByHostInstance:rc.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var oc=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!oc.isDisabled&&oc.supportsFiber)try{yi=oc.inject(ic),xi=oc}catch(ge){}}t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=nc,t.createPortal=tc,t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(a(188));throw Error(a(268,Object.keys(e)))}return null===(e=Ge(t))?null:e.stateNode},t.flushSync=function(e,t){var n=Ms;if(0!=(48&n))return e(t);Ms|=1;try{if(e)return Wi(99,e.bind(null,t))}finally{Ms=n,Hi()}},t.hydrate=function(e,t,n){if(!Jl(t))throw Error(a(200));return ec(null,e,t,!0,n)},t.render=function(e,t,n){if(!Jl(t))throw Error(a(200));return ec(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!Jl(e))throw Error(a(40));return!!e._reactRootContainer&&(gl((function(){ec(null,null,e,!1,(function(){e._reactRootContainer=null,e[Kr]=null}))})),!0)},t.unstable_batchedUpdates=pl,t.unstable_createPortal=function(e,t){return tc(e,t,2<arguments.length&&void 0!==arguments[2]?arguments[2]:null)},t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!Jl(n))throw Error(a(200));if(null==e||void 0===e._reactInternals)throw Error(a(38));return ec(e,t,n,!1,r)},t.version="17.0.2"},3935:(e,t,n)=>{"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(4448)},9921:(e,t)=>{"use strict";var n="function"==typeof Symbol&&Symbol.for,r=n?Symbol.for("react.element"):60103,i=n?Symbol.for("react.portal"):60106,o=n?Symbol.for("react.fragment"):60107,a=n?Symbol.for("react.strict_mode"):60108,s=n?Symbol.for("react.profiler"):60114,l=n?Symbol.for("react.provider"):60109,c=n?Symbol.for("react.context"):60110,u=n?Symbol.for("react.async_mode"):60111,d=n?Symbol.for("react.concurrent_mode"):60111,f=n?Symbol.for("react.forward_ref"):60112,h=n?Symbol.for("react.suspense"):60113,p=n?Symbol.for("react.suspense_list"):60120,g=n?Symbol.for("react.memo"):60115,m=n?Symbol.for("react.lazy"):60116,v=n?Symbol.for("react.block"):60121,b=n?Symbol.for("react.fundamental"):60117,y=n?Symbol.for("react.responder"):60118,x=n?Symbol.for("react.scope"):60119;function _(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case r:switch(e=e.type){case u:case d:case o:case s:case a:case h:return e;default:switch(e=e&&e.$$typeof){case c:case f:case m:case g:case l:return e;default:return t}}case i:return t}}}function w(e){return _(e)===d}t.AsyncMode=u,t.ConcurrentMode=d,t.ContextConsumer=c,t.ContextProvider=l,t.Element=r,t.ForwardRef=f,t.Fragment=o,t.Lazy=m,t.Memo=g,t.Portal=i,t.Profiler=s,t.StrictMode=a,t.Suspense=h,t.isAsyncMode=function(e){return w(e)||_(e)===u},t.isConcurrentMode=w,t.isContextConsumer=function(e){return _(e)===c},t.isContextProvider=function(e){return _(e)===l},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===r},t.isForwardRef=function(e){return _(e)===f},t.isFragment=function(e){return _(e)===o},t.isLazy=function(e){return _(e)===m},t.isMemo=function(e){return _(e)===g},t.isPortal=function(e){return _(e)===i},t.isProfiler=function(e){return _(e)===s},t.isStrictMode=function(e){return _(e)===a},t.isSuspense=function(e){return _(e)===h},t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===o||e===d||e===s||e===a||e===h||e===p||"object"==typeof e&&null!==e&&(e.$$typeof===m||e.$$typeof===g||e.$$typeof===l||e.$$typeof===c||e.$$typeof===f||e.$$typeof===b||e.$$typeof===y||e.$$typeof===x||e.$$typeof===v)},t.typeOf=_},9864:(e,t,n)=>{"use strict";e.exports=n(9921)},9226:(e,t,n)=>{"use strict";n.d(t,{zt:()=>u,I0:()=>g,v9:()=>y});var r=n(7294),i=(n(5697),r.createContext(null)),o=function(e){e()},a=function(){return o},s={notify:function(){}},l=function(){function e(e,t){this.store=e,this.parentSub=t,this.unsubscribe=null,this.listeners=s,this.handleChangeWrapper=this.handleChangeWrapper.bind(this)}var t=e.prototype;return t.addNestedSub=function(e){return this.trySubscribe(),this.listeners.subscribe(e)},t.notifyNestedSubs=function(){this.listeners.notify()},t.handleChangeWrapper=function(){this.onStateChange&&this.onStateChange()},t.isSubscribed=function(){return Boolean(this.unsubscribe)},t.trySubscribe=function(){this.unsubscribe||(this.unsubscribe=this.parentSub?this.parentSub.addNestedSub(this.handleChangeWrapper):this.store.subscribe(this.handleChangeWrapper),this.listeners=function(){var e=a(),t=null,n=null;return{clear:function(){t=null,n=null},notify:function(){e((function(){for(var e=t;e;)e.callback(),e=e.next}))},get:function(){for(var e=[],n=t;n;)e.push(n),n=n.next;return e},subscribe:function(e){var r=!0,i=n={callback:e,next:null,prev:n};return i.prev?i.prev.next=i:t=i,function(){r&&null!==t&&(r=!1,i.next?i.next.prev=i.prev:n=i.prev,i.prev?i.prev.next=i.next:t=i.next)}}}}())},t.tryUnsubscribe=function(){this.unsubscribe&&(this.unsubscribe(),this.unsubscribe=null,this.listeners.clear(),this.listeners=s)},e}(),c="undefined"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement?r.useLayoutEffect:r.useEffect;const u=function(e){var t=e.store,n=e.context,o=e.children,a=(0,r.useMemo)((function(){var e=new l(t);return e.onStateChange=e.notifyNestedSubs,{store:t,subscription:e}}),[t]),s=(0,r.useMemo)((function(){return t.getState()}),[t]);c((function(){var e=a.subscription;return e.trySubscribe(),s!==t.getState()&&e.notifyNestedSubs(),function(){e.tryUnsubscribe(),e.onStateChange=null}}),[a,s]);var u=n||i;return r.createElement(u.Provider,{value:a},o)};function d(){return(0,r.useContext)(i)}function f(e){void 0===e&&(e=i);var t=e===i?d:function(){return(0,r.useContext)(e)};return function(){return t().store}}n(8679),n(9864),n(2122);var h=f();function p(e){void 0===e&&(e=i);var t=e===i?h:f(e);return function(){return t().dispatch}}var g=p(),m=function(e,t){return e===t};function v(e){void 0===e&&(e=i);var t=e===i?d:function(){return(0,r.useContext)(e)};return function(e,n){void 0===n&&(n=m);var i=t(),o=function(e,t,n,i){var o,a=(0,r.useReducer)((function(e){return e+1}),0)[1],s=(0,r.useMemo)((function(){return new l(n,i)}),[n,i]),u=(0,r.useRef)(),d=(0,r.useRef)(),f=(0,r.useRef)(),h=(0,r.useRef)(),p=n.getState();try{if(e!==d.current||p!==f.current||u.current){var g=e(p);o=void 0!==h.current&&t(g,h.current)?h.current:g}else o=h.current}catch(e){throw u.current&&(e.message+="\nThe error may be correlated with this previous error:\n"+u.current.stack+"\n\n"),e}return c((function(){d.current=e,f.current=p,h.current=o,u.current=void 0})),c((function(){function e(){try{var e=n.getState(),r=d.current(e);if(t(r,h.current))return;h.current=r,f.current=e}catch(e){u.current=e}a()}return s.onStateChange=e,s.trySubscribe(),e(),function(){return s.tryUnsubscribe()}}),[n,s]),o}(e,n,i.store,i.subscription);return(0,r.useDebugValue)(o),o}}var b,y=v();b=n(3935).unstable_batchedUpdates,o=b},3727:(e,t,n)=>{"use strict";n.d(t,{VK:()=>u,rU:()=>m,OL:()=>y});var r=n(5977),i=n(3552),o=n(7294),a=n(7531),s=(n(5697),n(2122)),l=n(9756),c=n(2177),u=function(e){function t(){for(var t,n=arguments.length,r=new Array(n),i=0;i<n;i++)r[i]=arguments[i];return(t=e.call.apply(e,[this].concat(r))||this).history=(0,a.lX)(t.props),t}return(0,i.Z)(t,e),t.prototype.render=function(){return o.createElement(r.F0,{history:this.history,children:this.props.children})},t}(o.Component);o.Component;var d=function(e,t){return"function"==typeof e?e(t):e},f=function(e,t){return"string"==typeof e?(0,a.ob)(e,null,null,t):e},h=function(e){return e},p=o.forwardRef;void 0===p&&(p=h);var g=p((function(e,t){var n=e.innerRef,r=e.navigate,i=e.onClick,a=(0,l.Z)(e,["innerRef","navigate","onClick"]),c=a.target,u=(0,s.Z)({},a,{onClick:function(e){try{i&&i(e)}catch(t){throw e.preventDefault(),t}e.defaultPrevented||0!==e.button||c&&"_self"!==c||function(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)}(e)||(e.preventDefault(),r())}});return u.ref=h!==p&&t||n,o.createElement("a",u)})),m=p((function(e,t){var n=e.component,i=void 0===n?g:n,a=e.replace,u=e.to,m=e.innerRef,v=(0,l.Z)(e,["component","replace","to","innerRef"]);return o.createElement(r.s6.Consumer,null,(function(e){e||(0,c.Z)(!1);var n=e.history,r=f(d(u,e.location),e.location),l=r?n.createHref(r):"",g=(0,s.Z)({},v,{href:l,navigate:function(){var t=d(u,e.location);(a?n.replace:n.push)(t)}});return h!==p?g.ref=t||m:g.innerRef=m,o.createElement(i,g)}))})),v=function(e){return e},b=o.forwardRef;void 0===b&&(b=v);var y=b((function(e,t){var n=e["aria-current"],i=void 0===n?"page":n,a=e.activeClassName,u=void 0===a?"active":a,h=e.activeStyle,p=e.className,g=e.exact,y=e.isActive,x=e.location,_=e.sensitive,w=e.strict,k=e.style,S=e.to,E=e.innerRef,M=(0,l.Z)(e,["aria-current","activeClassName","activeStyle","className","exact","isActive","location","sensitive","strict","style","to","innerRef"]);return o.createElement(r.s6.Consumer,null,(function(e){e||(0,c.Z)(!1);var n=x||e.location,a=f(d(S,n),n),l=a.pathname,C=l&&l.replace(/([.+*?=^!:${}()[\]|/\\])/g,"\\$1"),P=C?(0,r.LX)(n.pathname,{path:C,exact:g,sensitive:_,strict:w}):null,O=!!(y?y(P,n):P),T=O?function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return t.filter((function(e){return e})).join(" ")}(p,u):p,D=O?(0,s.Z)({},k,{},h):k,L=(0,s.Z)({"aria-current":O&&i||null,className:T,style:D,to:a},M);return v!==b?L.ref=t||E:L.innerRef=E,o.createElement(m,L)}))}))},5977:(e,t,n)=>{"use strict";n.d(t,{F0:()=>v,rs:()=>_,s6:()=>m,LX:()=>x,TH:()=>k});var r=n(3552),i=n(7294),o=n(5697),a=n.n(o),s=(n(7531),1073741823),l="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:void 0!==n.g?n.g:{};function c(e){var t=[];return{on:function(e){t.push(e)},off:function(e){t=t.filter((function(t){return t!==e}))},get:function(){return e},set:function(n,r){e=n,t.forEach((function(t){return t(e,r)}))}}}const u=i.createContext||function(e,t){var n,o,u,d="__create-react-context-"+((l[u="__global_unique_id__"]=(l[u]||0)+1)+"__"),f=function(e){function n(){var t;return(t=e.apply(this,arguments)||this).emitter=c(t.props.value),t}(0,r.Z)(n,e);var i=n.prototype;return i.getChildContext=function(){var e;return(e={})[d]=this.emitter,e},i.componentWillReceiveProps=function(e){if(this.props.value!==e.value){var n,r=this.props.value,i=e.value;((o=r)===(a=i)?0!==o||1/o==1/a:o!=o&&a!=a)?n=0:(n="function"==typeof t?t(r,i):s,0!=(n|=0)&&this.emitter.set(e.value,n))}var o,a},i.render=function(){return this.props.children},n}(i.Component);f.childContextTypes=((n={})[d]=a().object.isRequired,n);var h=function(t){function n(){var e;return(e=t.apply(this,arguments)||this).state={value:e.getValue()},e.onUpdate=function(t,n){0!=((0|e.observedBits)&n)&&e.setState({value:e.getValue()})},e}(0,r.Z)(n,t);var i=n.prototype;return i.componentWillReceiveProps=function(e){var t=e.observedBits;this.observedBits=null==t?s:t},i.componentDidMount=function(){this.context[d]&&this.context[d].on(this.onUpdate);var e=this.props.observedBits;this.observedBits=null==e?s:e},i.componentWillUnmount=function(){this.context[d]&&this.context[d].off(this.onUpdate)},i.getValue=function(){return this.context[d]?this.context[d].get():e},i.render=function(){return(e=this.props.children,Array.isArray(e)?e[0]:e)(this.state.value);var e},n}(i.Component);return h.contextTypes=((o={})[d]=a().object,o),{Provider:f,Consumer:h}};var d=n(2177),f=n(2122),h=n(4779),p=n.n(h),g=(n(9864),n(9756),n(8679),function(e){var t=u();return t.displayName="Router-History",t}()),m=function(e){var t=u();return t.displayName="Router",t}(),v=function(e){function t(t){var n;return(n=e.call(this,t)||this).state={location:t.history.location},n._isMounted=!1,n._pendingLocation=null,t.staticContext||(n.unlisten=t.history.listen((function(e){n._isMounted?n.setState({location:e}):n._pendingLocation=e}))),n}(0,r.Z)(t,e),t.computeRootMatch=function(e){return{path:"/",url:"/",params:{},isExact:"/"===e}};var n=t.prototype;return n.componentDidMount=function(){this._isMounted=!0,this._pendingLocation&&this.setState({location:this._pendingLocation})},n.componentWillUnmount=function(){this.unlisten&&this.unlisten()},n.render=function(){return i.createElement(m.Provider,{value:{history:this.props.history,location:this.state.location,match:t.computeRootMatch(this.state.location.pathname),staticContext:this.props.staticContext}},i.createElement(g.Provider,{children:this.props.children||null,value:this.props.history}))},t}(i.Component);i.Component,i.Component;var b={},y=0;function x(e,t){void 0===t&&(t={}),("string"==typeof t||Array.isArray(t))&&(t={path:t});var n=t,r=n.path,i=n.exact,o=void 0!==i&&i,a=n.strict,s=void 0!==a&&a,l=n.sensitive,c=void 0!==l&&l;return[].concat(r).reduce((function(t,n){if(!n&&""!==n)return null;if(t)return t;var r=function(e,t){var n=""+t.end+t.strict+t.sensitive,r=b[n]||(b[n]={});if(r[e])return r[e];var i=[],o={regexp:p()(e,i,t),keys:i};return y<1e4&&(r[e]=o,y++),o}(n,{end:o,strict:s,sensitive:c}),i=r.regexp,a=r.keys,l=i.exec(e);if(!l)return null;var u=l[0],d=l.slice(1),f=e===u;return o&&!f?null:{path:n,url:"/"===n&&""===u?"/":u,isExact:f,params:a.reduce((function(e,t,n){return e[t.name]=d[n],e}),{})}}),null)}i.Component,i.Component;var _=function(e){function t(){return e.apply(this,arguments)||this}return(0,r.Z)(t,e),t.prototype.render=function(){var e=this;return i.createElement(m.Consumer,null,(function(t){t||(0,d.Z)(!1);var n,r,o=e.props.location||t.location;return i.Children.forEach(e.props.children,(function(e){if(null==r&&i.isValidElement(e)){n=e;var a=e.props.path||e.props.from;r=a?x(o.pathname,(0,f.Z)({},e.props,{path:a})):t.match}})),r?i.cloneElement(n,{location:o,computedMatch:r}):null}))},t}(i.Component),w=i.useContext;function k(){return w(m).location}},5251:(e,t,n)=>{"use strict";n(7418);var r=n(7294),i=60103;if(t.Fragment=60107,"function"==typeof Symbol&&Symbol.for){var o=Symbol.for;i=o("react.element"),t.Fragment=o("react.fragment")}var a=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,s=Object.prototype.hasOwnProperty,l={key:!0,ref:!0,__self:!0,__source:!0};function c(e,t,n){var r,o={},c=null,u=null;for(r in void 0!==n&&(c=""+n),void 0!==t.key&&(c=""+t.key),void 0!==t.ref&&(u=t.ref),t)s.call(t,r)&&!l.hasOwnProperty(r)&&(o[r]=t[r]);if(e&&e.defaultProps)for(r in t=e.defaultProps)void 0===o[r]&&(o[r]=t[r]);return{$$typeof:i,type:e,key:c,ref:u,props:o,_owner:a.current}}t.jsx=c,t.jsxs=c},2408:(e,t,n)=>{"use strict";var r=n(7418),i=60103,o=60106;t.Fragment=60107,t.StrictMode=60108,t.Profiler=60114;var a=60109,s=60110,l=60112;t.Suspense=60113;var c=60115,u=60116;if("function"==typeof Symbol&&Symbol.for){var d=Symbol.for;i=d("react.element"),o=d("react.portal"),t.Fragment=d("react.fragment"),t.StrictMode=d("react.strict_mode"),t.Profiler=d("react.profiler"),a=d("react.provider"),s=d("react.context"),l=d("react.forward_ref"),t.Suspense=d("react.suspense"),c=d("react.memo"),u=d("react.lazy")}var f="function"==typeof Symbol&&Symbol.iterator;function h(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var p={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},g={};function m(e,t,n){this.props=e,this.context=t,this.refs=g,this.updater=n||p}function v(){}function b(e,t,n){this.props=e,this.context=t,this.refs=g,this.updater=n||p}m.prototype.isReactComponent={},m.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error(h(85));this.updater.enqueueSetState(this,e,t,"setState")},m.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},v.prototype=m.prototype;var y=b.prototype=new v;y.constructor=b,r(y,m.prototype),y.isPureReactComponent=!0;var x={current:null},_=Object.prototype.hasOwnProperty,w={key:!0,ref:!0,__self:!0,__source:!0};function k(e,t,n){var r,o={},a=null,s=null;if(null!=t)for(r in void 0!==t.ref&&(s=t.ref),void 0!==t.key&&(a=""+t.key),t)_.call(t,r)&&!w.hasOwnProperty(r)&&(o[r]=t[r]);var l=arguments.length-2;if(1===l)o.children=n;else if(1<l){for(var c=Array(l),u=0;u<l;u++)c[u]=arguments[u+2];o.children=c}if(e&&e.defaultProps)for(r in l=e.defaultProps)void 0===o[r]&&(o[r]=l[r]);return{$$typeof:i,type:e,key:a,ref:s,props:o,_owner:x.current}}function S(e){return"object"==typeof e&&null!==e&&e.$$typeof===i}var E=/\/+/g;function M(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function C(e,t,n,r,a){var s=typeof e;"undefined"!==s&&"boolean"!==s||(e=null);var l=!1;if(null===e)l=!0;else switch(s){case"string":case"number":l=!0;break;case"object":switch(e.$$typeof){case i:case o:l=!0}}if(l)return a=a(l=e),e=""===r?"."+M(l,0):r,Array.isArray(a)?(n="",null!=e&&(n=e.replace(E,"$&/")+"/"),C(a,t,n,"",(function(e){return e}))):null!=a&&(S(a)&&(a=function(e,t){return{$$typeof:i,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(a,n+(!a.key||l&&l.key===a.key?"":(""+a.key).replace(E,"$&/")+"/")+e)),t.push(a)),1;if(l=0,r=""===r?".":r+":",Array.isArray(e))for(var c=0;c<e.length;c++){var u=r+M(s=e[c],c);l+=C(s,t,n,u,a)}else if("function"==typeof(u=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=f&&e[f]||e["@@iterator"])?e:null}(e)))for(e=u.call(e),c=0;!(s=e.next()).done;)l+=C(s=s.value,t,n,u=r+M(s,c++),a);else if("object"===s)throw t=""+e,Error(h(31,"[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t));return l}function P(e,t,n){if(null==e)return e;var r=[],i=0;return C(e,r,"","",(function(e){return t.call(n,e,i++)})),r}function O(e){if(-1===e._status){var t=e._result;t=t(),e._status=0,e._result=t,t.then((function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)}),(function(t){0===e._status&&(e._status=2,e._result=t)}))}if(1===e._status)return e._result;throw e._result}var T={current:null};function D(){var e=T.current;if(null===e)throw Error(h(321));return e}var L={ReactCurrentDispatcher:T,ReactCurrentBatchConfig:{transition:0},ReactCurrentOwner:x,IsSomeRendererActing:{current:!1},assign:r};t.Children={map:P,forEach:function(e,t,n){P(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return P(e,(function(){t++})),t},toArray:function(e){return P(e,(function(e){return e}))||[]},only:function(e){if(!S(e))throw Error(h(143));return e}},t.Component=m,t.PureComponent=b,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=L,t.cloneElement=function(e,t,n){if(null==e)throw Error(h(267,e));var o=r({},e.props),a=e.key,s=e.ref,l=e._owner;if(null!=t){if(void 0!==t.ref&&(s=t.ref,l=x.current),void 0!==t.key&&(a=""+t.key),e.type&&e.type.defaultProps)var c=e.type.defaultProps;for(u in t)_.call(t,u)&&!w.hasOwnProperty(u)&&(o[u]=void 0===t[u]&&void 0!==c?c[u]:t[u])}var u=arguments.length-2;if(1===u)o.children=n;else if(1<u){c=Array(u);for(var d=0;d<u;d++)c[d]=arguments[d+2];o.children=c}return{$$typeof:i,type:e.type,key:a,ref:s,props:o,_owner:l}},t.createContext=function(e,t){return void 0===t&&(t=null),(e={$$typeof:s,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:a,_context:e},e.Consumer=e},t.createElement=k,t.createFactory=function(e){var t=k.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:l,render:e}},t.isValidElement=S,t.lazy=function(e){return{$$typeof:u,_payload:{_status:-1,_result:e},_init:O}},t.memo=function(e,t){return{$$typeof:c,type:e,compare:void 0===t?null:t}},t.useCallback=function(e,t){return D().useCallback(e,t)},t.useContext=function(e,t){return D().useContext(e,t)},t.useDebugValue=function(){},t.useEffect=function(e,t){return D().useEffect(e,t)},t.useImperativeHandle=function(e,t,n){return D().useImperativeHandle(e,t,n)},t.useLayoutEffect=function(e,t){return D().useLayoutEffect(e,t)},t.useMemo=function(e,t){return D().useMemo(e,t)},t.useReducer=function(e,t,n){return D().useReducer(e,t,n)},t.useRef=function(e){return D().useRef(e)},t.useState=function(e){return D().useState(e)},t.version="17.0.2"},7294:(e,t,n)=>{"use strict";e.exports=n(2408)},5893:(e,t,n)=>{"use strict";e.exports=n(5251)},53:(e,t)=>{"use strict";var n,r,i,o;if("object"==typeof performance&&"function"==typeof performance.now){var a=performance;t.unstable_now=function(){return a.now()}}else{var s=Date,l=s.now();t.unstable_now=function(){return s.now()-l}}if("undefined"==typeof window||"function"!=typeof MessageChannel){var c=null,u=null,d=function(){if(null!==c)try{var e=t.unstable_now();c(!0,e),c=null}catch(e){throw setTimeout(d,0),e}};n=function(e){null!==c?setTimeout(n,0,e):(c=e,setTimeout(d,0))},r=function(e,t){u=setTimeout(e,t)},i=function(){clearTimeout(u)},t.unstable_shouldYield=function(){return!1},o=t.unstable_forceFrameRate=function(){}}else{var f=window.setTimeout,h=window.clearTimeout;if("undefined"!=typeof console){var p=window.cancelAnimationFrame;"function"!=typeof window.requestAnimationFrame&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills"),"function"!=typeof p&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills")}var g=!1,m=null,v=-1,b=5,y=0;t.unstable_shouldYield=function(){return t.unstable_now()>=y},o=function(){},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):b=0<e?Math.floor(1e3/e):5};var x=new MessageChannel,_=x.port2;x.port1.onmessage=function(){if(null!==m){var e=t.unstable_now();y=e+b;try{m(!0,e)?_.postMessage(null):(g=!1,m=null)}catch(e){throw _.postMessage(null),e}}else g=!1},n=function(e){m=e,g||(g=!0,_.postMessage(null))},r=function(e,n){v=f((function(){e(t.unstable_now())}),n)},i=function(){h(v),v=-1}}function w(e,t){var n=e.length;e.push(t);e:for(;;){var r=n-1>>>1,i=e[r];if(!(void 0!==i&&0<E(i,t)))break e;e[r]=t,e[n]=i,n=r}}function k(e){return void 0===(e=e[0])?null:e}function S(e){var t=e[0];if(void 0!==t){var n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,i=e.length;r<i;){var o=2*(r+1)-1,a=e[o],s=o+1,l=e[s];if(void 0!==a&&0>E(a,n))void 0!==l&&0>E(l,a)?(e[r]=l,e[s]=n,r=s):(e[r]=a,e[o]=n,r=o);else{if(!(void 0!==l&&0>E(l,n)))break e;e[r]=l,e[s]=n,r=s}}}return t}return null}function E(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}var M=[],C=[],P=1,O=null,T=3,D=!1,L=!1,j=!1;function A(e){for(var t=k(C);null!==t;){if(null===t.callback)S(C);else{if(!(t.startTime<=e))break;S(C),t.sortIndex=t.expirationTime,w(M,t)}t=k(C)}}function R(e){if(j=!1,A(e),!L)if(null!==k(M))L=!0,n(N);else{var t=k(C);null!==t&&r(R,t.startTime-e)}}function N(e,n){L=!1,j&&(j=!1,i()),D=!0;var o=T;try{for(A(n),O=k(M);null!==O&&(!(O.expirationTime>n)||e&&!t.unstable_shouldYield());){var a=O.callback;if("function"==typeof a){O.callback=null,T=O.priorityLevel;var s=a(O.expirationTime<=n);n=t.unstable_now(),"function"==typeof s?O.callback=s:O===k(M)&&S(M),A(n)}else S(M);O=k(M)}if(null!==O)var l=!0;else{var c=k(C);null!==c&&r(R,c.startTime-n),l=!1}return l}finally{O=null,T=o,D=!1}}var z=o;t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){L||D||(L=!0,n(N))},t.unstable_getCurrentPriorityLevel=function(){return T},t.unstable_getFirstCallbackNode=function(){return k(M)},t.unstable_next=function(e){switch(T){case 1:case 2:case 3:var t=3;break;default:t=T}var n=T;T=t;try{return e()}finally{T=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=z,t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=T;T=e;try{return t()}finally{T=n}},t.unstable_scheduleCallback=function(e,o,a){var s=t.unstable_now();switch(a="object"==typeof a&&null!==a&&"number"==typeof(a=a.delay)&&0<a?s+a:s,e){case 1:var l=-1;break;case 2:l=250;break;case 5:l=1073741823;break;case 4:l=1e4;break;default:l=5e3}return e={id:P++,callback:o,priorityLevel:e,startTime:a,expirationTime:l=a+l,sortIndex:-1},a>s?(e.sortIndex=a,w(C,e),null===k(M)&&e===k(C)&&(j?i():j=!0,r(R,a-s))):(e.sortIndex=l,w(M,e),L||D||(L=!0,n(N))),e},t.unstable_wrapCallback=function(e){var t=T;return function(){var n=T;T=t;try{return e.apply(this,arguments)}finally{T=n}}}},3840:(e,t,n)=>{"use strict";e.exports=n(53)},2177:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=function(e,t){if(!e)throw new Error("Invariant failed")}},3356:(e,t,n)=>{"use strict";n.d(t,{AW:()=>E,FM:()=>S,Z5:()=>M});var r=n(655),i=n(5893),o=n(7294),a=n(5977);const s=function(){return(0,i.jsxs)("div",(0,r.pi)({className:"summary"},{children:[(0,i.jsx)("h1",(0,r.pi)({className:"summary__title"},{children:"Summary"}),void 0),(0,i.jsxs)("p",(0,r.pi)({className:"summary__description"},{children:["Ultimate Division is a football simulator and card collecting game, a joint project by Boosty Labs and Chickenfish games. The game is free to play and players can build their squads to compete with each other in weekly competitions.",(0,i.jsx)("br",{},void 0),(0,i.jsx)("br",{},void 0),"Skilled gameplay and sound strategy are key to earning UDT (Ultimate Division Token) and contributing to the ecosystem. In-game items such as player cards are detrimental to better results, players can grind them, claim as NFTs and trade them on UD marketplace."]}),void 0)]}),void 0)},l=function(){return(0,i.jsxs)("div",(0,r.pi)({className:"game-mechanics"},{children:[(0,i.jsx)("h1",(0,r.pi)({className:"game-mechanics__title"},{children:"Game Mechanics"}),void 0),(0,i.jsx)("h2",(0,r.pi)({className:"game-mechanics__subtitle"},{children:"Match Day"}),void 0),(0,i.jsxs)("p",(0,r.pi)({className:"game-mechanics__description"},{children:["Players may initiate a PvP game by creating a smart-contract.In order to play, each user (club owner or dedicated manager) needs to pick his starting 11 players and up to 6 substitute players.",(0,i.jsx)("br",{},void 0),(0,i.jsx)("br",{},void 0),"Once a match is initiated, the user can see his opponent’s squad and can proceed to determining the playing formation, positions and detailed instructions of each player.",(0,i.jsx)("br",{},void 0),(0,i.jsx)("br",{},void 0),"After both users have confirmed their tactics (or when the time expires) the game result is calculated based on the strength of the squads and tactics utilised. While the result of the game is determined by the smart-contract and probabilities, the visual interface provides game simulation."]}),void 0),(0,i.jsx)("h2",(0,r.pi)({className:"game-mechanics__subtitle"},{children:"Ranking and Divisions"}),void 0),(0,i.jsxs)("p",(0,r.pi)({className:"game-mechanics__description"},{children:["Each Football club is assigned to a division ranked from 1 (highest) to 10 (lowest). Upon creation, each club starts from division 10. Clubs can only be matched up with clubs from the same division.",(0,i.jsx)("br",{},void 0),(0,i.jsx)("br",{},void 0),"At the end of every week, 10% of best-performing clubs get promoted to a higher division, and 10% of the worst-performing clubs get relegated to a lower division.If a club is inactive during the week, it’s division can not be changed. However, every club has to play at least 3 matches during the week to get weekly rewards."]}),void 0),(0,i.jsx)("h2",(0,r.pi)({className:"game-mechanics__subtitle"},{children:"Managers and club owners"}),void 0),(0,i.jsxs)("p",(0,r.pi)({className:"game-mechanics__description"},{children:["Owning a football club requires investment (buying the NFTs). However, a new player can start his path by working as the manager.",(0,i.jsx)("br",{},void 0),"A manager can be hired via a smart-contract to operate the club for a fixed period of time in exchange for a proportion of the club’s proceeds."]}),void 0)]}),void 0)},c=function(){return(0,i.jsxs)("div",(0,r.pi)({className:"pay-to-earn-economy"},{children:[(0,i.jsx)("h1",(0,r.pi)({className:"pay-to-earn-economy__title"},{children:"Play to Earn and Economy"}),void 0),(0,i.jsx)("h2",(0,r.pi)({className:"pay-to-earn-economy__subtitle"},{children:"COINS & PLAY-2-EARN"}),void 0),(0,i.jsx)("div",(0,r.pi)({className:"pay-to-earn-economy__description"},{children:"The weekly rewards are distributed in form of UDT. During the first 3 years coins are supplied by the system in a diminishing amounts to players who are involved in the weekly competitions.For the later game cycles, coins will be awarded based on proceeds from participants, the in-game store and ad revenue."}),void 0),(0,i.jsx)("h2",(0,r.pi)({className:"pay-to-earn-economy__subtitle"},{children:"rewards and packs"}),void 0),(0,i.jsxs)("div",(0,r.pi)({className:"pay-to-earn-economy__description"},{children:["Like a real-life football generates revenue, in-game clubs get revenue in form of in-game items for competing weekly. Higher divisions and better-performing clubs get better rewards.",(0,i.jsx)("br",{},void 0),(0,i.jsx)("br",{},void 0),"Most of the rewards are distributed on a weekly basis, but minor rewards are also given for each win. Rewards are distributed via loot boxes that randomly generate a combination of player cards, cosmetic items, and manager cards."]}),void 0),(0,i.jsx)("h2",(0,r.pi)({className:"pay-to-earn-economy__subtitle"},{children:"upgrade items"}),void 0),(0,i.jsx)("div",(0,r.pi)({className:"pay-to-earn-economy__description"},{children:"To improve the club’s performance, each user can procure better player cards or upgrade existing ones. Upgrade items are given from the loot boxes and can be used to improve certain stats of a card."}),void 0),(0,i.jsx)("h2",(0,r.pi)({className:"pay-to-earn-economy__subtitle"},{children:"marketplace"}),void 0),(0,i.jsxs)("div",(0,r.pi)({className:"pay-to-earn-economy__description"},{children:["The marketplace features the sale of player cards, unique cosmetics, loot boxes and any other in-game items that have been claimed as NFT.",(0,i.jsx)("br",{},void 0),"Managers for hire are also listed on the marketplace alongside with the managers’ statistics and monetary requirements."]}),void 0)]}),void 0)},u=function(){return(0,i.jsxs)("div",(0,r.pi)({className:"technology"},{children:[(0,i.jsx)("h1",(0,r.pi)({className:"technology__title"},{children:"Technology"}),void 0),(0,i.jsx)("h2",(0,r.pi)({className:"technology__subtitle"},{children:"Team"}),void 0),(0,i.jsxs)("div",(0,r.pi)({className:"technology__description"},{children:["Our team is an ideal mix of game developers and blockchain developers.",(0,i.jsx)("br",{},void 0),(0,i.jsx)("br",{},void 0),"ChickenFish Games is an experienced developer and producer with over 20 released games and mini-games to the AppStore, counting millions of players.",(0,i.jsx)("br",{},void 0),(0,i.jsx)("br",{},void 0),"Boosty Labs have a profound technological expertise that has impacted world-renowned blockhain projects such as Consensys, StorJ, Nem and many others.",(0,i.jsx)("br",{},void 0),(0,i.jsx)("br",{},void 0),"With our resources combined, we are the best team to deliver a blockchain-based game that players will love."]}),void 0),(0,i.jsx)("h2",(0,r.pi)({className:"technology__subtitle"},{children:"Blockchain"}),void 0),(0,i.jsx)("div",(0,r.pi)({className:"technology__description"},{children:"We chose onflow for our project because of the opportunities it brings to game development. While decentralised and transparent ledgers are important to asset the lack of any tampering on our part, onflow additionally offers scalability and flexibility for contract building that a vibrant football game requires."}),void 0),(0,i.jsx)("h2",(0,r.pi)({className:"technology__subtitle"},{children:"NTF & true ownership"}),void 0),(0,i.jsx)("div",(0,r.pi)({className:"technology__description"},{children:"We believe that users should receive a part of the benefits that they bring to our projects. This is the reason why we embraced true ownership for our in-game items. We expect people to be able to trade their grinding time for rare NFTs - to either get paid or advance in-game."}),void 0)]}),void 0)},d=function(){return(0,i.jsxs)("div",(0,r.pi)({className:"ud-fund"},{children:[(0,i.jsx)("h1",(0,r.pi)({className:"ud-fund__title"},{children:"UD Fund"}),void 0),(0,i.jsxs)("p",(0,r.pi)({className:"ud-fund__description"},{children:["UD DAO fund will be allocated to support the development of the game's ecosystem and invite outside developers. The fund will be incorporated under decentralised governance model and will be managed through voting by the UDT token holders.",(0,i.jsx)("br",{},void 0),(0,i.jsx)("br",{},void 0),"Voting will take place to determine short-term goals of the project. Members can propose their ideas and get funding based on community voting. The entire UD planning and management will gradually evolve into DAO"]}),void 0)]}),void 0)},f=function(){return(0,i.jsxs)("div",(0,r.pi)({className:"play-to-earn"},{children:[(0,i.jsx)("h1",(0,r.pi)({className:"play-to-earn__title"},{children:"Play to Earn"}),void 0),(0,i.jsxs)("p",(0,r.pi)({className:"play-to-earn__description"},{children:["Playing Ultimate Division puts users into weekly competitions. The allocated tokens are divided every week between players, based on their performance.",(0,i.jsx)("br",{},void 0),(0,i.jsx)("br",{},void 0),"By buying in-game items and player packs, users contribute to the initial P2E fund (20% of total UDT).",(0,i.jsx)("br",{},void 0),(0,i.jsx)("br",{},void 0),"The initial Play to Earn tokens will be distributed gradually at a decreasing pace among the players for competing in UD, and will be replaced by the proceeds of the game shop."]}),void 0)]}),void 0)};var h=n(5902);const p=function(){var e=[{value:"Play to earn",points:4182,style:{backgroundColor:"#A1B9CA"}},{value:"Private Sale",points:2010,style:{backgroundColor:"#A1CAC5"}},{value:"Staking Rewards",points:500,style:{backgroundColor:"#B3CAA1"}},{value:"Public Sale",points:300,style:{backgroundColor:"#F9E1BF"}},{value:"Core Team",points:129,style:{backgroundColor:"#F39B9B"}},{value:"UD Fund",points:3201,style:{backgroundColor:"#CAA1C8"}},{value:"Advisors",points:542,style:{backgroundColor:"#BDC0FF"}}];return(0,i.jsxs)("div",(0,r.pi)({className:"spending"},{children:[(0,i.jsx)("h1",(0,r.pi)({className:"spending__title"},{children:"Ultimate Division Tokenomics"}),void 0),(0,i.jsx)("p",(0,r.pi)({className:"spending__description"},{children:"UDT tokens will be unlocked within a 5-year schedule following the initial sale. Originally, 20% of tokens will be in circulation"}),void 0),(0,i.jsx)("h2",(0,r.pi)({className:"spending__subtitle"},{children:"UDT Spending"}),void 0),(0,i.jsxs)("p",(0,r.pi)({className:"spending__description"},{children:["UDT can be spent in-game to obtain packs that contain new player cards. New player cards will have a high demand to form better squads. New cards will also have intrinsic collector value.",(0,i.jsx)("br",{},void 0),(0,i.jsx)("br",{},void 0),"UDT will also be the main circulating currency on the marketplace and will be used in smart contracts between players.",(0,i.jsx)("br",{},void 0),(0,i.jsx)("br",{},void 0),"Some cosmetic and consumable in-games items will also require a steady UDT flow for every player.",(0,i.jsx)("br",{},void 0),(0,i.jsx)("br",{},void 0),"Overall, UDT will be necessary in-game currency that facilitates player interaction and rewards winners and high-performing teams."]}),void 0),(0,i.jsx)("div",(0,r.pi)({className:"spending__diagrams"},{children:(0,i.jsx)("div",(0,r.pi)({className:"spending__diagrams__doughnut"},{children:(0,i.jsx)(h.$I,{type:h.$I,data:{datasets:[{data:e.map((function(e){return e.points})),label:e.map((function(e){return e.value})),backgroundColor:e.map((function(e){return e.style.backgroundColor})),borderColor:["transparent"],cutout:"80%",rotation:0,esponsive:!0,maintainAspectRatio:!0,hoverOffset:16}],labels:e.map((function(e){return e.value}))},options:{layout:{padding:"10"},plugins:{tooltip:{backgroundColor:"transparent",displayColors:!1,padding:{left:135,right:355,top:270,bottom:280}},legend:{position:"right",labels:{color:"white",font:{size:16},usePointStyle:!0,padding:30}}}}},void 0)}),void 0)}),void 0)]}),void 0)},g=function(){return(0,i.jsxs)("div",(0,r.pi)({className:"staking"},{children:[(0,i.jsx)("h1",(0,r.pi)({className:"staking__title"},{children:"Staking"}),void 0),(0,i.jsxs)("p",(0,r.pi)({className:"staking__description"},{children:["UDT holders will be able to stake their tokens for periods of 1,3,6,12 months. Stakers will be able to claim their rewards at the same weekly intervals as division competitions progress.",(0,i.jsx)("br",{},void 0),(0,i.jsx)("br",{},void 0),"For extra rewards on the staked coins, stakers will be required to participate in the weekly UD competitions. The minimum play requirement will scale with the stake amount.",(0,i.jsx)("br",{},void 0),(0,i.jsx)("br",{},void 0),"For stakers who are not interested in playing the game as much, an option to form a contract with other players will be available. By hiring players, the stakers will contribute towards the Play to Earn factor of the game."]}),void 0)]}),void 0)};var m=(0,o.lazy)((function(){return n.e(465).then(n.bind(n,4465))})),v=(0,o.lazy)((function(){return n.e(945).then(n.bind(n,1945))})),b=(0,o.lazy)((function(){return n.e(458).then(n.bind(n,3458))})),y=(0,o.lazy)((function(){return n.e(156).then(n.bind(n,5156))})),x=(0,o.lazy)((function(){return n.e(62).then(n.bind(n,9062))})),_=(0,o.lazy)((function(){return n.e(657).then(n.bind(n,1657))})),w=(0,o.lazy)((function(){return n.e(681).then(n.bind(n,1681))})),k=function(){function e(e,t,n,r){this.path=e,this.component=t,this.exact=n,this.children=r}return e.prototype.with=function(e,t){return e.path=t.path+"/"+e.path,this},e.prototype.addChildren=function(e){var t=this;return this.children=e.map((function(e){return e.with(e,t)})),this},e}(),S=function(){function e(){}return e.MarketPlace=new k("/marketplace",m,!0),e.FootballerCard=new k("/card",b,!0),e.FootballField=new k("/field",y,!0),e.Store=new k("/store",w,!0),e.Club=new k("/club",v,!0),e.Whitepaper=new k("/whitepaper",x,!1),e.Tokenomics=new k("/tokenomics",_,!1),e.Summary=new k("summary",s,!0),e.GameMechanick=new k("game-mechanicks",l,!0),e.PayToEarnEconomy=new k("pay-to-earn-and-economy",c,!0),e.Technology=new k("technology",u,!0),e.Spending=new k("udt-spending",p,!0),e.PayToEarn=new k("pay-to-earn",f,!0),e.Staking=new k("staking",g,!0),e.Fund=new k("ud-dao-fund",d,!0),e.Default=new k("/",m,!0),e.routes=[e.Default,e.FootballField,e.MarketPlace,e.Club,e.FootballerCard,e.Store,e.Whitepaper.addChildren([e.Summary,e.GameMechanick,e.PayToEarnEconomy,e.Technology]),e.Tokenomics.addChildren([e.Spending,e.PayToEarn,e.Staking,e.Fund])],e}(),E=function(e){var t=e.component,n=(0,r._T)(e,["component"]);return(0,i.jsx)(t,(0,r.pi)({},n),void 0)},M=function(){return(0,i.jsx)(a.rs,{children:S.routes.map((function(e,t){return(0,i.jsx)(E,{path:e.path,component:e.component,exact:e.exact,children:e.children},t)}))},void 0)}},5865:(e,t,n)=>{"use strict";n.d(t,{iM:()=>r,og:()=>i,uL:()=>o,py:()=>a,fj:()=>s,nv:()=>l,b5:()=>c,cn:()=>u,Cp:()=>f,wo:()=>h,Z0:()=>p,yJ:()=>g,NC:()=>m,yX:()=>v,d2:()=>b,wO:()=>y,X7:()=>x,wh:()=>_});var r="FORMATION",i="SELECTION_VISIBILITY",o="CARD_POSITION",a="ADD_CARD",s="REMOVE_CARD",l="DRAG_START",c="DRAG_TARGET",u="EXCHANGE_CARDS",d=null,f=function(e){return{type:r,action:e}},h=function(e){return{type:i,action:e}},p=function(e,t){return{type:a,action:[e,t]}},g=function(e){return void 0===e&&(e=d),{type:s,action:e}},m=function(e){return{type:o,action:e}},v=function(e){return void 0===e&&(e=d),{type:l,action:e}},b=function(e){return void 0===e&&(e=d),{type:c,action:e}},y=function(e,t){return{type:u,action:[e,t]}},x=function(e){return{type:"TACTICS",action:e}},_=function(e){return{type:"CAPTAIN",action:e}}},3460:(e,t,n)=>{"use strict";n.d(t,{mT:()=>i,Bs:()=>o});var r=function(e,t){this.id=e,this.cardData=t},i=function(){this.options={formation:"4-4-2",captain:"",tactics:"",chosedCard:0,showCardSeletion:!1,dragStart:null,dragTarget:null},this.cardsList=[new r(0,null),new r(1,null),new r(2,null),new r(3,null),new r(4,null),new r(5,null),new r(6,null),new r(7,null),new r(8,null),new r(9,null),new r(10,null)]},o=function(e,t,n){void 0===e&&(e=""),void 0===t&&(t=""),void 0===n&&(n=[]),this.id=e,this.title=t,this.options=n,this.id=e,this.title=t,this.options=n}},8463:(e,t,n)=>{"use strict";n.d(t,{r:()=>r});var r=function(){function e(e,t){this.vilibility=e,this.height=t,this.vilibility=e,this.height=t}return Object.defineProperty(e.prototype,"triangleRotate",{get:function(){return this.vilibility?"rotate(0deg)":"rotate(-90deg)"},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"listHeight",{get:function(){return this.vilibility?this.height+"px":"0"},enumerable:!1,configurable:!0}),e}()},655:(e,t,n)=>{"use strict";n.d(t,{ZT:()=>i,pi:()=>o,_T:()=>a,mG:()=>s,Jh:()=>l});var r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)};function i(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}var o=function(){return(o=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var i in t=arguments[n])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e}).apply(this,arguments)};function a(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(r=Object.getOwnPropertySymbols(e);i<r.length;i++)t.indexOf(r[i])<0&&Object.prototype.propertyIsEnumerable.call(e,r[i])&&(n[r[i]]=e[r[i]])}return n}function s(e,t,n,r){return new(n||(n=Promise))((function(i,o){function a(e){try{l(r.next(e))}catch(e){o(e)}}function s(e){try{l(r.throw(e))}catch(e){o(e)}}function l(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}l((r=r.apply(e,t||[])).next())}))}function l(e,t){var n,r,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,r=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!((i=(i=a.trys).length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){a=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){a.label=o[1];break}if(6===o[0]&&a.label<i[1]){a.label=i[1],i=o;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(o);break}i[2]&&a.ops.pop(),a.trys.pop();continue}o=t.call(e,a)}catch(e){o=[6,e],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}}}},o={};function a(e){var t=o[e];if(void 0!==t)return t.exports;var n=o[e]={id:e,loaded:!1,exports:{}};return i[e](n,n.exports,a),n.loaded=!0,n.exports}a.m=i,a.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return a.d(t,{a:t}),t},a.d=(e,t)=>{for(var n in t)a.o(t,n)&&!a.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},a.f={},a.e=e=>Promise.all(Object.keys(a.f).reduce(((t,n)=>(a.f[n](e,t),t)),[])),a.u=e=>e+"."+a.h()+".js",a.miniCssF=e=>e+".css",a.h=()=>"6528a5b67868fd4c2a74",a.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),a.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),e={},t="cryptofotball:",a.l=(n,r,i,o)=>{if(e[n])e[n].push(r);else{var s,l;if(void 0!==i)for(var c=document.getElementsByTagName("script"),u=0;u<c.length;u++){var d=c[u];if(d.getAttribute("src")==n||d.getAttribute("data-webpack")==t+i){s=d;break}}s||(l=!0,(s=document.createElement("script")).charset="utf-8",s.timeout=120,a.nc&&s.setAttribute("nonce",a.nc),s.setAttribute("data-webpack",t+i),s.src=n),e[n]=[r];var f=(t,r)=>{s.onerror=s.onload=null,clearTimeout(h);var i=e[n];if(delete e[n],s.parentNode&&s.parentNode.removeChild(s),i&&i.forEach((e=>e(r))),t)return t(r)},h=setTimeout(f.bind(null,void 0,{type:"timeout",target:s}),12e4);s.onerror=f.bind(null,s.onerror),s.onload=f.bind(null,s.onload),l&&document.head.appendChild(s)}},a.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},a.nmd=e=>(e.paths=[],e.children||(e.children=[]),e),a.p="/",n=e=>new Promise(((t,n)=>{var r=a.miniCssF(e),i=a.p+r;if(((e,t)=>{for(var n=document.getElementsByTagName("link"),r=0;r<n.length;r++){var i=(a=n[r]).getAttribute("data-href")||a.getAttribute("href");if("stylesheet"===a.rel&&(i===e||i===t))return a}var o=document.getElementsByTagName("style");for(r=0;r<o.length;r++){var a;if((i=(a=o[r]).getAttribute("data-href"))===e||i===t)return a}})(r,i))return t();((e,t,n,r)=>{var i=document.createElement("link");i.rel="stylesheet",i.type="text/css",i.onerror=i.onload=o=>{if(i.onerror=i.onload=null,"load"===o.type)n();else{var a=o&&("load"===o.type?"missing":o.type),s=o&&o.target&&o.target.href||t,l=new Error("Loading CSS chunk "+e+" failed.\n("+s+")");l.code="CSS_CHUNK_LOAD_FAILED",l.type=a,l.request=s,i.parentNode.removeChild(i),r(l)}},i.href=t,document.head.appendChild(i)})(e,i,t,n)})),r={179:0},a.f.miniCss=(e,t)=>{r[e]?t.push(r[e]):0!==r[e]&&{62:1,156:1,458:1,465:1,657:1,681:1,945:1}[e]&&t.push(r[e]=n(e).then((()=>{r[e]=0}),(t=>{throw delete r[e],t})))},(()=>{var e={179:0};a.f.j=(t,n)=>{var r=a.o(e,t)?e[t]:void 0;if(0!==r)if(r)n.push(r[2]);else{var i=new Promise(((n,i)=>r=e[t]=[n,i]));n.push(r[2]=i);var o=a.p+a.u(t),s=new Error;a.l(o,(n=>{if(a.o(e,t)&&(0!==(r=e[t])&&(e[t]=void 0),r)){var i=n&&("load"===n.type?"missing":n.type),o=n&&n.target&&n.target.src;s.message="Loading chunk "+t+" failed.\n("+i+": "+o+")",s.name="ChunkLoadError",s.type=i,s.request=o,r[1](s)}}),"chunk-"+t,t)}};var t=(t,n)=>{var r,i,[o,s,l]=n,c=0;for(r in s)a.o(s,r)&&(a.m[r]=s[r]);for(l&&l(a),t&&t(n);c<o.length;c++)i=o[c],a.o(e,i)&&e[i]&&e[i][0](),e[o[c]]=0},n=self.webpackChunkcryptofotball=self.webpackChunkcryptofotball||[];n.forEach(t.bind(null,0)),n.push=t.bind(null,n.push.bind(n))})(),(()=>{"use strict";var e=a(655),t=a(5893),n=a(3935),r=a(9226),i=a(7294),o=a(3727),s=a(3356),l=a(6646),c=function(){return(0,t.jsxs)("div",(0,e.pi)({className:"ultimatedivision-navbar"},{children:[(0,t.jsx)("img",{className:"ultimatedivision-navbar__logo",src:l,alt:"UltimateDivision logo"},void 0),(0,t.jsxs)("ul",(0,e.pi)({className:"ultimatedivision-navbar__list"},{children:[(0,t.jsx)("li",(0,e.pi)({className:"ultimatedivision-navbar__item"},{children:(0,t.jsx)(o.OL,(0,e.pi)({to:s.FM.Summary.path,className:"ultimatedivision-navbar__item__active"},{children:"HOME"}),void 0)}),void 0),(0,t.jsx)("li",(0,e.pi)({className:"ultimatedivision-navbar__item"},{children:(0,t.jsx)(o.OL,(0,e.pi)({to:s.FM.Store.path,className:"ultimatedivision-navbar__item__active"},{children:"Store"}),void 0)}),void 0),(0,t.jsx)("li",(0,e.pi)({className:"ultimatedivision-navbar__item"},{children:(0,t.jsx)(o.OL,(0,e.pi)({to:s.FM.MarketPlace.path,className:"ultimatedivision-navbar__item__active"},{children:"MARKETPLACE"}),void 0)}),void 0),(0,t.jsx)("li",(0,e.pi)({className:"ultimatedivision-navbar__item"},{children:(0,t.jsx)(o.OL,(0,e.pi)({to:s.FM.Club.path,className:"ultimatedivision-navbar__item__active"},{children:"CLUB"}),void 0)}),void 0),(0,t.jsx)("li",(0,e.pi)({className:"ultimatedivision-navbar__item"},{children:(0,t.jsx)(o.OL,(0,e.pi)({to:s.FM.FootballField.path,className:"ultimatedivision-navbar__item__active"},{children:"FIELD"}),void 0)}),void 0)]}),void 0)]}),void 0)},u=a(5977),d=a(8463),f=a(5681),h=function(){var n=(0,i.useState)(!1),r=n[0],a=n[1],c=(0,i.useState)(!1),h=c[0],p=c[1],g=new d.r(r,130),m=new d.r(h,130),v=(0,u.TH)().pathname,b=v.includes("tokenomics")||v.includes("whitepaper"),y={whitepaper:["Summary","Game Mechanics","Play to Earn and Economy","Technology","Team"],tokenomics:["UDT Spending","Play to Earn","Staking","UD DAO Fund"]};return b?(0,t.jsxs)("div",(0,e.pi)({className:"about-menu"},{children:[(0,t.jsx)("div",(0,e.pi)({className:"about-menu__logo-wrapper"},{children:(0,t.jsx)("img",{src:l,alt:"ultimate logo"},void 0)}),void 0),(0,t.jsxs)("div",(0,e.pi)({className:"about-menu__whitepaper",onClick:function(){return a((function(e){return!e}))}},{children:[(0,t.jsx)("h2",{children:"Whitepaper"},void 0),(0,t.jsx)("img",{className:"about-menu__whitepaper-image",src:f,style:{transform:g.triangleRotate},alt:"triangle img"},void 0)]}),void 0),(0,t.jsx)("ul",(0,e.pi)({className:"about-menu__whitepaper-list",style:{height:g.listHeight}},{children:s.FM.Whitepaper.children&&s.FM.Whitepaper.children.map((function(n,r){return(0,t.jsx)("li",(0,e.pi)({className:"about-menu__whitepaper-item"},{children:(0,t.jsx)(o.rU,(0,e.pi)({to:n.path,className:"about-menu__whitepaper-link"},{children:y.whitepaper[r]}),void 0)}),r)}))}),void 0),(0,t.jsxs)("div",(0,e.pi)({className:"about-menu__tokenomics",onClick:function(){return p((function(e){return!e}))}},{children:[(0,t.jsx)("h2",{children:"Tokenomics"},void 0),(0,t.jsx)("img",{className:"about-menu__whitepaper-image",src:f,style:{transform:m.triangleRotate},alt:"triangle img"},void 0)]}),void 0),(0,t.jsx)("ul",(0,e.pi)({className:"about-menu__tokenomics-list",style:{height:m.listHeight}},{children:s.FM.Tokenomics.children&&s.FM.Tokenomics.children.map((function(n,r){return(0,t.jsx)("li",(0,e.pi)({className:"about-menu__tokenomics-item"},{children:(0,t.jsx)(o.rU,(0,e.pi)({to:n.path,className:"about-menu__tokenomics-link"},{children:y.tokenomics[r]}),void 0)}),r)}))}),void 0)]}),void 0):(0,t.jsx)(t.Fragment,{},void 0)};function p(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function g(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function m(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?g(Object(n),!0).forEach((function(t){p(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):g(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function v(e){return"Minified Redux error #"+e+"; visit https://redux.js.org/Errors?code="+e+" for the full message or use the non-minified dev environment for full errors. "}var b="function"==typeof Symbol&&Symbol.observable||"@@observable",y=function(){return Math.random().toString(36).substring(7).split("").join(".")},x={INIT:"@@redux/INIT"+y(),REPLACE:"@@redux/REPLACE"+y(),PROBE_UNKNOWN_ACTION:function(){return"@@redux/PROBE_UNKNOWN_ACTION"+y()}};function _(e){if("object"!=typeof e||null===e)return!1;for(var t=e;null!==Object.getPrototypeOf(t);)t=Object.getPrototypeOf(t);return Object.getPrototypeOf(e)===t}function w(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return 0===t.length?function(e){return e}:1===t.length?t[0]:t.reduce((function(e,t){return function(){return e(t.apply(void 0,arguments))}}))}function k(e){return function(t){var n=t.dispatch,r=t.getState;return function(t){return function(i){return"function"==typeof i?i(n,r,e):t(i)}}}}var S=k();S.withExtraArgument=k;const E=S;var M=a(3587),C=a(3884),P=a(7403),O=a(4133),T=a(1050),D=a(1442),L=a(6139),j=a(6386),A=a(234),R=a(5257),N=a(4317),z=a(9679),F=a(9442),I=a(9173),B=a(2579),V=a(5226),W=a(9868),U=function(){function e(e,t,n){void 0===e&&(e=""),void 0===t&&(t=""),void 0===n&&(n=[]),this.title=e,this.abbreviated=t,this.fields=n,this.average=this.fields.map((function(e){return e.value})).reduce((function(e,t){return e+t}))/this.fields.length}return Object.defineProperty(e.prototype,"abbr",{get:function(){return this.title.slice(0,3)},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"color",{get:function(){switch(!0){case this.average>=90:return"#3CCF5D";case this.average>=50:return"#E8EC16";default:return"#FF4200"}},enumerable:!1,configurable:!0}),e}(),H=function(){function e(e,t,n,r,i,o,a){this.lastName=e,this.price=t,this.playerFace=n,this.priceIcon=r,this.priceGoldIcon=i,this.confirmIcon=o,this.bgType=a}return Object.defineProperty(e.prototype,"backgroundType",{get:function(){return[M,C,P,O][this.bgType]},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"shadowType",{get:function(){return[T,D,L,j][this.bgType]},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"priceStatus",{get:function(){return[A,R,N,A][this.bgType]},enumerable:!1,configurable:!0}),e}(),$=function(e,t){void 0===e&&(e=""),void 0===t&&(t=0),this.label=e,this.value=t},Y=function(e,t,n){void 0===e&&(e=""),void 0===t&&(t=""),this.label=e,this.value=t,this.icon=n},q=function(e,t){void 0===e&&(e=""),this.label=e,this.value=t},Q=function(e,t){void 0===e&&(e=""),this.label=e,this.value=t},X=function(e,t){void 0===e&&(e=""),void 0===t&&(t=0),this.label=e,this.value=t},K=function(){function e(e,t,n,r,i){this.id=e,this.price=t,this.prp=n,this.updated=r,this.pr=i}return Object.defineProperty(e.prototype,"color",{get:function(){switch(!0){case this.prp.value>=80:return"#1898D7";case this.prp.value>=70:return"#3CCF5D";case this.prp.value>=50:return"#E86C27";default:return"#FF4200"}},enumerable:!1,configurable:!0}),e}(),Z=function(e,t,n,r,i){this.id=e,this.name=t,this.min=n,this.max=r,this.value=i},G=function(e){this.bgType=e,this.mainInfo=new H("Ronalculus",1e6,I,B,F,z,this.bgType),this.overalInfo=[new Y("name","Albert Ronalculus"),new Y("nation","Portugal 🇵🇹"),new Y("skills","5",W),new Y("weak foot","5",W),new Y("intl. rep","5",W),new Y("foot","right"),new Y("height","187"),new Y("nation","87"),new Y("revision","rare"),new Y("def. wr","low"),new Y("arr. wr","high"),new Y("added on","2020-09-10"),new Y("origin","na"),new Y("r. Face","low"),new Y("b. type","",V),new Y("age","36 years old")],this.stats=[new U("tactics","tac",[new $("positioning",100),new $("composure",95),new $("aggression",98),new $("vision",98),new $("awareness",99),new $("crosses",98)]),new U("physique","phy",[new $("acceleration",26),new $("running speed",25),new $("reaction speed",45),new $("agility",31),new $("stamina",40),new $("strength",35),new $("jumping",28),new $("balance",42)]),new U("technique","tec",[new $("dribbing",26),new $("ball fontrol",26),new $("weak foot",26),new $("skill moves",26),new $("finesse",26),new $("curve",26),new $("volleys",26),new $("short passing",26),new $("long passing",26),new $("forward pass",26)]),new U("offence","off",[new $("finishing ability",42),new $("shot power",42),new $("accuracy",42),new $("distance",42),new $("penalty",42),new $("free Kicks",42),new $("corners",42),new $("heading accuracy",42)]),new U("defence","def",[new $("offside trap",74),new $("tackles",74),new $("ball focus",74),new $("interceptions",74),new $("vigilance",74)]),new U("goalkeeping","gk",[new $("diving",84),new $("handling",84),new $("sweeping",84),new $("throwing",84)])],this.price=new K(new Q("id",1),new q("price","11,400,00"),new X("prp",75),new q("updated",16),new q("pr","1,142,000 - 15,000,000")),this.diagram=[new Z("1","physical",100,800,688),new Z("2","mental",100,800,688),new Z("3","skill",100,800,688),new Z("4","chem. style",100,800,688),new Z("5","base stats",100,800,688),new Z("6","in game stats",100,800,688)]},J=function(){function t(){}return t.prototype.post=function(t,n){return(0,e.mG)(this,void 0,void 0,(function(){return(0,e.Jh)(this,(function(e){switch(e.label){case 0:return[4,this.do("POST",t,n)];case 1:return[2,e.sent()]}}))}))},t.prototype.patch=function(t,n){return(0,e.mG)(this,void 0,void 0,(function(){return(0,e.Jh)(this,(function(e){switch(e.label){case 0:return[4,this.do("PATCH",t,n)];case 1:return[2,e.sent()]}}))}))},t.prototype.put=function(t,n,r){return void 0===r&&(r=!0),(0,e.mG)(this,void 0,void 0,(function(){return(0,e.Jh)(this,(function(e){switch(e.label){case 0:return[4,this.do("PUT",t,n)];case 1:return[2,e.sent()]}}))}))},t.prototype.get=function(t,n){return void 0===n&&(n=!0),(0,e.mG)(this,void 0,void 0,(function(){return(0,e.Jh)(this,(function(e){switch(e.label){case 0:return[4,this.do("GET",t,null)];case 1:return[2,e.sent()]}}))}))},t.prototype.delete=function(t,n){return void 0===n&&(n=!0),(0,e.mG)(this,void 0,void 0,(function(){return(0,e.Jh)(this,(function(e){switch(e.label){case 0:return[4,this.do("DELETE",t,null)];case 1:return[2,e.sent()]}}))}))},t.prototype.do=function(t,n,r){return(0,e.mG)(this,void 0,void 0,(function(){var i;return(0,e.Jh)(this,(function(e){switch(e.label){case 0:return(i={method:t,body:r}).headers={"Content-Type":"application/json"},[4,fetch(n,i)];case 1:return[2,e.sent()]}}))}))},t}(),ee=function(t){function n(e){return void 0===e&&(e="authorization required"),t.call(this,e)||this}return(0,e.ZT)(n,t),n}(Error),te=function(t){function n(e){return void 0===e&&(e="bad request"),t.call(this,e)||this}return(0,e.ZT)(n,t),n}(Error),ne=function(t){function n(e){return void 0===e&&(e="internal server error"),t.call(this,e)||this}return(0,e.ZT)(n,t),n}(Error),re=function(t){function n(){var e=null!==t&&t.apply(this,arguments)||this;return e.ROOT_PATH="/api/v0/cards",e}return(0,e.ZT)(n,t),n.prototype.get=function(){return(0,e.mG)(this,void 0,void 0,(function(){return(0,e.Jh)(this,(function(e){switch(e.label){case 0:return[4,this.http.get(this.ROOT_PATH)];case 1:return[2,e.sent()]}}))}))},n.prototype.buy=function(t){return(0,e.mG)(this,void 0,void 0,(function(){return(0,e.Jh)(this,(function(e){switch(e.label){case 0:return[4,this.http.post(this.ROOT_PATH,t)];case 1:return[2,e.sent()]}}))}))},n}(function(){function t(){this.http=new J}return t.prototype.handleError=function(t){return(0,e.mG)(this,void 0,void 0,(function(){return(0,e.Jh)(this,(function(e){switch(t.status){case 401:throw new ee;case 404:throw new te;case 500:default:throw new ne}return[2]}))}))},t}()),ie={cardService:new(function(){function t(e){void 0===e&&(e=new re),this.card=e}return t.prototype.get=function(){return(0,e.mG)(this,void 0,void 0,(function(){return(0,e.Jh)(this,(function(e){switch(e.label){case 0:return[4,this.card.get()];case 1:return[2,e.sent()]}}))}))},t.prototype.buy=function(t){return(0,e.mG)(this,void 0,void 0,(function(){return(0,e.Jh)(this,(function(e){switch(e.label){case 0:return[4,this.card.buy(t)];case 1:return[2,e.sent()]}}))}))},t}()),cards:function(e){for(var t=[];e;)t.push(new G(0),new G(1),new G(2),new G(3)),e--;return t}(20)},oe=a(3460),ae=a(5865),se=new oe.mT,le=function e(t,n,r){var i;if("function"==typeof n&&"function"==typeof r||"function"==typeof r&&"function"==typeof arguments[3])throw new Error(v(0));if("function"==typeof n&&void 0===r&&(r=n,n=void 0),void 0!==r){if("function"!=typeof r)throw new Error(v(1));return r(e)(t,n)}if("function"!=typeof t)throw new Error(v(2));var o=t,a=n,s=[],l=s,c=!1;function u(){l===s&&(l=s.slice())}function d(){if(c)throw new Error(v(3));return a}function f(e){if("function"!=typeof e)throw new Error(v(4));if(c)throw new Error(v(5));var t=!0;return u(),l.push(e),function(){if(t){if(c)throw new Error(v(6));t=!1,u();var n=l.indexOf(e);l.splice(n,1),s=null}}}function h(e){if(!_(e))throw new Error(v(7));if(void 0===e.type)throw new Error(v(8));if(c)throw new Error(v(9));try{c=!0,a=o(a,e)}finally{c=!1}for(var t=s=l,n=0;n<t.length;n++)(0,t[n])();return e}function p(e){if("function"!=typeof e)throw new Error(v(10));o=e,h({type:x.REPLACE})}function g(){var e,t=f;return(e={subscribe:function(e){if("object"!=typeof e||null===e)throw new Error(v(11));function n(){e.next&&e.next(d())}return n(),{unsubscribe:t(n)}}})[b]=function(){return this},e}return h({type:x.INIT}),(i={dispatch:h,subscribe:f,getState:d,replaceReducer:p})[b]=g,i}(function(e){for(var t=Object.keys(e),n={},r=0;r<t.length;r++){var i=t[r];"function"==typeof e[i]&&(n[i]=e[i])}var o,a=Object.keys(n);try{!function(e){Object.keys(e).forEach((function(t){var n=e[t];if(void 0===n(void 0,{type:x.INIT}))throw new Error(v(12));if(void 0===n(void 0,{type:x.PROBE_UNKNOWN_ACTION()}))throw new Error(v(13))}))}(n)}catch(e){o=e}return function(e,t){if(void 0===e&&(e={}),o)throw o;for(var r=!1,i={},s=0;s<a.length;s++){var l=a[s],c=n[l],u=e[l],d=c(u,t);if(void 0===d)throw t&&t.type,new Error(v(14));i[l]=d,r=r||d!==u}return(r=r||a.length!==Object.keys(e).length)?i:e}}({cardsReducer:function(t,n){return void 0===t&&(t=ie),void 0===n&&(n={}),(0,e.pi)({},t)},fieldReducer:function(t,n){void 0===t&&(t=se),void 0===n&&(n={});var r=t.options,i=t.cardsList;switch(n.type){case ae.iM:r.formation=n.action;break;case ae.og:r.showCardSeletion=n.action;break;case ae.uL:r.chosedCard=n.action;break;case ae.py:i[n.action[1]].cardData=n.action[0];break;case ae.fj:i[n.action].cardData=null;break;case ae.nv:r.dragStart=n.action;break;case ae.b5:r.dragTarget=n.action;break;case ae.cn:var o=i[n.action[0]];i[n.action[0]]=i[n.action[1]],i[n.action[1]]=o}return(0,e.pi)({},t)}}),function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return function(e){return function(){var n=e.apply(void 0,arguments),r=function(){throw new Error(v(15))},i={getState:n.getState,dispatch:function(){return r.apply(void 0,arguments)}},o=t.map((function(e){return e(i)}));return r=w.apply(void 0,o)(n.dispatch),m(m({},n),{},{dispatch:r})}}}(E));n.render((0,t.jsx)(r.zt,(0,e.pi)({store:le},{children:(0,t.jsx)((function(){return(0,t.jsx)(i.Suspense,(0,e.pi)({fallback:(0,t.jsx)("div",{children:"Loading..."},void 0)},{children:(0,t.jsxs)(o.VK,(0,e.pi)({basename:"/ud"},{children:[(0,t.jsx)(c,{},void 0),(0,t.jsx)(h,{},void 0),(0,t.jsx)(s.Z5,{},void 0)]}),void 0)}),void 0)}),{},void 0)}),void 0),document.getElementById("root"))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,