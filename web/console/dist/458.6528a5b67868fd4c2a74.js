(self.webpackChunkcryptofotball=self.webpackChunkcryptofotball||[]).push([[458],{1356:(a,r,i)=>{"use strict";a.exports=i.p+"images/currencyd2773.svg"},6317:(a,r,i)=>{"use strict";i.d(r,{s:()=>d});var e=i(655),s=i(5893),l=i(3727),o=i(3356),d=function(a){var r=a.card,i=a.parentClassName;return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)("img",{className:i+"__background-type",src:r.mainInfo.backgroundType,alt:"background img",draggable:!1},void 0),(0,s.jsx)("img",{className:i+"__face-picture",src:r.mainInfo.playerFace,alt:"Player face",draggable:!1},void 0),(0,s.jsx)(l.rU,(0,e.pi)({to:{pathname:o.FM.FootballerCard.path,state:{card:r}}},{children:(0,s.jsx)("span",(0,e.pi)({className:i+"__name"},{children:r.mainInfo.lastName}),void 0)}),void 0),(0,s.jsx)("ul",(0,e.pi)({className:i+"__list"},{children:r.stats.map((function(a,r){return(0,s.jsx)("li",(0,e.pi)({className:i+"__list__item"},{children:a.abbreviated+" "+a.average+" "}),r)}))}),void 0)]},void 0)}},3458:(a,r,i)=>{"use strict";i.r(r),i.d(r,{default:()=>x});var e=i(655),s=i(5893),l=i(5902),o=function(a){var r=a.props,i=r.name,o=r.min,d=r.max,t=r.value,c=Math.round((t-o)/d*100);return(0,s.jsxs)("div",(0,e.pi)({className:"footballer-card-illustrations-diagram"},{children:[(0,s.jsx)(l.$I,{type:l.$I,data:{datasets:[{data:[c,100-c],backgroundColor:["#3CCF5D","#5E5EAA"],borderColor:["transparent"],cutout:"80%",rotation:270,circumference:180,maintainAspectRatio:!0}]},options:{plugins:{title:{display:!0,text:i.toUpperCase(),color:"white"}}}},void 0),(0,s.jsxs)("div",(0,e.pi)({className:"footballer-card-illustrations-diagram__values-area"},{children:[(0,s.jsx)("span",(0,e.pi)({className:"footballer-card-illustrations-diagram__min"},{children:o}),void 0),(0,s.jsx)("span",(0,e.pi)({className:"footballer-card-illustrations-diagram__value"},{children:t}),void 0),(0,s.jsx)("span",(0,e.pi)({className:"footballer-card-illustrations-diagram__max"},{children:d}),void 0)]}),void 0)]}),void 0)},d=function(a){var r=a.card.diagram;return(0,s.jsx)("div",(0,e.pi)({className:"footballer-card-illustrations-diagram-area"},{children:r.map((function(a){return(0,s.jsx)(o,{props:a},a.id)}))}),void 0)},t=function(a){var r=a.card.stats,i=["TAC","PHY","TEC","OFF","DEF","GK"];return(0,s.jsx)("div",(0,e.pi)({className:"footballer-card-illustrations-radar"},{children:(0,s.jsx)(l.Fk,{type:l.Fk,data:{labels:r.map((function(a,r){return i[r]+" "+a.average})),datasets:[{backgroundColor:"#66FF8866",data:r.map((function(a){return a.average}))}]},options:{elements:{line:{borderWidth:1,borderColor:"#66ff8791"}},animations:{tension:{duration:1e3,easing:"linear",from:0,to:0}},plugins:{legend:{display:!1},interaction:{display:!1}},scale:{ticks:{maxTicksLimit:2}},scales:{r:{ticks:{display:!1},pointLabels:{color:"#afafaf"},angleLines:{borderDash:[7,8],color:"#515180"},grid:{color:"#515180"}}}}},void 0)}),void 0)},c=i(6317),n=function(a){var r=a.card;return(0,s.jsxs)("div",(0,e.pi)({className:"footballer-card-illustrations"},{children:[(0,s.jsx)("div",(0,e.pi)({className:"footballer-card-illustrations__card"},{children:(0,s.jsx)(c.s,{card:r,parentClassName:"footballer-card-illustrations__card"},void 0)}),void 0),(0,s.jsx)(t,{card:r},void 0),(0,s.jsx)(d,{card:r},void 0)]}),void 0)},p=i(9226),v=i(1356),m=function(){var a=(0,p.v9)((function(a){return a.cardsReducer.cards[0].price})),r=a.prp.value;return(0,s.jsx)("div",(0,e.pi)({className:"footballer-card-price"},{children:(0,s.jsxs)("div",(0,e.pi)({className:"footballer-card-price__wrapper"},{children:[(0,s.jsxs)("div",(0,e.pi)({className:"footballer-card-price__diagram"},{children:[(0,s.jsxs)("p",(0,e.pi)({className:"footballer-card-price__diagram-value"},{children:["PRP: ",(0,s.jsxs)("span",(0,e.pi)({className:"footballer-card-price__diagram-value-quantity"},{children:[r,"%"]}),void 0)]}),void 0),(0,s.jsx)(l.$I,{type:l.$I,data:{datasets:[{data:[r,100-r],backgroundColor:[""+a.color,"#5E5EAA"],borderColor:["transparent"],cutout:"80%",rotation:90,esponsive:!0,maintainAspectRatio:!0}]}},void 0)]}),void 0),(0,s.jsxs)("div",(0,e.pi)({className:"footballer-card-price__info-area"},{children:[(0,s.jsx)("h2",(0,e.pi)({className:"footballer-card-price__price"},{children:(0,s.jsxs)(s.Fragment,{children:[a.price.value,(0,s.jsx)("img",{className:"footballer-card-price__price-currency",src:v,alt:"currency img"},void 0)]},void 0)}),void 0),(0,s.jsxs)("div",(0,e.pi)({className:"footballer-card-price__additional-info"},{children:[(0,s.jsxs)("div",{children:["Price updated: ",(0,s.jsxs)("span",(0,e.pi)({className:"footballer-card-price__value"},{children:[a.updated.value," mins ago"]}),void 0)]},void 0),(0,s.jsxs)("div",{children:["PR: ",(0,s.jsx)("span",(0,e.pi)({className:"footballer-card-price__value"},{children:a.pr.value}),void 0)]},void 0)]}),void 0)]}),void 0)]}),void 0)}),void 0)},u=function(a){var r=a.props;return(0,s.jsxs)("div",(0,e.pi)({className:"footballer-card-stats-item"},{children:[(0,s.jsxs)("div",(0,e.pi)({className:"footballer-card-stats-item__heading"},{children:[(0,s.jsx)("span",(0,e.pi)({className:"footballer-card-stats-item__heading-name"},{children:r.title}),void 0),(0,s.jsx)("span",(0,e.pi)({className:"footballer-card-stats-item__heading-value",style:{color:r.color}},{children:r.average}),void 0)]}),void 0),(0,s.jsx)("div",(0,e.pi)({className:"footballer-card-stats-item__diagram"},{children:(0,s.jsx)("div",{className:"footballer-card-stats-item__diagram-value",style:{background:r.color,width:r.average+"%"}},void 0)}),void 0),r.fields.map((function(a,r){return(0,s.jsxs)("div",(0,e.pi)({className:"footballer-card-stats-item__row"},{children:[(0,s.jsx)("span",(0,e.pi)({className:"footballer-card-stats-item__row-name"},{children:a.label}),void 0),(0,s.jsx)("span",(0,e.pi)({className:"footballer-card-stats-item__row-value"},{children:a.value}),void 0)]}),r)}))]}),void 0)},f=function(a){var r=a.card.stats;return(0,s.jsx)("div",(0,e.pi)({className:"footballer-card-stats"},{children:r.map((function(a,r){return(0,s.jsx)(u,{props:a},r)}))}),void 0)},_=function(a){var r=a.card.overalInfo;return(0,s.jsx)("div",(0,e.pi)({className:"footballer-card-information"},{children:r.map((function(a,r){return(0,s.jsxs)("div",(0,e.pi)({className:"footballer-card-information__item"},{children:[(0,s.jsx)("div",(0,e.pi)({className:"footballer-card-information__item-title"},{children:a.label}),void 0),(0,s.jsx)("div",(0,e.pi)({className:"footballer-card-information__item-value"},{children:(0,s.jsxs)(s.Fragment,{children:[a.value,(0,s.jsx)("img",{className:"footballer-card-information__item-icon",src:a.icon,alt:a.icon&&"item icon"},void 0)]},void 0)}),void 0)]}),r)}))}),void 0)};const x=function(a){var r=a.location.state.card;return(0,s.jsx)("div",(0,e.pi)({className:"footballer-card"},{children:(0,s.jsx)("div",(0,e.pi)({className:"footballer-card__border"},{children:(0,s.jsxs)("div",(0,e.pi)({className:"footballer-card__wrapper"},{children:[(0,s.jsx)("div",(0,e.pi)({className:"footballer-card__name-wrapper"},{children:(0,s.jsx)("h1",(0,e.pi)({className:"footballer-card__name"},{children:r.overalInfo[0].value}),void 0)}),void 0),(0,s.jsx)(n,{card:r},void 0),(0,s.jsxs)("div",(0,e.pi)({className:"footballer-card__stats-area"},{children:[(0,s.jsx)(m,{},void 0),(0,s.jsx)(f,{card:r},void 0),(0,s.jsx)(_,{card:r},void 0)]}),void 0)]}),void 0)}),void 0)}),void 0)}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,