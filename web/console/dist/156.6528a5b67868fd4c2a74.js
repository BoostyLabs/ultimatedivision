(self.webpackChunkcryptofotball=self.webpackChunkcryptofotball||[]).push([[156],{7762:(i,e,t)=>{"use strict";i.exports=t.p+"images/search63bf9.svg"},8754:(i,e,t)=>{"use strict";i.exports=t.p+"images/nextda86e.svg"},110:(i,e,t)=>{"use strict";i.exports=t.p+"images/previous1f4cf.svg"},7928:(i,e,t)=>{"use strict";t.d(e,{D:()=>c});var a=t(655),o=t(5893),n=t(7294),s=t(8754),l=t(110),r=function(i){var e=i.blockPages,t=i.onPageChange;return(0,o.jsx)("ul",(0,a.pi)({className:"ultimatedivision-paginator__pages"},{children:e.map((function(i,e){return(0,o.jsx)("li",(0,a.pi)({className:"ultimatedivision-paginator__pages__item",onClick:function(){return t("change page",i)}},{children:i}),e)}))}),void 0)},c=function(i){var e=i.itemCount,t=(0,n.useState)(1),c=t[0],d=t[1],p=(0,n.useState)([]),f=p[0],u=p[1],m=(0,n.useState)([]),v=m[0],_=m[1],g=(0,n.useState)([]),h=g[0],x=g[1];(0,n.useEffect)((function(){P()}),[c]);for(var j=[],N=1;N<=Math.ceil(e/8);N++)j.push(N);var b=v.length<=5&&j.length>10,y=!!v.length,w=c<5,C=j.length-c<4,k=j.length<=10,P=function(){if(j.length)return k?(u(j.slice()),_([]),void x([])):void function(){if(!k)w?(u(j.slice(0,5)),_([]),x(j.slice(-1))):w||C?C&&(u(j.slice(0,1)),_([]),x(j.slice(-5))):(u(j.slice(0,1)),_(j.slice(c+-3,c+2)),x(j.slice(-1)))}()},S=function(i,e){switch(void 0===e&&(e=c),i){case"next page":return e<j.length&&d(e+1),void P();case"previous page":return e>1&&d(e-1),void P();case"change page":return d(e),void P();default:P()}};return(0,o.jsx)("section",(0,a.pi)({className:"ultimatedivision-paginator"},{children:(0,o.jsxs)("div",(0,a.pi)({className:"ultimatedivision-paginator__wrapper"},{children:[(0,o.jsxs)("a",(0,a.pi)({className:"ultimatedivision-paginator__previous",onClick:function(){return S("previous page")}},{children:[(0,o.jsx)("img",{className:"ultimatedivision-paginator__previous__arrow",src:l,alt:"Previous page"},void 0),(0,o.jsx)("p",(0,a.pi)({className:"ultimatedivision-paginator__previous__title"},{children:"Previous page"}),void 0)]}),void 0),(0,o.jsx)(r,{blockPages:f,onPageChange:S},void 0),b&&(0,o.jsx)("span",(0,a.pi)({className:"ultimatedivision-paginator__pages__dots"},{children:"..."}),void 0),(0,o.jsx)(r,{blockPages:v,onPageChange:S},void 0),y&&(0,o.jsx)("span",(0,a.pi)({className:"ultimatedivision-paginator__pages__dots"},{children:"..."}),void 0),(0,o.jsx)(r,{blockPages:h,onPageChange:S},void 0),(0,o.jsxs)("a",(0,a.pi)({className:"ultimatedivision-paginator__next",onClick:function(){return S("next page")}},{children:[(0,o.jsx)("p",(0,a.pi)({className:"ultimatedivision-paginator__next__title"},{children:"Next page"}),void 0),(0,o.jsx)("img",{className:"ultimatedivision-paginator__next__arrow",src:s,alt:"Next page"},void 0)]}),void 0)]}),void 0)}),void 0)}},6317:(i,e,t)=>{"use strict";t.d(e,{s:()=>l});var a=t(655),o=t(5893),n=t(3727),s=t(3356),l=function(i){var e=i.card,t=i.parentClassName;return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)("img",{className:t+"__background-type",src:e.mainInfo.backgroundType,alt:"background img",draggable:!1},void 0),(0,o.jsx)("img",{className:t+"__face-picture",src:e.mainInfo.playerFace,alt:"Player face",draggable:!1},void 0),(0,o.jsx)(n.rU,(0,a.pi)({to:{pathname:s.FM.FootballerCard.path,state:{card:e}}},{children:(0,o.jsx)("span",(0,a.pi)({className:t+"__name"},{children:e.mainInfo.lastName}),void 0)}),void 0),(0,o.jsx)("ul",(0,a.pi)({className:t+"__list"},{children:e.stats.map((function(i,e){return(0,o.jsx)("li",(0,a.pi)({className:t+"__list__item"},{children:i.abbreviated+" "+i.average+" "}),e)}))}),void 0)]},void 0)}},5156:(i,e,t)=>{"use strict";t.r(e),t.d(e,{default:()=>b});var a=t(655),o=t(5893),n=t(9226),s=t(5865),l=t(5681),r=t(7762),c=function(){var i=[{title:"Card quality",src:l},{title:"Overal rating",src:l},{title:"Player`s position",src:l}];return(0,o.jsx)("section",(0,a.pi)({className:"football-field-filter"},{children:(0,o.jsx)("div",(0,a.pi)({className:"football-field-filter__wrapper"},{children:(0,o.jsxs)("ul",(0,a.pi)({className:"football-field-filter__list"},{children:[(0,o.jsx)("li",(0,a.pi)({className:"football-field-filter__list__item"},{children:(0,o.jsxs)("form",(0,a.pi)({action:"",className:"football-field-filter__form"},{children:[(0,o.jsx)("button",(0,a.pi)({type:"submit",className:"football-field-filter__submit"},{children:(0,o.jsx)("img",{src:r,alt:"Filter icon",className:"football-field-filter__item__search-picture"},void 0)}),void 0),(0,o.jsx)("input",{type:"text",placeholder:"Player`s name",className:"football-field-filter__input"},void 0)]}),void 0)}),void 0),i.map((function(i,e){return(0,o.jsxs)("li",(0,a.pi)({className:"football-field-filter__list__item"},{children:[i.title,(0,o.jsx)("img",{src:i.src,alt:"Filter icon",className:"football-field-filter__list__item__picture"},void 0)]}),e)}))]}),void 0)}),void 0)}),void 0)},d=t(6317),p=t(7928),f=function(){var i=(0,n.v9)((function(i){return i.cardsReducer.cards})),e=(0,n.I0)(),t=(0,n.v9)((function(i){return i.fieldReducer}));return(0,o.jsxs)("div",(0,a.pi)({id:"cardList",className:"card-selection"},{children:[(0,o.jsx)(c,{},void 0),(0,o.jsx)("div",(0,a.pi)({className:"card-selection__list"},{children:i.map((function(i,n){return(0,o.jsx)("div",(0,a.pi)({className:"card-selection__card",onClick:function(){return function(i,t){e((0,s.Z0)(i,t)),e((0,s.wo)(!1)),setTimeout((function(){window.scroll(0,200)}),10)}(i,t.options.chosedCard)}},{children:(0,o.jsx)(d.s,{card:i,parentClassName:"card-selection__card"},void 0)}),n)}))}),void 0),(0,o.jsx)(p.D,{itemCount:i.length},void 0)]}),void 0)},u=t(7294),m=t(3460),v=t(8463),_=function(i){var e=i.props,t=(0,u.useState)(!1),r=t[0],c=t[1],d=new v.r(r,90),p=(0,n.I0)();return(0,o.jsxs)("div",(0,a.pi)({className:"football-field-information-option"},{children:[(0,o.jsxs)("div",(0,a.pi)({className:"football-field-information-option__heading",onClick:function(){return c((function(i){return!i}))}},{children:[(0,o.jsx)("h4",(0,a.pi)({className:"football-field-information-option__title"},{children:e.title}),void 0),(0,o.jsx)("img",{className:"football-field-information-option__image",src:l,style:{transform:d.triangleRotate},alt:"triangle img",id:"triangle-"+e.id},void 0)]}),void 0),(0,o.jsx)("ul",(0,a.pi)({style:{height:d.triangleRotate},className:"football-field-information-option__list",id:e.id},{children:e.options.map((function(i,e){return(0,o.jsx)("li",(0,a.pi)({className:"football-field-information-option__item",onClick:function(){return p(s.wh)}},{children:i}),e)}))}),void 0)]}),void 0)},g=function(i){var e=i.props,t=(0,u.useState)(!1),r=t[0],c=t[1],d=new v.r(r,90),p=(0,n.I0)();return(0,o.jsxs)("div",(0,a.pi)({className:"football-field-information-option"},{children:[(0,o.jsxs)("div",(0,a.pi)({className:"football-field-information-option__heading",onClick:function(){return c((function(i){return!i}))}},{children:[(0,o.jsx)("h4",(0,a.pi)({className:"football-field-information-option__title"},{children:e.title}),void 0),(0,o.jsx)("img",{className:"football-field-information-option__image",src:l,style:{transform:d.triangleRotate},alt:"triangle img",id:"triangle-"+e.id},void 0)]}),void 0),(0,o.jsx)("ul",(0,a.pi)({style:{height:d.listHeight},className:"football-field-information-option__list",id:e.id},{children:e.options.map((function(i,e){return(0,o.jsx)("li",(0,a.pi)({className:"football-field-information-option__item",onClick:function(){return p((0,s.Cp)(i))}},{children:i}),e)}))}),void 0)]}),void 0)},h=function(i){var e=i.props,t=(0,u.useState)(!1),r=t[0],c=t[1],d=new v.r(r,90),p=(0,n.I0)();return(0,o.jsxs)("div",(0,a.pi)({className:"football-field-information-option"},{children:[(0,o.jsxs)("div",(0,a.pi)({className:"football-field-information-option__heading",onClick:function(){return c((function(i){return!i}))}},{children:[(0,o.jsx)("h4",(0,a.pi)({className:"football-field-information-option__title"},{children:e.title}),void 0),(0,o.jsx)("img",{className:"football-field-information-option__image",src:l,style:{transform:d.triangleRotate},alt:"triangle img",id:"triangle-"+e.id},void 0)]}),void 0),(0,o.jsx)("ul",(0,a.pi)({style:{height:d.listHeight},className:"football-field-information-option__list",id:e.id},{children:e.options.map((function(i,e){return(0,o.jsx)("li",(0,a.pi)({className:"football-field-information-option__item",onClick:function(){return p(s.X7)}},{children:i}),e)}))}),void 0)]}),void 0)},x=function(){var i={formation:new m.Bs("0","formation",["4-4-2","4-2-4","4-3-3"]),tactics:new m.Bs("1","tactics",["attack","defence","regular"]),captain:new m.Bs("2","captain",["4-4-2","4-2-4","4-3-3"])};return(0,o.jsxs)("div",(0,a.pi)({className:"football-field-information"},{children:[(0,o.jsx)("h2",(0,a.pi)({className:"football-field-information__title"},{children:"information"}),void 0),(0,o.jsx)(g,{props:i.formation},void 0),(0,o.jsx)(h,{props:i.tactics},void 0),(0,o.jsx)(_,{props:i.captain},void 0)]}),void 0)},j=function(i){var e=i.card,t=i.index,l=(i.place,(0,n.I0)()),r=(0,u.useState)(!1),c=r[0],p=r[1],f=c?"block":"none";return(0,o.jsxs)("div",(0,a.pi)({onClick:function(i){i.stopPropagation(),p((function(i){return!i}))},className:"football-field-card"},{children:[(0,o.jsx)("div",{className:"football-field-card__wrapper",style:{display:f}},void 0),(0,o.jsx)(d.s,{card:e,parentClassName:"football-field-card"},void 0),(0,o.jsx)("div",(0,a.pi)({style:{display:f},onClick:function(i){i.stopPropagation(),i.preventDefault(),l((0,s.yJ)(t))},className:"football-field-card__control"},{children:"âœ– delete a player"}),void 0)]}),void 0)},N=function(){var i=(0,n.v9)((function(i){return i.fieldReducer.options.formation})),e=(0,n.v9)((function(i){return i.fieldReducer.options.dragStart})),t=(0,n.I0)(),l=(0,n.v9)((function(i){return i.fieldReducer})),r=(0,u.useState)({x:0,y:0}),c=r[0],d=r[1],p=(0,u.useState)(!1),f=p[0],m=p[1],v=(0,u.useState)({x:0,y:0}),_=v[0],g=v[1];(0,u.useEffect)((function(){var i=document.getElementById("playingArea");if(i){var e=i.getBoundingClientRect();g({x:e.x+60,y:e.y+100})}}),[]);var h=c.x,N=c.y;return(0,o.jsxs)("div",(0,a.pi)({className:"playing-area__wrapper",onMouseMove:function(i){return function(i){d({x:i.pageX,y:i.pageY})}(i)},onMouseUp:function(){f&&(t((0,s.yJ)(e)),t((0,s.yX)()),m(!1))},style:f?{cursor:"not-allowed"}:{}},{children:[(0,o.jsxs)("div",(0,a.pi)({className:"playing-area",id:"playingArea"},{children:[(0,o.jsx)("div",(0,a.pi)({style:e?{cursor:"grabbing"}:{},className:"playing-area__"+i,onMouseUp:function(i){i.stopPropagation(),t((0,s.yX)())}},{children:l.cardsList.map((function(n,r){var c=n.cardData,d=e===r;return(0,o.jsx)("div",(0,a.pi)({style:d?{left:h-_.x,top:N-330,zIndex:5,pointerEvents:"none"}:void 0,className:"playing-area__"+i+"__"+(c?"card":"empty-card"),onClick:function(i){return function(i){t((0,s.NC)(i)),t((0,s.wo)(!0)),setTimeout((function(){window.scroll(0,1200)}),100)}(r)},onDragStart:function(i){return function(i,e){void 0===e&&(e=0),m(!0),t((0,s.yX)(e))}(0,r)},onMouseUp:function(i){return function(i,a){void 0===a&&(a=0),i.stopPropagation(),f&&null!==e&&(t((0,s.d2)(a)),t((0,s.wO)(e,l.options.dragTarget))),t((0,s.d2)()),t((0,s.yX)()),m(!1)}(i,r)},draggable:!0},{children:c&&(0,o.jsx)(j,{card:c,index:r,place:"PlayingArea"},void 0)}),r)}))}),void 0),(0,o.jsx)("div",(0,a.pi)({className:"playing-area__"+i+"-shadows"},{children:l.cardsList.map((function(e,t){var n=e.cardData;return(0,o.jsx)("div",(0,a.pi)({className:"playing-area__"+i+"-shadows__card"},{children:n&&(0,o.jsx)("img",{src:n.mainInfo.shadowType,alt:"card shadow",className:"playing-area__"+i+"-shadows__shadow"},void 0)}),t)}))}),void 0)]}),void 0),(0,o.jsx)(x,{},void 0)]}),void 0)};const b=function(){var i=(0,n.I0)(),e=(0,n.v9)((function(i){return i.fieldReducer.options})),t=(0,n.v9)((function(i){return i.fieldReducer.options.showCardSeletion}));return(0,o.jsxs)("div",(0,a.pi)({className:"football-field",onDrop:function(t){return function(t){"football-field__wrapper"===t.target.className&&i((0,s.yJ)(e.dragStart))}(t)},onDragOver:function(i){return function(i){i.preventDefault()}(i)}},{children:[(0,o.jsx)("h1",(0,a.pi)({className:"football-field__title"},{children:"Football Field"}),void 0),(0,o.jsx)(N,{},void 0),(0,o.jsx)("div",(0,a.pi)({style:{height:t?"unset":"0"},className:"football-field__wrapper"},{children:(0,o.jsx)(f,{},void 0)}),void 0)]}),void 0)}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,