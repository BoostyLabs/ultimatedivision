/*! For license information please see 998.a4826bf8396564c6b69e.js.LICENSE.txt */
(self.webpackChunkcryptofotball=self.webpackChunkcryptofotball||[]).push([[998],{4594:(t,a,e)=>{"use strict";e.d(a,{Kn:()=>f,CR:()=>c});var r=e(3286),o=e(2593),i=e(8197),n=e(1843);const s=new(e(711).Yd)("address/5.4.0");function d(t){(0,r.A7)(t,20)||s.throwArgumentError("invalid address","address",t);const a=(t=t.toLowerCase()).substring(2).split(""),e=new Uint8Array(40);for(let t=0;t<40;t++)e[t]=a[t].charCodeAt(0);const o=(0,r.lE)((0,i.w)(e));for(let t=0;t<40;t+=2)o[t>>1]>>4>=8&&(a[t]=a[t].toUpperCase()),(15&o[t>>1])>=8&&(a[t+1]=a[t+1].toUpperCase());return"0x"+a.join("")}const u={};for(let t=0;t<10;t++)u[String(t)]=String(t);for(let t=0;t<26;t++)u[String.fromCharCode(65+t)]=String(10+t);const l=Math.floor((h=9007199254740991,Math.log10?Math.log10(h):Math.log(h)/Math.LN10));var h;function f(t){let a=null;if("string"!=typeof t&&s.throwArgumentError("invalid address","address",t),t.match(/^(0x)?[0-9a-fA-F]{40}$/))"0x"!==t.substring(0,2)&&(t="0x"+t),a=d(t),t.match(/([A-F].*[a-f])|([a-f].*[A-F])/)&&a!==t&&s.throwArgumentError("bad address checksum","address",t);else if(t.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/)){for(t.substring(2,4)!==function(t){let a=(t=(t=t.toUpperCase()).substring(4)+t.substring(0,2)+"00").split("").map((t=>u[t])).join("");for(;a.length>=l;){let t=a.substring(0,l);a=parseInt(t,10)%97+a.substring(t.length)}let e=String(98-parseInt(a,10)%97);for(;e.length<2;)e="0"+e;return e}(t)&&s.throwArgumentError("bad icap checksum","address",t),a=(0,o.g$)(t.substring(4));a.length<40;)a="0"+a;a=d("0x"+a)}else s.throwArgumentError("invalid address","address",t);return a}function c(t){let a=null;try{a=f(t.from)}catch(a){s.throwArgumentError("missing from address","transaction",t)}const e=(0,r.G1)((0,r.lE)(o.O$.from(t.nonce).toHexString()));return f((0,r.p3)((0,i.w)((0,n.c)([a,e])),12))}},8794:(t,a,e)=>{"use strict";e.d(a,{i:()=>r});const r="bignumber/5.4.2"},2593:(t,a,e)=>{"use strict";e.d(a,{Zm:()=>f,O$:()=>m,g$:()=>b});var r=e(3877),o=e.n(r),i=e(3286),n=e(711),s=e(8794),d=o().BN;const u=new n.Yd(s.i),l={},h=9007199254740991;function f(t){return null!=t&&(m.isBigNumber(t)||"number"==typeof t&&t%1==0||"string"==typeof t&&!!t.match(/^-?[0-9]+$/)||(0,i.A7)(t)||"bigint"==typeof t||(0,i._t)(t))}let c=!1;class m{constructor(t,a){u.checkNew(new.target,m),t!==l&&u.throwError("cannot call constructor directly; use BigNumber.from",n.Yd.errors.UNSUPPORTED_OPERATION,{operation:"new (BigNumber)"}),this._hex=a,this._isBigNumber=!0,Object.freeze(this)}fromTwos(t){return y(g(this).fromTwos(t))}toTwos(t){return y(g(this).toTwos(t))}abs(){return"-"===this._hex[0]?m.from(this._hex.substring(1)):this}add(t){return y(g(this).add(g(t)))}sub(t){return y(g(this).sub(g(t)))}div(t){return m.from(t).isZero()&&v("division by zero","div"),y(g(this).div(g(t)))}mul(t){return y(g(this).mul(g(t)))}mod(t){const a=g(t);return a.isNeg()&&v("cannot modulo negative values","mod"),y(g(this).umod(a))}pow(t){const a=g(t);return a.isNeg()&&v("cannot raise to negative values","pow"),y(g(this).pow(a))}and(t){const a=g(t);return(this.isNegative()||a.isNeg())&&v("cannot 'and' negative values","and"),y(g(this).and(a))}or(t){const a=g(t);return(this.isNegative()||a.isNeg())&&v("cannot 'or' negative values","or"),y(g(this).or(a))}xor(t){const a=g(t);return(this.isNegative()||a.isNeg())&&v("cannot 'xor' negative values","xor"),y(g(this).xor(a))}mask(t){return(this.isNegative()||t<0)&&v("cannot mask negative values","mask"),y(g(this).maskn(t))}shl(t){return(this.isNegative()||t<0)&&v("cannot shift negative values","shl"),y(g(this).shln(t))}shr(t){return(this.isNegative()||t<0)&&v("cannot shift negative values","shr"),y(g(this).shrn(t))}eq(t){return g(this).eq(g(t))}lt(t){return g(this).lt(g(t))}lte(t){return g(this).lte(g(t))}gt(t){return g(this).gt(g(t))}gte(t){return g(this).gte(g(t))}isNegative(){return"-"===this._hex[0]}isZero(){return g(this).isZero()}toNumber(){try{return g(this).toNumber()}catch(t){v("overflow","toNumber",this.toString())}return null}toBigInt(){try{return BigInt(this.toString())}catch(t){}return u.throwError("this platform does not support BigInt",n.Yd.errors.UNSUPPORTED_OPERATION,{value:this.toString()})}toString(){return arguments.length>0&&(10===arguments[0]?c||(c=!0,u.warn("BigNumber.toString does not accept any parameters; base-10 is assumed")):16===arguments[0]?u.throwError("BigNumber.toString does not accept any parameters; use bigNumber.toHexString()",n.Yd.errors.UNEXPECTED_ARGUMENT,{}):u.throwError("BigNumber.toString does not accept parameters",n.Yd.errors.UNEXPECTED_ARGUMENT,{})),g(this).toString(10)}toHexString(){return this._hex}toJSON(t){return{type:"BigNumber",hex:this.toHexString()}}static from(t){if(t instanceof m)return t;if("string"==typeof t)return t.match(/^-?0x[0-9a-f]+$/i)?new m(l,p(t)):t.match(/^-?[0-9]+$/)?new m(l,p(new d(t))):u.throwArgumentError("invalid BigNumber string","value",t);if("number"==typeof t)return t%1&&v("underflow","BigNumber.from",t),(t>=h||t<=-h)&&v("overflow","BigNumber.from",t),m.from(String(t));const a=t;if("bigint"==typeof a)return m.from(a.toString());if((0,i._t)(a))return m.from((0,i.Dv)(a));if(a)if(a.toHexString){const t=a.toHexString();if("string"==typeof t)return m.from(t)}else{let t=a._hex;if(null==t&&"BigNumber"===a.type&&(t=a.hex),"string"==typeof t&&((0,i.A7)(t)||"-"===t[0]&&(0,i.A7)(t.substring(1))))return m.from(t)}return u.throwArgumentError("invalid BigNumber value","value",t)}static isBigNumber(t){return!(!t||!t._isBigNumber)}}function p(t){if("string"!=typeof t)return p(t.toString(16));if("-"===t[0])return"-"===(t=t.substring(1))[0]&&u.throwArgumentError("invalid hex","value",t),"0x00"===(t=p(t))?t:"-"+t;if("0x"!==t.substring(0,2)&&(t="0x"+t),"0x"===t)return"0x00";for(t.length%2&&(t="0x0"+t.substring(2));t.length>4&&"0x00"===t.substring(0,4);)t="0x"+t.substring(4);return t}function y(t){return m.from(p(t))}function g(t){const a=m.from(t).toHexString();return"-"===a[0]?new d("-"+a.substring(3),16):new d(a.substring(2),16)}function v(t,a,e){const r={fault:t,operation:a};return null!=e&&(r.value=e),u.throwError(t,n.Yd.errors.NUMERIC_FAULT,r)}function b(t){return new d(t,36).toString(16)}},3877:function(t,a,e){!function(t,a){"use strict";function r(t,a){if(!t)throw new Error(a||"Assertion failed")}function o(t,a){t.super_=a;var e=function(){};e.prototype=a.prototype,t.prototype=new e,t.prototype.constructor=t}function i(t,a,e){if(i.isBN(t))return t;this.negative=0,this.words=null,this.length=0,this.red=null,null!==t&&("le"!==a&&"be"!==a||(e=a,a=10),this._init(t||0,a||10,e||"be"))}var n;"object"==typeof t?t.exports=i:a.BN=i,i.BN=i,i.wordSize=26;try{n="undefined"!=typeof window&&void 0!==window.Buffer?window.Buffer:e(8677).Buffer}catch(t){}function s(t,a){var e=t.charCodeAt(a);return e>=65&&e<=70?e-55:e>=97&&e<=102?e-87:e-48&15}function d(t,a,e){var r=s(t,e);return e-1>=a&&(r|=s(t,e-1)<<4),r}function u(t,a,e,r){for(var o=0,i=Math.min(t.length,e),n=a;n<i;n++){var s=t.charCodeAt(n)-48;o*=r,o+=s>=49?s-49+10:s>=17?s-17+10:s}return o}i.isBN=function(t){return t instanceof i||null!==t&&"object"==typeof t&&t.constructor.wordSize===i.wordSize&&Array.isArray(t.words)},i.max=function(t,a){return t.cmp(a)>0?t:a},i.min=function(t,a){return t.cmp(a)<0?t:a},i.prototype._init=function(t,a,e){if("number"==typeof t)return this._initNumber(t,a,e);if("object"==typeof t)return this._initArray(t,a,e);"hex"===a&&(a=16),r(a===(0|a)&&a>=2&&a<=36);var o=0;"-"===(t=t.toString().replace(/\s+/g,""))[0]&&(o++,this.negative=1),o<t.length&&(16===a?this._parseHex(t,o,e):(this._parseBase(t,a,o),"le"===e&&this._initArray(this.toArray(),a,e)))},i.prototype._initNumber=function(t,a,e){t<0&&(this.negative=1,t=-t),t<67108864?(this.words=[67108863&t],this.length=1):t<4503599627370496?(this.words=[67108863&t,t/67108864&67108863],this.length=2):(r(t<9007199254740992),this.words=[67108863&t,t/67108864&67108863,1],this.length=3),"le"===e&&this._initArray(this.toArray(),a,e)},i.prototype._initArray=function(t,a,e){if(r("number"==typeof t.length),t.length<=0)return this.words=[0],this.length=1,this;this.length=Math.ceil(t.length/3),this.words=new Array(this.length);for(var o=0;o<this.length;o++)this.words[o]=0;var i,n,s=0;if("be"===e)for(o=t.length-1,i=0;o>=0;o-=3)n=t[o]|t[o-1]<<8|t[o-2]<<16,this.words[i]|=n<<s&67108863,this.words[i+1]=n>>>26-s&67108863,(s+=24)>=26&&(s-=26,i++);else if("le"===e)for(o=0,i=0;o<t.length;o+=3)n=t[o]|t[o+1]<<8|t[o+2]<<16,this.words[i]|=n<<s&67108863,this.words[i+1]=n>>>26-s&67108863,(s+=24)>=26&&(s-=26,i++);return this.strip()},i.prototype._parseHex=function(t,a,e){this.length=Math.ceil((t.length-a)/6),this.words=new Array(this.length);for(var r=0;r<this.length;r++)this.words[r]=0;var o,i=0,n=0;if("be"===e)for(r=t.length-1;r>=a;r-=2)o=d(t,a,r)<<i,this.words[n]|=67108863&o,i>=18?(i-=18,n+=1,this.words[n]|=o>>>26):i+=8;else for(r=(t.length-a)%2==0?a+1:a;r<t.length;r+=2)o=d(t,a,r)<<i,this.words[n]|=67108863&o,i>=18?(i-=18,n+=1,this.words[n]|=o>>>26):i+=8;this.strip()},i.prototype._parseBase=function(t,a,e){this.words=[0],this.length=1;for(var r=0,o=1;o<=67108863;o*=a)r++;r--,o=o/a|0;for(var i=t.length-e,n=i%r,s=Math.min(i,i-n)+e,d=0,l=e;l<s;l+=r)d=u(t,l,l+r,a),this.imuln(o),this.words[0]+d<67108864?this.words[0]+=d:this._iaddn(d);if(0!==n){var h=1;for(d=u(t,l,t.length,a),l=0;l<n;l++)h*=a;this.imuln(h),this.words[0]+d<67108864?this.words[0]+=d:this._iaddn(d)}this.strip()},i.prototype.copy=function(t){t.words=new Array(this.length);for(var a=0;a<this.length;a++)t.words[a]=this.words[a];t.length=this.length,t.negative=this.negative,t.red=this.red},i.prototype.clone=function(){var t=new i(null);return this.copy(t),t},i.prototype._expand=function(t){for(;this.length<t;)this.words[this.length++]=0;return this},i.prototype.strip=function(){for(;this.length>1&&0===this.words[this.length-1];)this.length--;return this._normSign()},i.prototype._normSign=function(){return 1===this.length&&0===this.words[0]&&(this.negative=0),this},i.prototype.inspect=function(){return(this.red?"<BN-R: ":"<BN: ")+this.toString(16)+">"};var l=["","0","00","000","0000","00000","000000","0000000","00000000","000000000","0000000000","00000000000","000000000000","0000000000000","00000000000000","000000000000000","0000000000000000","00000000000000000","000000000000000000","0000000000000000000","00000000000000000000","000000000000000000000","0000000000000000000000","00000000000000000000000","000000000000000000000000","0000000000000000000000000"],h=[0,0,25,16,12,11,10,9,8,8,7,7,7,7,6,6,6,6,6,6,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],f=[0,0,33554432,43046721,16777216,48828125,60466176,40353607,16777216,43046721,1e7,19487171,35831808,62748517,7529536,11390625,16777216,24137569,34012224,47045881,64e6,4084101,5153632,6436343,7962624,9765625,11881376,14348907,17210368,20511149,243e5,28629151,33554432,39135393,45435424,52521875,60466176];function c(t,a,e){e.negative=a.negative^t.negative;var r=t.length+a.length|0;e.length=r,r=r-1|0;var o=0|t.words[0],i=0|a.words[0],n=o*i,s=67108863&n,d=n/67108864|0;e.words[0]=s;for(var u=1;u<r;u++){for(var l=d>>>26,h=67108863&d,f=Math.min(u,a.length-1),c=Math.max(0,u-t.length+1);c<=f;c++){var m=u-c|0;l+=(n=(o=0|t.words[m])*(i=0|a.words[c])+h)/67108864|0,h=67108863&n}e.words[u]=0|h,d=0|l}return 0!==d?e.words[u]=0|d:e.length--,e.strip()}i.prototype.toString=function(t,a){var e;if(a=0|a||1,16===(t=t||10)||"hex"===t){e="";for(var o=0,i=0,n=0;n<this.length;n++){var s=this.words[n],d=(16777215&(s<<o|i)).toString(16);e=0!=(i=s>>>24-o&16777215)||n!==this.length-1?l[6-d.length]+d+e:d+e,(o+=2)>=26&&(o-=26,n--)}for(0!==i&&(e=i.toString(16)+e);e.length%a!=0;)e="0"+e;return 0!==this.negative&&(e="-"+e),e}if(t===(0|t)&&t>=2&&t<=36){var u=h[t],c=f[t];e="";var m=this.clone();for(m.negative=0;!m.isZero();){var p=m.modn(c).toString(t);e=(m=m.idivn(c)).isZero()?p+e:l[u-p.length]+p+e}for(this.isZero()&&(e="0"+e);e.length%a!=0;)e="0"+e;return 0!==this.negative&&(e="-"+e),e}r(!1,"Base should be between 2 and 36")},i.prototype.toNumber=function(){var t=this.words[0];return 2===this.length?t+=67108864*this.words[1]:3===this.length&&1===this.words[2]?t+=4503599627370496+67108864*this.words[1]:this.length>2&&r(!1,"Number can only safely store up to 53 bits"),0!==this.negative?-t:t},i.prototype.toJSON=function(){return this.toString(16)},i.prototype.toBuffer=function(t,a){return r(void 0!==n),this.toArrayLike(n,t,a)},i.prototype.toArray=function(t,a){return this.toArrayLike(Array,t,a)},i.prototype.toArrayLike=function(t,a,e){var o=this.byteLength(),i=e||Math.max(1,o);r(o<=i,"byte array longer than desired length"),r(i>0,"Requested array length <= 0"),this.strip();var n,s,d="le"===a,u=new t(i),l=this.clone();if(d){for(s=0;!l.isZero();s++)n=l.andln(255),l.iushrn(8),u[s]=n;for(;s<i;s++)u[s]=0}else{for(s=0;s<i-o;s++)u[s]=0;for(s=0;!l.isZero();s++)n=l.andln(255),l.iushrn(8),u[i-s-1]=n}return u},Math.clz32?i.prototype._countBits=function(t){return 32-Math.clz32(t)}:i.prototype._countBits=function(t){var a=t,e=0;return a>=4096&&(e+=13,a>>>=13),a>=64&&(e+=7,a>>>=7),a>=8&&(e+=4,a>>>=4),a>=2&&(e+=2,a>>>=2),e+a},i.prototype._zeroBits=function(t){if(0===t)return 26;var a=t,e=0;return 0==(8191&a)&&(e+=13,a>>>=13),0==(127&a)&&(e+=7,a>>>=7),0==(15&a)&&(e+=4,a>>>=4),0==(3&a)&&(e+=2,a>>>=2),0==(1&a)&&e++,e},i.prototype.bitLength=function(){var t=this.words[this.length-1],a=this._countBits(t);return 26*(this.length-1)+a},i.prototype.zeroBits=function(){if(this.isZero())return 0;for(var t=0,a=0;a<this.length;a++){var e=this._zeroBits(this.words[a]);if(t+=e,26!==e)break}return t},i.prototype.byteLength=function(){return Math.ceil(this.bitLength()/8)},i.prototype.toTwos=function(t){return 0!==this.negative?this.abs().inotn(t).iaddn(1):this.clone()},i.prototype.fromTwos=function(t){return this.testn(t-1)?this.notn(t).iaddn(1).ineg():this.clone()},i.prototype.isNeg=function(){return 0!==this.negative},i.prototype.neg=function(){return this.clone().ineg()},i.prototype.ineg=function(){return this.isZero()||(this.negative^=1),this},i.prototype.iuor=function(t){for(;this.length<t.length;)this.words[this.length++]=0;for(var a=0;a<t.length;a++)this.words[a]=this.words[a]|t.words[a];return this.strip()},i.prototype.ior=function(t){return r(0==(this.negative|t.negative)),this.iuor(t)},i.prototype.or=function(t){return this.length>t.length?this.clone().ior(t):t.clone().ior(this)},i.prototype.uor=function(t){return this.length>t.length?this.clone().iuor(t):t.clone().iuor(this)},i.prototype.iuand=function(t){var a;a=this.length>t.length?t:this;for(var e=0;e<a.length;e++)this.words[e]=this.words[e]&t.words[e];return this.length=a.length,this.strip()},i.prototype.iand=function(t){return r(0==(this.negative|t.negative)),this.iuand(t)},i.prototype.and=function(t){return this.length>t.length?this.clone().iand(t):t.clone().iand(this)},i.prototype.uand=function(t){return this.length>t.length?this.clone().iuand(t):t.clone().iuand(this)},i.prototype.iuxor=function(t){var a,e;this.length>t.length?(a=this,e=t):(a=t,e=this);for(var r=0;r<e.length;r++)this.words[r]=a.words[r]^e.words[r];if(this!==a)for(;r<a.length;r++)this.words[r]=a.words[r];return this.length=a.length,this.strip()},i.prototype.ixor=function(t){return r(0==(this.negative|t.negative)),this.iuxor(t)},i.prototype.xor=function(t){return this.length>t.length?this.clone().ixor(t):t.clone().ixor(this)},i.prototype.uxor=function(t){return this.length>t.length?this.clone().iuxor(t):t.clone().iuxor(this)},i.prototype.inotn=function(t){r("number"==typeof t&&t>=0);var a=0|Math.ceil(t/26),e=t%26;this._expand(a),e>0&&a--;for(var o=0;o<a;o++)this.words[o]=67108863&~this.words[o];return e>0&&(this.words[o]=~this.words[o]&67108863>>26-e),this.strip()},i.prototype.notn=function(t){return this.clone().inotn(t)},i.prototype.setn=function(t,a){r("number"==typeof t&&t>=0);var e=t/26|0,o=t%26;return this._expand(e+1),this.words[e]=a?this.words[e]|1<<o:this.words[e]&~(1<<o),this.strip()},i.prototype.iadd=function(t){var a,e,r;if(0!==this.negative&&0===t.negative)return this.negative=0,a=this.isub(t),this.negative^=1,this._normSign();if(0===this.negative&&0!==t.negative)return t.negative=0,a=this.isub(t),t.negative=1,a._normSign();this.length>t.length?(e=this,r=t):(e=t,r=this);for(var o=0,i=0;i<r.length;i++)a=(0|e.words[i])+(0|r.words[i])+o,this.words[i]=67108863&a,o=a>>>26;for(;0!==o&&i<e.length;i++)a=(0|e.words[i])+o,this.words[i]=67108863&a,o=a>>>26;if(this.length=e.length,0!==o)this.words[this.length]=o,this.length++;else if(e!==this)for(;i<e.length;i++)this.words[i]=e.words[i];return this},i.prototype.add=function(t){var a;return 0!==t.negative&&0===this.negative?(t.negative=0,a=this.sub(t),t.negative^=1,a):0===t.negative&&0!==this.negative?(this.negative=0,a=t.sub(this),this.negative=1,a):this.length>t.length?this.clone().iadd(t):t.clone().iadd(this)},i.prototype.isub=function(t){if(0!==t.negative){t.negative=0;var a=this.iadd(t);return t.negative=1,a._normSign()}if(0!==this.negative)return this.negative=0,this.iadd(t),this.negative=1,this._normSign();var e,r,o=this.cmp(t);if(0===o)return this.negative=0,this.length=1,this.words[0]=0,this;o>0?(e=this,r=t):(e=t,r=this);for(var i=0,n=0;n<r.length;n++)i=(a=(0|e.words[n])-(0|r.words[n])+i)>>26,this.words[n]=67108863&a;for(;0!==i&&n<e.length;n++)i=(a=(0|e.words[n])+i)>>26,this.words[n]=67108863&a;if(0===i&&n<e.length&&e!==this)for(;n<e.length;n++)this.words[n]=e.words[n];return this.length=Math.max(this.length,n),e!==this&&(this.negative=1),this.strip()},i.prototype.sub=function(t){return this.clone().isub(t)};var m=function(t,a,e){var r,o,i,n=t.words,s=a.words,d=e.words,u=0,l=0|n[0],h=8191&l,f=l>>>13,c=0|n[1],m=8191&c,p=c>>>13,y=0|n[2],g=8191&y,v=y>>>13,b=0|n[3],A=8191&b,w=b>>>13,M=0|n[4],_=8191&M,k=M>>>13,B=0|n[5],C=8191&B,E=B>>>13,x=0|n[6],N=8191&x,F=x>>>13,S=0|n[7],P=8191&S,O=S>>>13,R=0|n[8],I=8191&R,T=R>>>13,q=0|n[9],G=8191&q,L=q>>>13,z=0|s[0],D=8191&z,U=z>>>13,j=0|s[1],$=8191&j,Y=j>>>13,H=0|s[2],W=8191&H,V=H>>>13,Z=0|s[3],K=8191&Z,J=Z>>>13,X=0|s[4],Q=8191&X,tt=X>>>13,at=0|s[5],et=8191&at,rt=at>>>13,ot=0|s[6],it=8191&ot,nt=ot>>>13,st=0|s[7],dt=8191&st,ut=st>>>13,lt=0|s[8],ht=8191&lt,ft=lt>>>13,ct=0|s[9],mt=8191&ct,pt=ct>>>13;e.negative=t.negative^a.negative,e.length=19;var yt=(u+(r=Math.imul(h,D))|0)+((8191&(o=(o=Math.imul(h,U))+Math.imul(f,D)|0))<<13)|0;u=((i=Math.imul(f,U))+(o>>>13)|0)+(yt>>>26)|0,yt&=67108863,r=Math.imul(m,D),o=(o=Math.imul(m,U))+Math.imul(p,D)|0,i=Math.imul(p,U);var gt=(u+(r=r+Math.imul(h,$)|0)|0)+((8191&(o=(o=o+Math.imul(h,Y)|0)+Math.imul(f,$)|0))<<13)|0;u=((i=i+Math.imul(f,Y)|0)+(o>>>13)|0)+(gt>>>26)|0,gt&=67108863,r=Math.imul(g,D),o=(o=Math.imul(g,U))+Math.imul(v,D)|0,i=Math.imul(v,U),r=r+Math.imul(m,$)|0,o=(o=o+Math.imul(m,Y)|0)+Math.imul(p,$)|0,i=i+Math.imul(p,Y)|0;var vt=(u+(r=r+Math.imul(h,W)|0)|0)+((8191&(o=(o=o+Math.imul(h,V)|0)+Math.imul(f,W)|0))<<13)|0;u=((i=i+Math.imul(f,V)|0)+(o>>>13)|0)+(vt>>>26)|0,vt&=67108863,r=Math.imul(A,D),o=(o=Math.imul(A,U))+Math.imul(w,D)|0,i=Math.imul(w,U),r=r+Math.imul(g,$)|0,o=(o=o+Math.imul(g,Y)|0)+Math.imul(v,$)|0,i=i+Math.imul(v,Y)|0,r=r+Math.imul(m,W)|0,o=(o=o+Math.imul(m,V)|0)+Math.imul(p,W)|0,i=i+Math.imul(p,V)|0;var bt=(u+(r=r+Math.imul(h,K)|0)|0)+((8191&(o=(o=o+Math.imul(h,J)|0)+Math.imul(f,K)|0))<<13)|0;u=((i=i+Math.imul(f,J)|0)+(o>>>13)|0)+(bt>>>26)|0,bt&=67108863,r=Math.imul(_,D),o=(o=Math.imul(_,U))+Math.imul(k,D)|0,i=Math.imul(k,U),r=r+Math.imul(A,$)|0,o=(o=o+Math.imul(A,Y)|0)+Math.imul(w,$)|0,i=i+Math.imul(w,Y)|0,r=r+Math.imul(g,W)|0,o=(o=o+Math.imul(g,V)|0)+Math.imul(v,W)|0,i=i+Math.imul(v,V)|0,r=r+Math.imul(m,K)|0,o=(o=o+Math.imul(m,J)|0)+Math.imul(p,K)|0,i=i+Math.imul(p,J)|0;var At=(u+(r=r+Math.imul(h,Q)|0)|0)+((8191&(o=(o=o+Math.imul(h,tt)|0)+Math.imul(f,Q)|0))<<13)|0;u=((i=i+Math.imul(f,tt)|0)+(o>>>13)|0)+(At>>>26)|0,At&=67108863,r=Math.imul(C,D),o=(o=Math.imul(C,U))+Math.imul(E,D)|0,i=Math.imul(E,U),r=r+Math.imul(_,$)|0,o=(o=o+Math.imul(_,Y)|0)+Math.imul(k,$)|0,i=i+Math.imul(k,Y)|0,r=r+Math.imul(A,W)|0,o=(o=o+Math.imul(A,V)|0)+Math.imul(w,W)|0,i=i+Math.imul(w,V)|0,r=r+Math.imul(g,K)|0,o=(o=o+Math.imul(g,J)|0)+Math.imul(v,K)|0,i=i+Math.imul(v,J)|0,r=r+Math.imul(m,Q)|0,o=(o=o+Math.imul(m,tt)|0)+Math.imul(p,Q)|0,i=i+Math.imul(p,tt)|0;var wt=(u+(r=r+Math.imul(h,et)|0)|0)+((8191&(o=(o=o+Math.imul(h,rt)|0)+Math.imul(f,et)|0))<<13)|0;u=((i=i+Math.imul(f,rt)|0)+(o>>>13)|0)+(wt>>>26)|0,wt&=67108863,r=Math.imul(N,D),o=(o=Math.imul(N,U))+Math.imul(F,D)|0,i=Math.imul(F,U),r=r+Math.imul(C,$)|0,o=(o=o+Math.imul(C,Y)|0)+Math.imul(E,$)|0,i=i+Math.imul(E,Y)|0,r=r+Math.imul(_,W)|0,o=(o=o+Math.imul(_,V)|0)+Math.imul(k,W)|0,i=i+Math.imul(k,V)|0,r=r+Math.imul(A,K)|0,o=(o=o+Math.imul(A,J)|0)+Math.imul(w,K)|0,i=i+Math.imul(w,J)|0,r=r+Math.imul(g,Q)|0,o=(o=o+Math.imul(g,tt)|0)+Math.imul(v,Q)|0,i=i+Math.imul(v,tt)|0,r=r+Math.imul(m,et)|0,o=(o=o+Math.imul(m,rt)|0)+Math.imul(p,et)|0,i=i+Math.imul(p,rt)|0;var Mt=(u+(r=r+Math.imul(h,it)|0)|0)+((8191&(o=(o=o+Math.imul(h,nt)|0)+Math.imul(f,it)|0))<<13)|0;u=((i=i+Math.imul(f,nt)|0)+(o>>>13)|0)+(Mt>>>26)|0,Mt&=67108863,r=Math.imul(P,D),o=(o=Math.imul(P,U))+Math.imul(O,D)|0,i=Math.imul(O,U),r=r+Math.imul(N,$)|0,o=(o=o+Math.imul(N,Y)|0)+Math.imul(F,$)|0,i=i+Math.imul(F,Y)|0,r=r+Math.imul(C,W)|0,o=(o=o+Math.imul(C,V)|0)+Math.imul(E,W)|0,i=i+Math.imul(E,V)|0,r=r+Math.imul(_,K)|0,o=(o=o+Math.imul(_,J)|0)+Math.imul(k,K)|0,i=i+Math.imul(k,J)|0,r=r+Math.imul(A,Q)|0,o=(o=o+Math.imul(A,tt)|0)+Math.imul(w,Q)|0,i=i+Math.imul(w,tt)|0,r=r+Math.imul(g,et)|0,o=(o=o+Math.imul(g,rt)|0)+Math.imul(v,et)|0,i=i+Math.imul(v,rt)|0,r=r+Math.imul(m,it)|0,o=(o=o+Math.imul(m,nt)|0)+Math.imul(p,it)|0,i=i+Math.imul(p,nt)|0;var _t=(u+(r=r+Math.imul(h,dt)|0)|0)+((8191&(o=(o=o+Math.imul(h,ut)|0)+Math.imul(f,dt)|0))<<13)|0;u=((i=i+Math.imul(f,ut)|0)+(o>>>13)|0)+(_t>>>26)|0,_t&=67108863,r=Math.imul(I,D),o=(o=Math.imul(I,U))+Math.imul(T,D)|0,i=Math.imul(T,U),r=r+Math.imul(P,$)|0,o=(o=o+Math.imul(P,Y)|0)+Math.imul(O,$)|0,i=i+Math.imul(O,Y)|0,r=r+Math.imul(N,W)|0,o=(o=o+Math.imul(N,V)|0)+Math.imul(F,W)|0,i=i+Math.imul(F,V)|0,r=r+Math.imul(C,K)|0,o=(o=o+Math.imul(C,J)|0)+Math.imul(E,K)|0,i=i+Math.imul(E,J)|0,r=r+Math.imul(_,Q)|0,o=(o=o+Math.imul(_,tt)|0)+Math.imul(k,Q)|0,i=i+Math.imul(k,tt)|0,r=r+Math.imul(A,et)|0,o=(o=o+Math.imul(A,rt)|0)+Math.imul(w,et)|0,i=i+Math.imul(w,rt)|0,r=r+Math.imul(g,it)|0,o=(o=o+Math.imul(g,nt)|0)+Math.imul(v,it)|0,i=i+Math.imul(v,nt)|0,r=r+Math.imul(m,dt)|0,o=(o=o+Math.imul(m,ut)|0)+Math.imul(p,dt)|0,i=i+Math.imul(p,ut)|0;var kt=(u+(r=r+Math.imul(h,ht)|0)|0)+((8191&(o=(o=o+Math.imul(h,ft)|0)+Math.imul(f,ht)|0))<<13)|0;u=((i=i+Math.imul(f,ft)|0)+(o>>>13)|0)+(kt>>>26)|0,kt&=67108863,r=Math.imul(G,D),o=(o=Math.imul(G,U))+Math.imul(L,D)|0,i=Math.imul(L,U),r=r+Math.imul(I,$)|0,o=(o=o+Math.imul(I,Y)|0)+Math.imul(T,$)|0,i=i+Math.imul(T,Y)|0,r=r+Math.imul(P,W)|0,o=(o=o+Math.imul(P,V)|0)+Math.imul(O,W)|0,i=i+Math.imul(O,V)|0,r=r+Math.imul(N,K)|0,o=(o=o+Math.imul(N,J)|0)+Math.imul(F,K)|0,i=i+Math.imul(F,J)|0,r=r+Math.imul(C,Q)|0,o=(o=o+Math.imul(C,tt)|0)+Math.imul(E,Q)|0,i=i+Math.imul(E,tt)|0,r=r+Math.imul(_,et)|0,o=(o=o+Math.imul(_,rt)|0)+Math.imul(k,et)|0,i=i+Math.imul(k,rt)|0,r=r+Math.imul(A,it)|0,o=(o=o+Math.imul(A,nt)|0)+Math.imul(w,it)|0,i=i+Math.imul(w,nt)|0,r=r+Math.imul(g,dt)|0,o=(o=o+Math.imul(g,ut)|0)+Math.imul(v,dt)|0,i=i+Math.imul(v,ut)|0,r=r+Math.imul(m,ht)|0,o=(o=o+Math.imul(m,ft)|0)+Math.imul(p,ht)|0,i=i+Math.imul(p,ft)|0;var Bt=(u+(r=r+Math.imul(h,mt)|0)|0)+((8191&(o=(o=o+Math.imul(h,pt)|0)+Math.imul(f,mt)|0))<<13)|0;u=((i=i+Math.imul(f,pt)|0)+(o>>>13)|0)+(Bt>>>26)|0,Bt&=67108863,r=Math.imul(G,$),o=(o=Math.imul(G,Y))+Math.imul(L,$)|0,i=Math.imul(L,Y),r=r+Math.imul(I,W)|0,o=(o=o+Math.imul(I,V)|0)+Math.imul(T,W)|0,i=i+Math.imul(T,V)|0,r=r+Math.imul(P,K)|0,o=(o=o+Math.imul(P,J)|0)+Math.imul(O,K)|0,i=i+Math.imul(O,J)|0,r=r+Math.imul(N,Q)|0,o=(o=o+Math.imul(N,tt)|0)+Math.imul(F,Q)|0,i=i+Math.imul(F,tt)|0,r=r+Math.imul(C,et)|0,o=(o=o+Math.imul(C,rt)|0)+Math.imul(E,et)|0,i=i+Math.imul(E,rt)|0,r=r+Math.imul(_,it)|0,o=(o=o+Math.imul(_,nt)|0)+Math.imul(k,it)|0,i=i+Math.imul(k,nt)|0,r=r+Math.imul(A,dt)|0,o=(o=o+Math.imul(A,ut)|0)+Math.imul(w,dt)|0,i=i+Math.imul(w,ut)|0,r=r+Math.imul(g,ht)|0,o=(o=o+Math.imul(g,ft)|0)+Math.imul(v,ht)|0,i=i+Math.imul(v,ft)|0;var Ct=(u+(r=r+Math.imul(m,mt)|0)|0)+((8191&(o=(o=o+Math.imul(m,pt)|0)+Math.imul(p,mt)|0))<<13)|0;u=((i=i+Math.imul(p,pt)|0)+(o>>>13)|0)+(Ct>>>26)|0,Ct&=67108863,r=Math.imul(G,W),o=(o=Math.imul(G,V))+Math.imul(L,W)|0,i=Math.imul(L,V),r=r+Math.imul(I,K)|0,o=(o=o+Math.imul(I,J)|0)+Math.imul(T,K)|0,i=i+Math.imul(T,J)|0,r=r+Math.imul(P,Q)|0,o=(o=o+Math.imul(P,tt)|0)+Math.imul(O,Q)|0,i=i+Math.imul(O,tt)|0,r=r+Math.imul(N,et)|0,o=(o=o+Math.imul(N,rt)|0)+Math.imul(F,et)|0,i=i+Math.imul(F,rt)|0,r=r+Math.imul(C,it)|0,o=(o=o+Math.imul(C,nt)|0)+Math.imul(E,it)|0,i=i+Math.imul(E,nt)|0,r=r+Math.imul(_,dt)|0,o=(o=o+Math.imul(_,ut)|0)+Math.imul(k,dt)|0,i=i+Math.imul(k,ut)|0,r=r+Math.imul(A,ht)|0,o=(o=o+Math.imul(A,ft)|0)+Math.imul(w,ht)|0,i=i+Math.imul(w,ft)|0;var Et=(u+(r=r+Math.imul(g,mt)|0)|0)+((8191&(o=(o=o+Math.imul(g,pt)|0)+Math.imul(v,mt)|0))<<13)|0;u=((i=i+Math.imul(v,pt)|0)+(o>>>13)|0)+(Et>>>26)|0,Et&=67108863,r=Math.imul(G,K),o=(o=Math.imul(G,J))+Math.imul(L,K)|0,i=Math.imul(L,J),r=r+Math.imul(I,Q)|0,o=(o=o+Math.imul(I,tt)|0)+Math.imul(T,Q)|0,i=i+Math.imul(T,tt)|0,r=r+Math.imul(P,et)|0,o=(o=o+Math.imul(P,rt)|0)+Math.imul(O,et)|0,i=i+Math.imul(O,rt)|0,r=r+Math.imul(N,it)|0,o=(o=o+Math.imul(N,nt)|0)+Math.imul(F,it)|0,i=i+Math.imul(F,nt)|0,r=r+Math.imul(C,dt)|0,o=(o=o+Math.imul(C,ut)|0)+Math.imul(E,dt)|0,i=i+Math.imul(E,ut)|0,r=r+Math.imul(_,ht)|0,o=(o=o+Math.imul(_,ft)|0)+Math.imul(k,ht)|0,i=i+Math.imul(k,ft)|0;var xt=(u+(r=r+Math.imul(A,mt)|0)|0)+((8191&(o=(o=o+Math.imul(A,pt)|0)+Math.imul(w,mt)|0))<<13)|0;u=((i=i+Math.imul(w,pt)|0)+(o>>>13)|0)+(xt>>>26)|0,xt&=67108863,r=Math.imul(G,Q),o=(o=Math.imul(G,tt))+Math.imul(L,Q)|0,i=Math.imul(L,tt),r=r+Math.imul(I,et)|0,o=(o=o+Math.imul(I,rt)|0)+Math.imul(T,et)|0,i=i+Math.imul(T,rt)|0,r=r+Math.imul(P,it)|0,o=(o=o+Math.imul(P,nt)|0)+Math.imul(O,it)|0,i=i+Math.imul(O,nt)|0,r=r+Math.imul(N,dt)|0,o=(o=o+Math.imul(N,ut)|0)+Math.imul(F,dt)|0,i=i+Math.imul(F,ut)|0,r=r+Math.imul(C,ht)|0,o=(o=o+Math.imul(C,ft)|0)+Math.imul(E,ht)|0,i=i+Math.imul(E,ft)|0;var Nt=(u+(r=r+Math.imul(_,mt)|0)|0)+((8191&(o=(o=o+Math.imul(_,pt)|0)+Math.imul(k,mt)|0))<<13)|0;u=((i=i+Math.imul(k,pt)|0)+(o>>>13)|0)+(Nt>>>26)|0,Nt&=67108863,r=Math.imul(G,et),o=(o=Math.imul(G,rt))+Math.imul(L,et)|0,i=Math.imul(L,rt),r=r+Math.imul(I,it)|0,o=(o=o+Math.imul(I,nt)|0)+Math.imul(T,it)|0,i=i+Math.imul(T,nt)|0,r=r+Math.imul(P,dt)|0,o=(o=o+Math.imul(P,ut)|0)+Math.imul(O,dt)|0,i=i+Math.imul(O,ut)|0,r=r+Math.imul(N,ht)|0,o=(o=o+Math.imul(N,ft)|0)+Math.imul(F,ht)|0,i=i+Math.imul(F,ft)|0;var Ft=(u+(r=r+Math.imul(C,mt)|0)|0)+((8191&(o=(o=o+Math.imul(C,pt)|0)+Math.imul(E,mt)|0))<<13)|0;u=((i=i+Math.imul(E,pt)|0)+(o>>>13)|0)+(Ft>>>26)|0,Ft&=67108863,r=Math.imul(G,it),o=(o=Math.imul(G,nt))+Math.imul(L,it)|0,i=Math.imul(L,nt),r=r+Math.imul(I,dt)|0,o=(o=o+Math.imul(I,ut)|0)+Math.imul(T,dt)|0,i=i+Math.imul(T,ut)|0,r=r+Math.imul(P,ht)|0,o=(o=o+Math.imul(P,ft)|0)+Math.imul(O,ht)|0,i=i+Math.imul(O,ft)|0;var St=(u+(r=r+Math.imul(N,mt)|0)|0)+((8191&(o=(o=o+Math.imul(N,pt)|0)+Math.imul(F,mt)|0))<<13)|0;u=((i=i+Math.imul(F,pt)|0)+(o>>>13)|0)+(St>>>26)|0,St&=67108863,r=Math.imul(G,dt),o=(o=Math.imul(G,ut))+Math.imul(L,dt)|0,i=Math.imul(L,ut),r=r+Math.imul(I,ht)|0,o=(o=o+Math.imul(I,ft)|0)+Math.imul(T,ht)|0,i=i+Math.imul(T,ft)|0;var Pt=(u+(r=r+Math.imul(P,mt)|0)|0)+((8191&(o=(o=o+Math.imul(P,pt)|0)+Math.imul(O,mt)|0))<<13)|0;u=((i=i+Math.imul(O,pt)|0)+(o>>>13)|0)+(Pt>>>26)|0,Pt&=67108863,r=Math.imul(G,ht),o=(o=Math.imul(G,ft))+Math.imul(L,ht)|0,i=Math.imul(L,ft);var Ot=(u+(r=r+Math.imul(I,mt)|0)|0)+((8191&(o=(o=o+Math.imul(I,pt)|0)+Math.imul(T,mt)|0))<<13)|0;u=((i=i+Math.imul(T,pt)|0)+(o>>>13)|0)+(Ot>>>26)|0,Ot&=67108863;var Rt=(u+(r=Math.imul(G,mt))|0)+((8191&(o=(o=Math.imul(G,pt))+Math.imul(L,mt)|0))<<13)|0;return u=((i=Math.imul(L,pt))+(o>>>13)|0)+(Rt>>>26)|0,Rt&=67108863,d[0]=yt,d[1]=gt,d[2]=vt,d[3]=bt,d[4]=At,d[5]=wt,d[6]=Mt,d[7]=_t,d[8]=kt,d[9]=Bt,d[10]=Ct,d[11]=Et,d[12]=xt,d[13]=Nt,d[14]=Ft,d[15]=St,d[16]=Pt,d[17]=Ot,d[18]=Rt,0!==u&&(d[19]=u,e.length++),e};function p(t,a,e){return(new y).mulp(t,a,e)}function y(t,a){this.x=t,this.y=a}Math.imul||(m=c),i.prototype.mulTo=function(t,a){var e,r=this.length+t.length;return e=10===this.length&&10===t.length?m(this,t,a):r<63?c(this,t,a):r<1024?function(t,a,e){e.negative=a.negative^t.negative,e.length=t.length+a.length;for(var r=0,o=0,i=0;i<e.length-1;i++){var n=o;o=0;for(var s=67108863&r,d=Math.min(i,a.length-1),u=Math.max(0,i-t.length+1);u<=d;u++){var l=i-u,h=(0|t.words[l])*(0|a.words[u]),f=67108863&h;s=67108863&(f=f+s|0),o+=(n=(n=n+(h/67108864|0)|0)+(f>>>26)|0)>>>26,n&=67108863}e.words[i]=s,r=n,n=o}return 0!==r?e.words[i]=r:e.length--,e.strip()}(this,t,a):p(this,t,a),e},y.prototype.makeRBT=function(t){for(var a=new Array(t),e=i.prototype._countBits(t)-1,r=0;r<t;r++)a[r]=this.revBin(r,e,t);return a},y.prototype.revBin=function(t,a,e){if(0===t||t===e-1)return t;for(var r=0,o=0;o<a;o++)r|=(1&t)<<a-o-1,t>>=1;return r},y.prototype.permute=function(t,a,e,r,o,i){for(var n=0;n<i;n++)r[n]=a[t[n]],o[n]=e[t[n]]},y.prototype.transform=function(t,a,e,r,o,i){this.permute(i,t,a,e,r,o);for(var n=1;n<o;n<<=1)for(var s=n<<1,d=Math.cos(2*Math.PI/s),u=Math.sin(2*Math.PI/s),l=0;l<o;l+=s)for(var h=d,f=u,c=0;c<n;c++){var m=e[l+c],p=r[l+c],y=e[l+c+n],g=r[l+c+n],v=h*y-f*g;g=h*g+f*y,y=v,e[l+c]=m+y,r[l+c]=p+g,e[l+c+n]=m-y,r[l+c+n]=p-g,c!==s&&(v=d*h-u*f,f=d*f+u*h,h=v)}},y.prototype.guessLen13b=function(t,a){var e=1|Math.max(a,t),r=1&e,o=0;for(e=e/2|0;e;e>>>=1)o++;return 1<<o+1+r},y.prototype.conjugate=function(t,a,e){if(!(e<=1))for(var r=0;r<e/2;r++){var o=t[r];t[r]=t[e-r-1],t[e-r-1]=o,o=a[r],a[r]=-a[e-r-1],a[e-r-1]=-o}},y.prototype.normalize13b=function(t,a){for(var e=0,r=0;r<a/2;r++){var o=8192*Math.round(t[2*r+1]/a)+Math.round(t[2*r]/a)+e;t[r]=67108863&o,e=o<67108864?0:o/67108864|0}return t},y.prototype.convert13b=function(t,a,e,o){for(var i=0,n=0;n<a;n++)i+=0|t[n],e[2*n]=8191&i,i>>>=13,e[2*n+1]=8191&i,i>>>=13;for(n=2*a;n<o;++n)e[n]=0;r(0===i),r(0==(-8192&i))},y.prototype.stub=function(t){for(var a=new Array(t),e=0;e<t;e++)a[e]=0;return a},y.prototype.mulp=function(t,a,e){var r=2*this.guessLen13b(t.length,a.length),o=this.makeRBT(r),i=this.stub(r),n=new Array(r),s=new Array(r),d=new Array(r),u=new Array(r),l=new Array(r),h=new Array(r),f=e.words;f.length=r,this.convert13b(t.words,t.length,n,r),this.convert13b(a.words,a.length,u,r),this.transform(n,i,s,d,r,o),this.transform(u,i,l,h,r,o);for(var c=0;c<r;c++){var m=s[c]*l[c]-d[c]*h[c];d[c]=s[c]*h[c]+d[c]*l[c],s[c]=m}return this.conjugate(s,d,r),this.transform(s,d,f,i,r,o),this.conjugate(f,i,r),this.normalize13b(f,r),e.negative=t.negative^a.negative,e.length=t.length+a.length,e.strip()},i.prototype.mul=function(t){var a=new i(null);return a.words=new Array(this.length+t.length),this.mulTo(t,a)},i.prototype.mulf=function(t){var a=new i(null);return a.words=new Array(this.length+t.length),p(this,t,a)},i.prototype.imul=function(t){return this.clone().mulTo(t,this)},i.prototype.imuln=function(t){r("number"==typeof t),r(t<67108864);for(var a=0,e=0;e<this.length;e++){var o=(0|this.words[e])*t,i=(67108863&o)+(67108863&a);a>>=26,a+=o/67108864|0,a+=i>>>26,this.words[e]=67108863&i}return 0!==a&&(this.words[e]=a,this.length++),this},i.prototype.muln=function(t){return this.clone().imuln(t)},i.prototype.sqr=function(){return this.mul(this)},i.prototype.isqr=function(){return this.imul(this.clone())},i.prototype.pow=function(t){var a=function(t){for(var a=new Array(t.bitLength()),e=0;e<a.length;e++){var r=e/26|0,o=e%26;a[e]=(t.words[r]&1<<o)>>>o}return a}(t);if(0===a.length)return new i(1);for(var e=this,r=0;r<a.length&&0===a[r];r++,e=e.sqr());if(++r<a.length)for(var o=e.sqr();r<a.length;r++,o=o.sqr())0!==a[r]&&(e=e.mul(o));return e},i.prototype.iushln=function(t){r("number"==typeof t&&t>=0);var a,e=t%26,o=(t-e)/26,i=67108863>>>26-e<<26-e;if(0!==e){var n=0;for(a=0;a<this.length;a++){var s=this.words[a]&i,d=(0|this.words[a])-s<<e;this.words[a]=d|n,n=s>>>26-e}n&&(this.words[a]=n,this.length++)}if(0!==o){for(a=this.length-1;a>=0;a--)this.words[a+o]=this.words[a];for(a=0;a<o;a++)this.words[a]=0;this.length+=o}return this.strip()},i.prototype.ishln=function(t){return r(0===this.negative),this.iushln(t)},i.prototype.iushrn=function(t,a,e){var o;r("number"==typeof t&&t>=0),o=a?(a-a%26)/26:0;var i=t%26,n=Math.min((t-i)/26,this.length),s=67108863^67108863>>>i<<i,d=e;if(o-=n,o=Math.max(0,o),d){for(var u=0;u<n;u++)d.words[u]=this.words[u];d.length=n}if(0===n);else if(this.length>n)for(this.length-=n,u=0;u<this.length;u++)this.words[u]=this.words[u+n];else this.words[0]=0,this.length=1;var l=0;for(u=this.length-1;u>=0&&(0!==l||u>=o);u--){var h=0|this.words[u];this.words[u]=l<<26-i|h>>>i,l=h&s}return d&&0!==l&&(d.words[d.length++]=l),0===this.length&&(this.words[0]=0,this.length=1),this.strip()},i.prototype.ishrn=function(t,a,e){return r(0===this.negative),this.iushrn(t,a,e)},i.prototype.shln=function(t){return this.clone().ishln(t)},i.prototype.ushln=function(t){return this.clone().iushln(t)},i.prototype.shrn=function(t){return this.clone().ishrn(t)},i.prototype.ushrn=function(t){return this.clone().iushrn(t)},i.prototype.testn=function(t){r("number"==typeof t&&t>=0);var a=t%26,e=(t-a)/26,o=1<<a;return!(this.length<=e||!(this.words[e]&o))},i.prototype.imaskn=function(t){r("number"==typeof t&&t>=0);var a=t%26,e=(t-a)/26;if(r(0===this.negative,"imaskn works only with positive numbers"),this.length<=e)return this;if(0!==a&&e++,this.length=Math.min(e,this.length),0!==a){var o=67108863^67108863>>>a<<a;this.words[this.length-1]&=o}return this.strip()},i.prototype.maskn=function(t){return this.clone().imaskn(t)},i.prototype.iaddn=function(t){return r("number"==typeof t),r(t<67108864),t<0?this.isubn(-t):0!==this.negative?1===this.length&&(0|this.words[0])<t?(this.words[0]=t-(0|this.words[0]),this.negative=0,this):(this.negative=0,this.isubn(t),this.negative=1,this):this._iaddn(t)},i.prototype._iaddn=function(t){this.words[0]+=t;for(var a=0;a<this.length&&this.words[a]>=67108864;a++)this.words[a]-=67108864,a===this.length-1?this.words[a+1]=1:this.words[a+1]++;return this.length=Math.max(this.length,a+1),this},i.prototype.isubn=function(t){if(r("number"==typeof t),r(t<67108864),t<0)return this.iaddn(-t);if(0!==this.negative)return this.negative=0,this.iaddn(t),this.negative=1,this;if(this.words[0]-=t,1===this.length&&this.words[0]<0)this.words[0]=-this.words[0],this.negative=1;else for(var a=0;a<this.length&&this.words[a]<0;a++)this.words[a]+=67108864,this.words[a+1]-=1;return this.strip()},i.prototype.addn=function(t){return this.clone().iaddn(t)},i.prototype.subn=function(t){return this.clone().isubn(t)},i.prototype.iabs=function(){return this.negative=0,this},i.prototype.abs=function(){return this.clone().iabs()},i.prototype._ishlnsubmul=function(t,a,e){var o,i,n=t.length+e;this._expand(n);var s=0;for(o=0;o<t.length;o++){i=(0|this.words[o+e])+s;var d=(0|t.words[o])*a;s=((i-=67108863&d)>>26)-(d/67108864|0),this.words[o+e]=67108863&i}for(;o<this.length-e;o++)s=(i=(0|this.words[o+e])+s)>>26,this.words[o+e]=67108863&i;if(0===s)return this.strip();for(r(-1===s),s=0,o=0;o<this.length;o++)s=(i=-(0|this.words[o])+s)>>26,this.words[o]=67108863&i;return this.negative=1,this.strip()},i.prototype._wordDiv=function(t,a){var e=(this.length,t.length),r=this.clone(),o=t,n=0|o.words[o.length-1];0!=(e=26-this._countBits(n))&&(o=o.ushln(e),r.iushln(e),n=0|o.words[o.length-1]);var s,d=r.length-o.length;if("mod"!==a){(s=new i(null)).length=d+1,s.words=new Array(s.length);for(var u=0;u<s.length;u++)s.words[u]=0}var l=r.clone()._ishlnsubmul(o,1,d);0===l.negative&&(r=l,s&&(s.words[d]=1));for(var h=d-1;h>=0;h--){var f=67108864*(0|r.words[o.length+h])+(0|r.words[o.length+h-1]);for(f=Math.min(f/n|0,67108863),r._ishlnsubmul(o,f,h);0!==r.negative;)f--,r.negative=0,r._ishlnsubmul(o,1,h),r.isZero()||(r.negative^=1);s&&(s.words[h]=f)}return s&&s.strip(),r.strip(),"div"!==a&&0!==e&&r.iushrn(e),{div:s||null,mod:r}},i.prototype.divmod=function(t,a,e){return r(!t.isZero()),this.isZero()?{div:new i(0),mod:new i(0)}:0!==this.negative&&0===t.negative?(s=this.neg().divmod(t,a),"mod"!==a&&(o=s.div.neg()),"div"!==a&&(n=s.mod.neg(),e&&0!==n.negative&&n.iadd(t)),{div:o,mod:n}):0===this.negative&&0!==t.negative?(s=this.divmod(t.neg(),a),"mod"!==a&&(o=s.div.neg()),{div:o,mod:s.mod}):0!=(this.negative&t.negative)?(s=this.neg().divmod(t.neg(),a),"div"!==a&&(n=s.mod.neg(),e&&0!==n.negative&&n.isub(t)),{div:s.div,mod:n}):t.length>this.length||this.cmp(t)<0?{div:new i(0),mod:this}:1===t.length?"div"===a?{div:this.divn(t.words[0]),mod:null}:"mod"===a?{div:null,mod:new i(this.modn(t.words[0]))}:{div:this.divn(t.words[0]),mod:new i(this.modn(t.words[0]))}:this._wordDiv(t,a);var o,n,s},i.prototype.div=function(t){return this.divmod(t,"div",!1).div},i.prototype.mod=function(t){return this.divmod(t,"mod",!1).mod},i.prototype.umod=function(t){return this.divmod(t,"mod",!0).mod},i.prototype.divRound=function(t){var a=this.divmod(t);if(a.mod.isZero())return a.div;var e=0!==a.div.negative?a.mod.isub(t):a.mod,r=t.ushrn(1),o=t.andln(1),i=e.cmp(r);return i<0||1===o&&0===i?a.div:0!==a.div.negative?a.div.isubn(1):a.div.iaddn(1)},i.prototype.modn=function(t){r(t<=67108863);for(var a=(1<<26)%t,e=0,o=this.length-1;o>=0;o--)e=(a*e+(0|this.words[o]))%t;return e},i.prototype.idivn=function(t){r(t<=67108863);for(var a=0,e=this.length-1;e>=0;e--){var o=(0|this.words[e])+67108864*a;this.words[e]=o/t|0,a=o%t}return this.strip()},i.prototype.divn=function(t){return this.clone().idivn(t)},i.prototype.egcd=function(t){r(0===t.negative),r(!t.isZero());var a=this,e=t.clone();a=0!==a.negative?a.umod(t):a.clone();for(var o=new i(1),n=new i(0),s=new i(0),d=new i(1),u=0;a.isEven()&&e.isEven();)a.iushrn(1),e.iushrn(1),++u;for(var l=e.clone(),h=a.clone();!a.isZero();){for(var f=0,c=1;0==(a.words[0]&c)&&f<26;++f,c<<=1);if(f>0)for(a.iushrn(f);f-- >0;)(o.isOdd()||n.isOdd())&&(o.iadd(l),n.isub(h)),o.iushrn(1),n.iushrn(1);for(var m=0,p=1;0==(e.words[0]&p)&&m<26;++m,p<<=1);if(m>0)for(e.iushrn(m);m-- >0;)(s.isOdd()||d.isOdd())&&(s.iadd(l),d.isub(h)),s.iushrn(1),d.iushrn(1);a.cmp(e)>=0?(a.isub(e),o.isub(s),n.isub(d)):(e.isub(a),s.isub(o),d.isub(n))}return{a:s,b:d,gcd:e.iushln(u)}},i.prototype._invmp=function(t){r(0===t.negative),r(!t.isZero());var a=this,e=t.clone();a=0!==a.negative?a.umod(t):a.clone();for(var o,n=new i(1),s=new i(0),d=e.clone();a.cmpn(1)>0&&e.cmpn(1)>0;){for(var u=0,l=1;0==(a.words[0]&l)&&u<26;++u,l<<=1);if(u>0)for(a.iushrn(u);u-- >0;)n.isOdd()&&n.iadd(d),n.iushrn(1);for(var h=0,f=1;0==(e.words[0]&f)&&h<26;++h,f<<=1);if(h>0)for(e.iushrn(h);h-- >0;)s.isOdd()&&s.iadd(d),s.iushrn(1);a.cmp(e)>=0?(a.isub(e),n.isub(s)):(e.isub(a),s.isub(n))}return(o=0===a.cmpn(1)?n:s).cmpn(0)<0&&o.iadd(t),o},i.prototype.gcd=function(t){if(this.isZero())return t.abs();if(t.isZero())return this.abs();var a=this.clone(),e=t.clone();a.negative=0,e.negative=0;for(var r=0;a.isEven()&&e.isEven();r++)a.iushrn(1),e.iushrn(1);for(;;){for(;a.isEven();)a.iushrn(1);for(;e.isEven();)e.iushrn(1);var o=a.cmp(e);if(o<0){var i=a;a=e,e=i}else if(0===o||0===e.cmpn(1))break;a.isub(e)}return e.iushln(r)},i.prototype.invm=function(t){return this.egcd(t).a.umod(t)},i.prototype.isEven=function(){return 0==(1&this.words[0])},i.prototype.isOdd=function(){return 1==(1&this.words[0])},i.prototype.andln=function(t){return this.words[0]&t},i.prototype.bincn=function(t){r("number"==typeof t);var a=t%26,e=(t-a)/26,o=1<<a;if(this.length<=e)return this._expand(e+1),this.words[e]|=o,this;for(var i=o,n=e;0!==i&&n<this.length;n++){var s=0|this.words[n];i=(s+=i)>>>26,s&=67108863,this.words[n]=s}return 0!==i&&(this.words[n]=i,this.length++),this},i.prototype.isZero=function(){return 1===this.length&&0===this.words[0]},i.prototype.cmpn=function(t){var a,e=t<0;if(0!==this.negative&&!e)return-1;if(0===this.negative&&e)return 1;if(this.strip(),this.length>1)a=1;else{e&&(t=-t),r(t<=67108863,"Number is too big");var o=0|this.words[0];a=o===t?0:o<t?-1:1}return 0!==this.negative?0|-a:a},i.prototype.cmp=function(t){if(0!==this.negative&&0===t.negative)return-1;if(0===this.negative&&0!==t.negative)return 1;var a=this.ucmp(t);return 0!==this.negative?0|-a:a},i.prototype.ucmp=function(t){if(this.length>t.length)return 1;if(this.length<t.length)return-1;for(var a=0,e=this.length-1;e>=0;e--){var r=0|this.words[e],o=0|t.words[e];if(r!==o){r<o?a=-1:r>o&&(a=1);break}}return a},i.prototype.gtn=function(t){return 1===this.cmpn(t)},i.prototype.gt=function(t){return 1===this.cmp(t)},i.prototype.gten=function(t){return this.cmpn(t)>=0},i.prototype.gte=function(t){return this.cmp(t)>=0},i.prototype.ltn=function(t){return-1===this.cmpn(t)},i.prototype.lt=function(t){return-1===this.cmp(t)},i.prototype.lten=function(t){return this.cmpn(t)<=0},i.prototype.lte=function(t){return this.cmp(t)<=0},i.prototype.eqn=function(t){return 0===this.cmpn(t)},i.prototype.eq=function(t){return 0===this.cmp(t)},i.red=function(t){return new _(t)},i.prototype.toRed=function(t){return r(!this.red,"Already a number in reduction context"),r(0===this.negative,"red works only with positives"),t.convertTo(this)._forceRed(t)},i.prototype.fromRed=function(){return r(this.red,"fromRed works only with numbers in reduction context"),this.red.convertFrom(this)},i.prototype._forceRed=function(t){return this.red=t,this},i.prototype.forceRed=function(t){return r(!this.red,"Already a number in reduction context"),this._forceRed(t)},i.prototype.redAdd=function(t){return r(this.red,"redAdd works only with red numbers"),this.red.add(this,t)},i.prototype.redIAdd=function(t){return r(this.red,"redIAdd works only with red numbers"),this.red.iadd(this,t)},i.prototype.redSub=function(t){return r(this.red,"redSub works only with red numbers"),this.red.sub(this,t)},i.prototype.redISub=function(t){return r(this.red,"redISub works only with red numbers"),this.red.isub(this,t)},i.prototype.redShl=function(t){return r(this.red,"redShl works only with red numbers"),this.red.shl(this,t)},i.prototype.redMul=function(t){return r(this.red,"redMul works only with red numbers"),this.red._verify2(this,t),this.red.mul(this,t)},i.prototype.redIMul=function(t){return r(this.red,"redMul works only with red numbers"),this.red._verify2(this,t),this.red.imul(this,t)},i.prototype.redSqr=function(){return r(this.red,"redSqr works only with red numbers"),this.red._verify1(this),this.red.sqr(this)},i.prototype.redISqr=function(){return r(this.red,"redISqr works only with red numbers"),this.red._verify1(this),this.red.isqr(this)},i.prototype.redSqrt=function(){return r(this.red,"redSqrt works only with red numbers"),this.red._verify1(this),this.red.sqrt(this)},i.prototype.redInvm=function(){return r(this.red,"redInvm works only with red numbers"),this.red._verify1(this),this.red.invm(this)},i.prototype.redNeg=function(){return r(this.red,"redNeg works only with red numbers"),this.red._verify1(this),this.red.neg(this)},i.prototype.redPow=function(t){return r(this.red&&!t.red,"redPow(normalNum)"),this.red._verify1(this),this.red.pow(this,t)};var g={k256:null,p224:null,p192:null,p25519:null};function v(t,a){this.name=t,this.p=new i(a,16),this.n=this.p.bitLength(),this.k=new i(1).iushln(this.n).isub(this.p),this.tmp=this._tmp()}function b(){v.call(this,"k256","ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f")}function A(){v.call(this,"p224","ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001")}function w(){v.call(this,"p192","ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff")}function M(){v.call(this,"25519","7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed")}function _(t){if("string"==typeof t){var a=i._prime(t);this.m=a.p,this.prime=a}else r(t.gtn(1),"modulus must be greater than 1"),this.m=t,this.prime=null}function k(t){_.call(this,t),this.shift=this.m.bitLength(),this.shift%26!=0&&(this.shift+=26-this.shift%26),this.r=new i(1).iushln(this.shift),this.r2=this.imod(this.r.sqr()),this.rinv=this.r._invmp(this.m),this.minv=this.rinv.mul(this.r).isubn(1).div(this.m),this.minv=this.minv.umod(this.r),this.minv=this.r.sub(this.minv)}v.prototype._tmp=function(){var t=new i(null);return t.words=new Array(Math.ceil(this.n/13)),t},v.prototype.ireduce=function(t){var a,e=t;do{this.split(e,this.tmp),a=(e=(e=this.imulK(e)).iadd(this.tmp)).bitLength()}while(a>this.n);var r=a<this.n?-1:e.ucmp(this.p);return 0===r?(e.words[0]=0,e.length=1):r>0?e.isub(this.p):void 0!==e.strip?e.strip():e._strip(),e},v.prototype.split=function(t,a){t.iushrn(this.n,0,a)},v.prototype.imulK=function(t){return t.imul(this.k)},o(b,v),b.prototype.split=function(t,a){for(var e=4194303,r=Math.min(t.length,9),o=0;o<r;o++)a.words[o]=t.words[o];if(a.length=r,t.length<=9)return t.words[0]=0,void(t.length=1);var i=t.words[9];for(a.words[a.length++]=i&e,o=10;o<t.length;o++){var n=0|t.words[o];t.words[o-10]=(n&e)<<4|i>>>22,i=n}i>>>=22,t.words[o-10]=i,0===i&&t.length>10?t.length-=10:t.length-=9},b.prototype.imulK=function(t){t.words[t.length]=0,t.words[t.length+1]=0,t.length+=2;for(var a=0,e=0;e<t.length;e++){var r=0|t.words[e];a+=977*r,t.words[e]=67108863&a,a=64*r+(a/67108864|0)}return 0===t.words[t.length-1]&&(t.length--,0===t.words[t.length-1]&&t.length--),t},o(A,v),o(w,v),o(M,v),M.prototype.imulK=function(t){for(var a=0,e=0;e<t.length;e++){var r=19*(0|t.words[e])+a,o=67108863&r;r>>>=26,t.words[e]=o,a=r}return 0!==a&&(t.words[t.length++]=a),t},i._prime=function(t){if(g[t])return g[t];var a;if("k256"===t)a=new b;else if("p224"===t)a=new A;else if("p192"===t)a=new w;else{if("p25519"!==t)throw new Error("Unknown prime "+t);a=new M}return g[t]=a,a},_.prototype._verify1=function(t){r(0===t.negative,"red works only with positives"),r(t.red,"red works only with red numbers")},_.prototype._verify2=function(t,a){r(0==(t.negative|a.negative),"red works only with positives"),r(t.red&&t.red===a.red,"red works only with red numbers")},_.prototype.imod=function(t){return this.prime?this.prime.ireduce(t)._forceRed(this):t.umod(this.m)._forceRed(this)},_.prototype.neg=function(t){return t.isZero()?t.clone():this.m.sub(t)._forceRed(this)},_.prototype.add=function(t,a){this._verify2(t,a);var e=t.add(a);return e.cmp(this.m)>=0&&e.isub(this.m),e._forceRed(this)},_.prototype.iadd=function(t,a){this._verify2(t,a);var e=t.iadd(a);return e.cmp(this.m)>=0&&e.isub(this.m),e},_.prototype.sub=function(t,a){this._verify2(t,a);var e=t.sub(a);return e.cmpn(0)<0&&e.iadd(this.m),e._forceRed(this)},_.prototype.isub=function(t,a){this._verify2(t,a);var e=t.isub(a);return e.cmpn(0)<0&&e.iadd(this.m),e},_.prototype.shl=function(t,a){return this._verify1(t),this.imod(t.ushln(a))},_.prototype.imul=function(t,a){return this._verify2(t,a),this.imod(t.imul(a))},_.prototype.mul=function(t,a){return this._verify2(t,a),this.imod(t.mul(a))},_.prototype.isqr=function(t){return this.imul(t,t.clone())},_.prototype.sqr=function(t){return this.mul(t,t)},_.prototype.sqrt=function(t){if(t.isZero())return t.clone();var a=this.m.andln(3);if(r(a%2==1),3===a){var e=this.m.add(new i(1)).iushrn(2);return this.pow(t,e)}for(var o=this.m.subn(1),n=0;!o.isZero()&&0===o.andln(1);)n++,o.iushrn(1);r(!o.isZero());var s=new i(1).toRed(this),d=s.redNeg(),u=this.m.subn(1).iushrn(1),l=this.m.bitLength();for(l=new i(2*l*l).toRed(this);0!==this.pow(l,u).cmp(d);)l.redIAdd(d);for(var h=this.pow(l,o),f=this.pow(t,o.addn(1).iushrn(1)),c=this.pow(t,o),m=n;0!==c.cmp(s);){for(var p=c,y=0;0!==p.cmp(s);y++)p=p.redSqr();r(y<m);var g=this.pow(h,new i(1).iushln(m-y-1));f=f.redMul(g),h=g.redSqr(),c=c.redMul(h),m=y}return f},_.prototype.invm=function(t){var a=t._invmp(this.m);return 0!==a.negative?(a.negative=0,this.imod(a).redNeg()):this.imod(a)},_.prototype.pow=function(t,a){if(a.isZero())return new i(1).toRed(this);if(0===a.cmpn(1))return t.clone();var e=new Array(16);e[0]=new i(1).toRed(this),e[1]=t;for(var r=2;r<e.length;r++)e[r]=this.mul(e[r-1],t);var o=e[0],n=0,s=0,d=a.bitLength()%26;for(0===d&&(d=26),r=a.length-1;r>=0;r--){for(var u=a.words[r],l=d-1;l>=0;l--){var h=u>>l&1;o!==e[0]&&(o=this.sqr(o)),0!==h||0!==n?(n<<=1,n|=h,(4==++s||0===r&&0===l)&&(o=this.mul(o,e[n]),s=0,n=0)):s=0}d=26}return o},_.prototype.convertTo=function(t){var a=t.umod(this.m);return a===t?a.clone():a},_.prototype.convertFrom=function(t){var a=t.clone();return a.red=null,a},i.mont=function(t){return new k(t)},o(k,_),k.prototype.convertTo=function(t){return this.imod(t.ushln(this.shift))},k.prototype.convertFrom=function(t){var a=this.imod(t.mul(this.rinv));return a.red=null,a},k.prototype.imul=function(t,a){if(t.isZero()||a.isZero())return t.words[0]=0,t.length=1,t;var e=t.imul(a),r=e.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m),o=e.isub(r).iushrn(this.shift),i=o;return o.cmp(this.m)>=0?i=o.isub(this.m):o.cmpn(0)<0&&(i=o.iadd(this.m)),i._forceRed(this)},k.prototype.mul=function(t,a){if(t.isZero()||a.isZero())return new i(0)._forceRed(this);var e=t.mul(a),r=e.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m),o=e.isub(r).iushrn(this.shift),n=o;return o.cmp(this.m)>=0?n=o.isub(this.m):o.cmpn(0)<0&&(n=o.iadd(this.m)),n._forceRed(this)},k.prototype.invm=function(t){return this.imod(t._invmp(this.m).mul(this.r2))._forceRed(this)}}(t=e.nmd(t),this)},3286:(t,a,e)=>{"use strict";e.d(a,{lE:()=>d,zo:()=>u,xs:()=>y,E1:()=>m,p3:()=>p,$P:()=>g,$m:()=>v,Dv:()=>c,_t:()=>s,Zq:()=>n,A7:()=>h,N:()=>b,G1:()=>l});const r=new(e(711).Yd)("bytes/5.4.0");function o(t){return!!t.toHexString}function i(t){return t.slice||(t.slice=function(){const a=Array.prototype.slice.call(arguments);return i(new Uint8Array(Array.prototype.slice.apply(t,a)))}),t}function n(t){return h(t)&&!(t.length%2)||s(t)}function s(t){if(null==t)return!1;if(t.constructor===Uint8Array)return!0;if("string"==typeof t)return!1;if(null==t.length)return!1;for(let a=0;a<t.length;a++){const e=t[a];if("number"!=typeof e||e<0||e>=256||e%1)return!1}return!0}function d(t,a){if(a||(a={}),"number"==typeof t){r.checkSafeUint53(t,"invalid arrayify value");const a=[];for(;t;)a.unshift(255&t),t=parseInt(String(t/256));return 0===a.length&&a.push(0),i(new Uint8Array(a))}if(a.allowMissingPrefix&&"string"==typeof t&&"0x"!==t.substring(0,2)&&(t="0x"+t),o(t)&&(t=t.toHexString()),h(t)){let e=t.substring(2);e.length%2&&("left"===a.hexPad?e="0x0"+e.substring(2):"right"===a.hexPad?e+="0":r.throwArgumentError("hex data is odd-length","value",t));const o=[];for(let t=0;t<e.length;t+=2)o.push(parseInt(e.substring(t,t+2),16));return i(new Uint8Array(o))}return s(t)?i(new Uint8Array(t)):r.throwArgumentError("invalid arrayify value","value",t)}function u(t){const a=t.map((t=>d(t))),e=a.reduce(((t,a)=>t+a.length),0),r=new Uint8Array(e);return a.reduce(((t,a)=>(r.set(a,t),t+a.length)),0),i(r)}function l(t){let a=d(t);if(0===a.length)return a;let e=0;for(;e<a.length&&0===a[e];)e++;return e&&(a=a.slice(e)),a}function h(t,a){return!("string"!=typeof t||!t.match(/^0x[0-9A-Fa-f]*$/)||a&&t.length!==2+2*a)}const f="0123456789abcdef";function c(t,a){if(a||(a={}),"number"==typeof t){r.checkSafeUint53(t,"invalid hexlify value");let a="";for(;t;)a=f[15&t]+a,t=Math.floor(t/16);return a.length?(a.length%2&&(a="0"+a),"0x"+a):"0x00"}if("bigint"==typeof t)return(t=t.toString(16)).length%2?"0x0"+t:"0x"+t;if(a.allowMissingPrefix&&"string"==typeof t&&"0x"!==t.substring(0,2)&&(t="0x"+t),o(t))return t.toHexString();if(h(t))return t.length%2&&("left"===a.hexPad?t="0x0"+t.substring(2):"right"===a.hexPad?t+="0":r.throwArgumentError("hex data is odd-length","value",t)),t.toLowerCase();if(s(t)){let a="0x";for(let e=0;e<t.length;e++){let r=t[e];a+=f[(240&r)>>4]+f[15&r]}return a}return r.throwArgumentError("invalid hexlify value","value",t)}function m(t){if("string"!=typeof t)t=c(t);else if(!h(t)||t.length%2)return null;return(t.length-2)/2}function p(t,a,e){return"string"!=typeof t?t=c(t):(!h(t)||t.length%2)&&r.throwArgumentError("invalid hexData","value",t),a=2+2*a,null!=e?"0x"+t.substring(a,2+2*e):"0x"+t.substring(a)}function y(t){let a="0x";return t.forEach((t=>{a+=c(t).substring(2)})),a}function g(t){const a=function(t){"string"!=typeof t&&(t=c(t)),h(t)||r.throwArgumentError("invalid hex string","value",t),t=t.substring(2);let a=0;for(;a<t.length&&"0"===t[a];)a++;return"0x"+t.substring(a)}(c(t,{hexPad:"left"}));return"0x"===a?"0x0":a}function v(t,a){for("string"!=typeof t?t=c(t):h(t)||r.throwArgumentError("invalid hex string","value",t),t.length>2*a+2&&r.throwArgumentError("value out of range","value",arguments[1]);t.length<2*a+2;)t="0x0"+t.substring(2);return t}function b(t){const a={r:"0x",s:"0x",_vs:"0x",recoveryParam:0,v:0};if(n(t)){const e=d(t);65!==e.length&&r.throwArgumentError("invalid signature string; must be 65 bytes","signature",t),a.r=c(e.slice(0,32)),a.s=c(e.slice(32,64)),a.v=e[64],a.v<27&&(0===a.v||1===a.v?a.v+=27:r.throwArgumentError("signature invalid v byte","signature",t)),a.recoveryParam=1-a.v%2,a.recoveryParam&&(e[32]|=128),a._vs=c(e.slice(32,64))}else{if(a.r=t.r,a.s=t.s,a.v=t.v,a.recoveryParam=t.recoveryParam,a._vs=t._vs,null!=a._vs){const e=function(t,a){(t=d(t)).length>a&&r.throwArgumentError("value out of range","value",arguments[0]);const e=new Uint8Array(a);return e.set(t,a-t.length),i(e)}(d(a._vs),32);a._vs=c(e);const o=e[0]>=128?1:0;null==a.recoveryParam?a.recoveryParam=o:a.recoveryParam!==o&&r.throwArgumentError("signature recoveryParam mismatch _vs","signature",t),e[0]&=127;const n=c(e);null==a.s?a.s=n:a.s!==n&&r.throwArgumentError("signature v mismatch _vs","signature",t)}null==a.recoveryParam?null==a.v?r.throwArgumentError("signature missing v and recoveryParam","signature",t):0===a.v||1===a.v?a.recoveryParam=a.v:a.recoveryParam=1-a.v%2:null==a.v?a.v=27+a.recoveryParam:a.recoveryParam!==1-a.v%2&&r.throwArgumentError("signature recoveryParam mismatch v","signature",t),null!=a.r&&h(a.r)?a.r=v(a.r,32):r.throwArgumentError("signature missing or invalid r","signature",t),null!=a.s&&h(a.s)?a.s=v(a.s,32):r.throwArgumentError("signature missing or invalid s","signature",t);const e=d(a.s);e[0]>=128&&r.throwArgumentError("signature s out of range","signature",t),a.recoveryParam&&(e[0]|=128);const o=c(e);a._vs&&(h(a._vs)||r.throwArgumentError("signature invalid _vs","signature",t),a._vs=v(a._vs,32)),null==a._vs?a._vs=o:a._vs!==o&&r.throwArgumentError("signature _vs mismatch v and s","signature",t)}return a}},8197:(t,a,e)=>{"use strict";e.d(a,{w:()=>n});var r=e(4867),o=e.n(r),i=e(3286);function n(t){return"0x"+o().keccak_256((0,i.lE)(t))}},4867:(t,a,e)=>{!function(){"use strict";var a="object"==typeof window?window:{};!a.JS_SHA3_NO_NODE_JS&&"object"==typeof process&&process.versions&&process.versions.node&&(a=e.g);for(var r=!a.JS_SHA3_NO_COMMON_JS&&t.exports,o="0123456789abcdef".split(""),i=[0,8,16,24],n=[1,0,32898,0,32906,2147483648,2147516416,2147483648,32907,0,2147483649,0,2147516545,2147483648,32777,2147483648,138,0,136,0,2147516425,0,2147483658,0,2147516555,0,139,2147483648,32905,2147483648,32771,2147483648,32770,2147483648,128,2147483648,32778,0,2147483658,2147483648,2147516545,2147483648,32896,2147483648,2147483649,0,2147516424,2147483648],s=[224,256,384,512],d=["hex","buffer","arrayBuffer","array"],u=function(t,a,e){return function(r){return new A(t,a,t).update(r)[e]()}},l=function(t,a,e){return function(r,o){return new A(t,a,o).update(r)[e]()}},h=function(t,a){var e=u(t,a,"hex");e.create=function(){return new A(t,a,t)},e.update=function(t){return e.create().update(t)};for(var r=0;r<d.length;++r){var o=d[r];e[o]=u(t,a,o)}return e},f=[{name:"keccak",padding:[1,256,65536,16777216],bits:s,createMethod:h},{name:"sha3",padding:[6,1536,393216,100663296],bits:s,createMethod:h},{name:"shake",padding:[31,7936,2031616,520093696],bits:[128,256],createMethod:function(t,a){var e=l(t,a,"hex");e.create=function(e){return new A(t,a,e)},e.update=function(t,a){return e.create(a).update(t)};for(var r=0;r<d.length;++r){var o=d[r];e[o]=l(t,a,o)}return e}}],c={},m=[],p=0;p<f.length;++p)for(var y=f[p],g=y.bits,v=0;v<g.length;++v){var b=y.name+"_"+g[v];m.push(b),c[b]=y.createMethod(g[v],y.padding)}function A(t,a,e){this.blocks=[],this.s=[],this.padding=a,this.outputBits=e,this.reset=!0,this.block=0,this.start=0,this.blockCount=1600-(t<<1)>>5,this.byteCount=this.blockCount<<2,this.outputBlocks=e>>5,this.extraBytes=(31&e)>>3;for(var r=0;r<50;++r)this.s[r]=0}A.prototype.update=function(t){var a="string"!=typeof t;a&&t.constructor===ArrayBuffer&&(t=new Uint8Array(t));for(var e,r,o=t.length,n=this.blocks,s=this.byteCount,d=this.blockCount,u=0,l=this.s;u<o;){if(this.reset)for(this.reset=!1,n[0]=this.block,e=1;e<d+1;++e)n[e]=0;if(a)for(e=this.start;u<o&&e<s;++u)n[e>>2]|=t[u]<<i[3&e++];else for(e=this.start;u<o&&e<s;++u)(r=t.charCodeAt(u))<128?n[e>>2]|=r<<i[3&e++]:r<2048?(n[e>>2]|=(192|r>>6)<<i[3&e++],n[e>>2]|=(128|63&r)<<i[3&e++]):r<55296||r>=57344?(n[e>>2]|=(224|r>>12)<<i[3&e++],n[e>>2]|=(128|r>>6&63)<<i[3&e++],n[e>>2]|=(128|63&r)<<i[3&e++]):(r=65536+((1023&r)<<10|1023&t.charCodeAt(++u)),n[e>>2]|=(240|r>>18)<<i[3&e++],n[e>>2]|=(128|r>>12&63)<<i[3&e++],n[e>>2]|=(128|r>>6&63)<<i[3&e++],n[e>>2]|=(128|63&r)<<i[3&e++]);if(this.lastByteIndex=e,e>=s){for(this.start=e-s,this.block=n[d],e=0;e<d;++e)l[e]^=n[e];w(l),this.reset=!0}else this.start=e}return this},A.prototype.finalize=function(){var t=this.blocks,a=this.lastByteIndex,e=this.blockCount,r=this.s;if(t[a>>2]|=this.padding[3&a],this.lastByteIndex===this.byteCount)for(t[0]=t[e],a=1;a<e+1;++a)t[a]=0;for(t[e-1]|=2147483648,a=0;a<e;++a)r[a]^=t[a];w(r)},A.prototype.toString=A.prototype.hex=function(){this.finalize();for(var t,a=this.blockCount,e=this.s,r=this.outputBlocks,i=this.extraBytes,n=0,s=0,d="";s<r;){for(n=0;n<a&&s<r;++n,++s)t=e[n],d+=o[t>>4&15]+o[15&t]+o[t>>12&15]+o[t>>8&15]+o[t>>20&15]+o[t>>16&15]+o[t>>28&15]+o[t>>24&15];s%a==0&&(w(e),n=0)}return i&&(t=e[n],i>0&&(d+=o[t>>4&15]+o[15&t]),i>1&&(d+=o[t>>12&15]+o[t>>8&15]),i>2&&(d+=o[t>>20&15]+o[t>>16&15])),d},A.prototype.arrayBuffer=function(){this.finalize();var t,a=this.blockCount,e=this.s,r=this.outputBlocks,o=this.extraBytes,i=0,n=0,s=this.outputBits>>3;t=o?new ArrayBuffer(r+1<<2):new ArrayBuffer(s);for(var d=new Uint32Array(t);n<r;){for(i=0;i<a&&n<r;++i,++n)d[n]=e[i];n%a==0&&w(e)}return o&&(d[i]=e[i],t=t.slice(0,s)),t},A.prototype.buffer=A.prototype.arrayBuffer,A.prototype.digest=A.prototype.array=function(){this.finalize();for(var t,a,e=this.blockCount,r=this.s,o=this.outputBlocks,i=this.extraBytes,n=0,s=0,d=[];s<o;){for(n=0;n<e&&s<o;++n,++s)t=s<<2,a=r[n],d[t]=255&a,d[t+1]=a>>8&255,d[t+2]=a>>16&255,d[t+3]=a>>24&255;s%e==0&&w(r)}return i&&(t=s<<2,a=r[n],i>0&&(d[t]=255&a),i>1&&(d[t+1]=a>>8&255),i>2&&(d[t+2]=a>>16&255)),d};var w=function(t){var a,e,r,o,i,s,d,u,l,h,f,c,m,p,y,g,v,b,A,w,M,_,k,B,C,E,x,N,F,S,P,O,R,I,T,q,G,L,z,D,U,j,$,Y,H,W,V,Z,K,J,X,Q,tt,at,et,rt,ot,it,nt,st,dt,ut,lt;for(r=0;r<48;r+=2)o=t[0]^t[10]^t[20]^t[30]^t[40],i=t[1]^t[11]^t[21]^t[31]^t[41],s=t[2]^t[12]^t[22]^t[32]^t[42],d=t[3]^t[13]^t[23]^t[33]^t[43],u=t[4]^t[14]^t[24]^t[34]^t[44],l=t[5]^t[15]^t[25]^t[35]^t[45],h=t[6]^t[16]^t[26]^t[36]^t[46],f=t[7]^t[17]^t[27]^t[37]^t[47],a=(c=t[8]^t[18]^t[28]^t[38]^t[48])^(s<<1|d>>>31),e=(m=t[9]^t[19]^t[29]^t[39]^t[49])^(d<<1|s>>>31),t[0]^=a,t[1]^=e,t[10]^=a,t[11]^=e,t[20]^=a,t[21]^=e,t[30]^=a,t[31]^=e,t[40]^=a,t[41]^=e,a=o^(u<<1|l>>>31),e=i^(l<<1|u>>>31),t[2]^=a,t[3]^=e,t[12]^=a,t[13]^=e,t[22]^=a,t[23]^=e,t[32]^=a,t[33]^=e,t[42]^=a,t[43]^=e,a=s^(h<<1|f>>>31),e=d^(f<<1|h>>>31),t[4]^=a,t[5]^=e,t[14]^=a,t[15]^=e,t[24]^=a,t[25]^=e,t[34]^=a,t[35]^=e,t[44]^=a,t[45]^=e,a=u^(c<<1|m>>>31),e=l^(m<<1|c>>>31),t[6]^=a,t[7]^=e,t[16]^=a,t[17]^=e,t[26]^=a,t[27]^=e,t[36]^=a,t[37]^=e,t[46]^=a,t[47]^=e,a=h^(o<<1|i>>>31),e=f^(i<<1|o>>>31),t[8]^=a,t[9]^=e,t[18]^=a,t[19]^=e,t[28]^=a,t[29]^=e,t[38]^=a,t[39]^=e,t[48]^=a,t[49]^=e,p=t[0],y=t[1],W=t[11]<<4|t[10]>>>28,V=t[10]<<4|t[11]>>>28,N=t[20]<<3|t[21]>>>29,F=t[21]<<3|t[20]>>>29,st=t[31]<<9|t[30]>>>23,dt=t[30]<<9|t[31]>>>23,j=t[40]<<18|t[41]>>>14,$=t[41]<<18|t[40]>>>14,I=t[2]<<1|t[3]>>>31,T=t[3]<<1|t[2]>>>31,g=t[13]<<12|t[12]>>>20,v=t[12]<<12|t[13]>>>20,Z=t[22]<<10|t[23]>>>22,K=t[23]<<10|t[22]>>>22,S=t[33]<<13|t[32]>>>19,P=t[32]<<13|t[33]>>>19,ut=t[42]<<2|t[43]>>>30,lt=t[43]<<2|t[42]>>>30,at=t[5]<<30|t[4]>>>2,et=t[4]<<30|t[5]>>>2,q=t[14]<<6|t[15]>>>26,G=t[15]<<6|t[14]>>>26,b=t[25]<<11|t[24]>>>21,A=t[24]<<11|t[25]>>>21,J=t[34]<<15|t[35]>>>17,X=t[35]<<15|t[34]>>>17,O=t[45]<<29|t[44]>>>3,R=t[44]<<29|t[45]>>>3,B=t[6]<<28|t[7]>>>4,C=t[7]<<28|t[6]>>>4,rt=t[17]<<23|t[16]>>>9,ot=t[16]<<23|t[17]>>>9,L=t[26]<<25|t[27]>>>7,z=t[27]<<25|t[26]>>>7,w=t[36]<<21|t[37]>>>11,M=t[37]<<21|t[36]>>>11,Q=t[47]<<24|t[46]>>>8,tt=t[46]<<24|t[47]>>>8,Y=t[8]<<27|t[9]>>>5,H=t[9]<<27|t[8]>>>5,E=t[18]<<20|t[19]>>>12,x=t[19]<<20|t[18]>>>12,it=t[29]<<7|t[28]>>>25,nt=t[28]<<7|t[29]>>>25,D=t[38]<<8|t[39]>>>24,U=t[39]<<8|t[38]>>>24,_=t[48]<<14|t[49]>>>18,k=t[49]<<14|t[48]>>>18,t[0]=p^~g&b,t[1]=y^~v&A,t[10]=B^~E&N,t[11]=C^~x&F,t[20]=I^~q&L,t[21]=T^~G&z,t[30]=Y^~W&Z,t[31]=H^~V&K,t[40]=at^~rt&it,t[41]=et^~ot&nt,t[2]=g^~b&w,t[3]=v^~A&M,t[12]=E^~N&S,t[13]=x^~F&P,t[22]=q^~L&D,t[23]=G^~z&U,t[32]=W^~Z&J,t[33]=V^~K&X,t[42]=rt^~it&st,t[43]=ot^~nt&dt,t[4]=b^~w&_,t[5]=A^~M&k,t[14]=N^~S&O,t[15]=F^~P&R,t[24]=L^~D&j,t[25]=z^~U&$,t[34]=Z^~J&Q,t[35]=K^~X&tt,t[44]=it^~st&ut,t[45]=nt^~dt&lt,t[6]=w^~_&p,t[7]=M^~k&y,t[16]=S^~O&B,t[17]=P^~R&C,t[26]=D^~j&I,t[27]=U^~$&T,t[36]=J^~Q&Y,t[37]=X^~tt&H,t[46]=st^~ut&at,t[47]=dt^~lt&et,t[8]=_^~p&g,t[9]=k^~y&v,t[18]=O^~B&E,t[19]=R^~C&x,t[28]=j^~I&q,t[29]=$^~T&G,t[38]=Q^~Y&W,t[39]=tt^~H&V,t[48]=ut^~at&rt,t[49]=lt^~et&ot,t[0]^=n[r],t[1]^=n[r+1]};if(r)t.exports=c;else for(p=0;p<m.length;++p)a[m[p]]=c[m[p]]}()},711:(t,a,e)=>{"use strict";e.d(a,{Yd:()=>f});let r=!1,o=!1;const i={debug:1,default:2,info:2,warning:3,error:4,off:5};let n=i.default,s=null;const d=function(){try{const t=[];if(["NFD","NFC","NFKD","NFKC"].forEach((a=>{try{if("test"!=="test".normalize(a))throw new Error("bad normalize")}catch(e){t.push(a)}})),t.length)throw new Error("missing "+t.join(", "));if(String.fromCharCode(233).normalize("NFD")!==String.fromCharCode(101,769))throw new Error("broken implementation")}catch(t){return t.message}return null}();var u,l;!function(t){t.DEBUG="DEBUG",t.INFO="INFO",t.WARNING="WARNING",t.ERROR="ERROR",t.OFF="OFF"}(u||(u={})),function(t){t.UNKNOWN_ERROR="UNKNOWN_ERROR",t.NOT_IMPLEMENTED="NOT_IMPLEMENTED",t.UNSUPPORTED_OPERATION="UNSUPPORTED_OPERATION",t.NETWORK_ERROR="NETWORK_ERROR",t.SERVER_ERROR="SERVER_ERROR",t.TIMEOUT="TIMEOUT",t.BUFFER_OVERRUN="BUFFER_OVERRUN",t.NUMERIC_FAULT="NUMERIC_FAULT",t.MISSING_NEW="MISSING_NEW",t.INVALID_ARGUMENT="INVALID_ARGUMENT",t.MISSING_ARGUMENT="MISSING_ARGUMENT",t.UNEXPECTED_ARGUMENT="UNEXPECTED_ARGUMENT",t.CALL_EXCEPTION="CALL_EXCEPTION",t.INSUFFICIENT_FUNDS="INSUFFICIENT_FUNDS",t.NONCE_EXPIRED="NONCE_EXPIRED",t.REPLACEMENT_UNDERPRICED="REPLACEMENT_UNDERPRICED",t.UNPREDICTABLE_GAS_LIMIT="UNPREDICTABLE_GAS_LIMIT",t.TRANSACTION_REPLACED="TRANSACTION_REPLACED"}(l||(l={}));const h="0123456789abcdef";class f{constructor(t){Object.defineProperty(this,"version",{enumerable:!0,value:t,writable:!1})}_log(t,a){const e=t.toLowerCase();null==i[e]&&this.throwArgumentError("invalid log level name","logLevel",t),n>i[e]||console.log.apply(console,a)}debug(...t){this._log(f.levels.DEBUG,t)}info(...t){this._log(f.levels.INFO,t)}warn(...t){this._log(f.levels.WARNING,t)}makeError(t,a,e){if(o)return this.makeError("censored error",a,{});a||(a=f.errors.UNKNOWN_ERROR),e||(e={});const r=[];Object.keys(e).forEach((t=>{const a=e[t];try{if(a instanceof Uint8Array){let e="";for(let t=0;t<a.length;t++)e+=h[a[t]>>4],e+=h[15&a[t]];r.push(t+"=Uint8Array(0x"+e+")")}else r.push(t+"="+JSON.stringify(a))}catch(a){r.push(t+"="+JSON.stringify(e[t].toString()))}})),r.push(`code=${a}`),r.push(`version=${this.version}`);const i=t;r.length&&(t+=" ("+r.join(", ")+")");const n=new Error(t);return n.reason=i,n.code=a,Object.keys(e).forEach((function(t){n[t]=e[t]})),n}throwError(t,a,e){throw this.makeError(t,a,e)}throwArgumentError(t,a,e){return this.throwError(t,f.errors.INVALID_ARGUMENT,{argument:a,value:e})}assert(t,a,e,r){t||this.throwError(a,e,r)}assertArgument(t,a,e,r){t||this.throwArgumentError(a,e,r)}checkNormalize(t){null==t&&(t="platform missing String.prototype.normalize"),d&&this.throwError("platform missing String.prototype.normalize",f.errors.UNSUPPORTED_OPERATION,{operation:"String.prototype.normalize",form:d})}checkSafeUint53(t,a){"number"==typeof t&&(null==a&&(a="value not safe"),(t<0||t>=9007199254740991)&&this.throwError(a,f.errors.NUMERIC_FAULT,{operation:"checkSafeInteger",fault:"out-of-safe-range",value:t}),t%1&&this.throwError(a,f.errors.NUMERIC_FAULT,{operation:"checkSafeInteger",fault:"non-integer",value:t}))}checkArgumentCount(t,a,e){e=e?": "+e:"",t<a&&this.throwError("missing argument"+e,f.errors.MISSING_ARGUMENT,{count:t,expectedCount:a}),t>a&&this.throwError("too many arguments"+e,f.errors.UNEXPECTED_ARGUMENT,{count:t,expectedCount:a})}checkNew(t,a){t!==Object&&null!=t||this.throwError("missing new",f.errors.MISSING_NEW,{name:a.name})}checkAbstract(t,a){t===a?this.throwError("cannot instantiate abstract class "+JSON.stringify(a.name)+" directly; use a sub-class",f.errors.UNSUPPORTED_OPERATION,{name:t.name,operation:"new"}):t!==Object&&null!=t||this.throwError("missing new",f.errors.MISSING_NEW,{name:a.name})}static globalLogger(){return s||(s=new f("logger/5.4.1")),s}static setCensorship(t,a){if(!t&&a&&this.globalLogger().throwError("cannot permanently disable censorship",f.errors.UNSUPPORTED_OPERATION,{operation:"setCensorship"}),r){if(!t)return;this.globalLogger().throwError("error censorship permanent",f.errors.UNSUPPORTED_OPERATION,{operation:"setCensorship"})}o=!!t,r=!!a}static setLogLevel(t){const a=i[t.toLowerCase()];null!=a?n=a:f.globalLogger().warn("invalid log level - "+t)}static from(t){return new f(t)}}f.errors=l,f.levels=u},5011:(t,a,e)=>{"use strict";e.d(a,{Q:()=>ye});var r=e(711);const o=new r.Yd("properties/5.4.1");function i(t,a,e){Object.defineProperty(t,a,{enumerable:!0,value:e,writable:!1})}function n(t,a){for(let e=0;e<32;e++){if(t[a])return t[a];if(!t.prototype||"object"!=typeof t.prototype)break;t=Object.getPrototypeOf(t.prototype).constructor}return null}function s(t){return a=this,e=void 0,o=function*(){const a=Object.keys(t).map((a=>{const e=t[a];return Promise.resolve(e).then((t=>({key:a,value:t})))}));return(yield Promise.all(a)).reduce(((t,a)=>(t[a.key]=a.value,t)),{})},new((r=void 0)||(r=Promise))((function(t,i){function n(t){try{d(o.next(t))}catch(t){i(t)}}function s(t){try{d(o.throw(t))}catch(t){i(t)}}function d(a){var e;a.done?t(a.value):(e=a.value,e instanceof r?e:new r((function(t){t(e)}))).then(n,s)}d((o=o.apply(a,e||[])).next())}));var a,e,r,o}function d(t){const a={};for(const e in t)a[e]=t[e];return a}const u={bigint:!0,boolean:!0,function:!0,number:!0,string:!0};function l(t){if(null==t||u[typeof t])return!0;if(Array.isArray(t)||"object"==typeof t){if(!Object.isFrozen(t))return!1;const a=Object.keys(t);for(let e=0;e<a.length;e++){let r=null;try{r=t[a[e]]}catch(t){continue}if(!l(r))return!1}return!0}return o.throwArgumentError("Cannot deepCopy "+typeof t,"object",t)}function h(t){if(l(t))return t;if(Array.isArray(t))return Object.freeze(t.map((t=>f(t))));if("object"==typeof t){const a={};for(const e in t){const r=t[e];void 0!==r&&i(a,e,f(r))}return a}return o.throwArgumentError("Cannot deepCopy "+typeof t,"object",t)}function f(t){return h(t)}const c="providers/5.4.5";var m=function(t,a,e,r){return new(e||(e=Promise))((function(o,i){function n(t){try{d(r.next(t))}catch(t){i(t)}}function s(t){try{d(r.throw(t))}catch(t){i(t)}}function d(t){var a;t.done?o(t.value):(a=t.value,a instanceof e?a:new e((function(t){t(a)}))).then(n,s)}d((r=r.apply(t,a||[])).next())}))};const p=new r.Yd("abstract-signer/5.4.1"),y=["accessList","chainId","data","from","gasLimit","gasPrice","maxFeePerGas","maxPriorityFeePerGas","nonce","to","type","value"],g=[r.Yd.errors.INSUFFICIENT_FUNDS,r.Yd.errors.NONCE_EXPIRED,r.Yd.errors.REPLACEMENT_UNDERPRICED];class v{constructor(){p.checkAbstract(new.target,v),i(this,"_isSigner",!0)}getBalance(t){return m(this,void 0,void 0,(function*(){return this._checkProvider("getBalance"),yield this.provider.getBalance(this.getAddress(),t)}))}getTransactionCount(t){return m(this,void 0,void 0,(function*(){return this._checkProvider("getTransactionCount"),yield this.provider.getTransactionCount(this.getAddress(),t)}))}estimateGas(t){return m(this,void 0,void 0,(function*(){this._checkProvider("estimateGas");const a=yield s(this.checkTransaction(t));return yield this.provider.estimateGas(a)}))}call(t,a){return m(this,void 0,void 0,(function*(){this._checkProvider("call");const e=yield s(this.checkTransaction(t));return yield this.provider.call(e,a)}))}sendTransaction(t){return m(this,void 0,void 0,(function*(){this._checkProvider("sendTransaction");const a=yield this.populateTransaction(t),e=yield this.signTransaction(a);return yield this.provider.sendTransaction(e)}))}getChainId(){return m(this,void 0,void 0,(function*(){return this._checkProvider("getChainId"),(yield this.provider.getNetwork()).chainId}))}getGasPrice(){return m(this,void 0,void 0,(function*(){return this._checkProvider("getGasPrice"),yield this.provider.getGasPrice()}))}getFeeData(){return m(this,void 0,void 0,(function*(){return this._checkProvider("getFeeData"),yield this.provider.getFeeData()}))}resolveName(t){return m(this,void 0,void 0,(function*(){return this._checkProvider("resolveName"),yield this.provider.resolveName(t)}))}checkTransaction(t){for(const a in t)-1===y.indexOf(a)&&p.throwArgumentError("invalid transaction key: "+a,"transaction",t);const a=d(t);return null==a.from?a.from=this.getAddress():a.from=Promise.all([Promise.resolve(a.from),this.getAddress()]).then((a=>(a[0].toLowerCase()!==a[1].toLowerCase()&&p.throwArgumentError("from address mismatch","transaction",t),a[0]))),a}populateTransaction(t){return m(this,void 0,void 0,(function*(){const a=yield s(this.checkTransaction(t));null!=a.to&&(a.to=Promise.resolve(a.to).then((t=>m(this,void 0,void 0,(function*(){if(null==t)return null;const a=yield this.resolveName(t);return null==a&&p.throwArgumentError("provided ENS name resolves to null","tx.to",t),a})))),a.to.catch((t=>{})));const e=null!=a.maxFeePerGas||null!=a.maxPriorityFeePerGas;if(null==a.gasPrice||2!==a.type&&!e?0!==a.type&&1!==a.type||!e||p.throwArgumentError("pre-eip-1559 transaction do not support maxFeePerGas/maxPriorityFeePerGas","transaction",t):p.throwArgumentError("eip-1559 transaction do not support gasPrice","transaction",t),2!==a.type&&null!=a.type||null==a.maxFeePerGas||null==a.maxPriorityFeePerGas)if(0===a.type||1===a.type)null==a.gasPrice&&(a.gasPrice=this.getGasPrice());else{const t=yield this.getFeeData();if(null==a.type)if(null!=t.maxFeePerGas&&null!=t.maxPriorityFeePerGas)if(a.type=2,null!=a.gasPrice){const t=a.gasPrice;delete a.gasPrice,a.maxFeePerGas=t,a.maxPriorityFeePerGas=t}else null==a.maxFeePerGas&&(a.maxFeePerGas=t.maxFeePerGas),null==a.maxPriorityFeePerGas&&(a.maxPriorityFeePerGas=t.maxPriorityFeePerGas);else null!=t.gasPrice?(e&&p.throwError("network does not support EIP-1559",r.Yd.errors.UNSUPPORTED_OPERATION,{operation:"populateTransaction"}),null==a.gasPrice&&(a.gasPrice=t.gasPrice),a.type=0):p.throwError("failed to get consistent fee data",r.Yd.errors.UNSUPPORTED_OPERATION,{operation:"signer.getFeeData"});else 2===a.type&&(null==a.maxFeePerGas&&(a.maxFeePerGas=t.maxFeePerGas),null==a.maxPriorityFeePerGas&&(a.maxPriorityFeePerGas=t.maxPriorityFeePerGas))}else a.type=2;return null==a.nonce&&(a.nonce=this.getTransactionCount("pending")),null==a.gasLimit&&(a.gasLimit=this.estimateGas(a).catch((t=>{if(g.indexOf(t.code)>=0)throw t;return p.throwError("cannot estimate gas; transaction may fail or may require manual gas limit",r.Yd.errors.UNPREDICTABLE_GAS_LIMIT,{error:t,tx:a})}))),null==a.chainId?a.chainId=this.getChainId():a.chainId=Promise.all([Promise.resolve(a.chainId),this.getChainId()]).then((a=>(0!==a[1]&&a[0]!==a[1]&&p.throwArgumentError("chainId address mismatch","transaction",t),a[0]))),yield s(a)}))}_checkProvider(t){this.provider||p.throwError("missing provider",r.Yd.errors.UNSUPPORTED_OPERATION,{operation:t||"_checkProvider"})}static isSigner(t){return!(!t||!t._isSigner)}}var b=e(2593),A=e(3286),w=e(4594),M=e(8197);const _="hash/5.4.0",k=new r.Yd("strings/5.4.0");var B,C;function E(t,a,e,r,o){if(t===C.BAD_PREFIX||t===C.UNEXPECTED_CONTINUE){let t=0;for(let r=a+1;r<e.length&&e[r]>>6==2;r++)t++;return t}return t===C.OVERRUN?e.length-a-1:0}!function(t){t.current="",t.NFC="NFC",t.NFD="NFD",t.NFKC="NFKC",t.NFKD="NFKD"}(B||(B={})),function(t){t.UNEXPECTED_CONTINUE="unexpected continuation byte",t.BAD_PREFIX="bad codepoint prefix",t.OVERRUN="string overrun",t.MISSING_CONTINUE="missing continuation byte",t.OUT_OF_RANGE="out of UTF-8 range",t.UTF16_SURROGATE="UTF-16 surrogate",t.OVERLONG="overlong representation"}(C||(C={}));const x=Object.freeze({error:function(t,a,e,r,o){return k.throwArgumentError(`invalid codepoint at offset ${a}; ${t}`,"bytes",e)},ignore:E,replace:function(t,a,e,r,o){return t===C.OVERLONG?(r.push(o),0):(r.push(65533),E(t,a,e))}});function N(t,a){null==a&&(a=x.error),t=(0,A.lE)(t);const e=[];let r=0;for(;r<t.length;){const o=t[r++];if(o>>7==0){e.push(o);continue}let i=null,n=null;if(192==(224&o))i=1,n=127;else if(224==(240&o))i=2,n=2047;else{if(240!=(248&o)){r+=a(128==(192&o)?C.UNEXPECTED_CONTINUE:C.BAD_PREFIX,r-1,t,e);continue}i=3,n=65535}if(r-1+i>=t.length){r+=a(C.OVERRUN,r-1,t,e);continue}let s=o&(1<<8-i-1)-1;for(let o=0;o<i;o++){let o=t[r];if(128!=(192&o)){r+=a(C.MISSING_CONTINUE,r,t,e),s=null;break}s=s<<6|63&o,r++}null!==s&&(s>1114111?r+=a(C.OUT_OF_RANGE,r-1-i,t,e,s):s>=55296&&s<=57343?r+=a(C.UTF16_SURROGATE,r-1-i,t,e,s):s<=n?r+=a(C.OVERLONG,r-1-i,t,e,s):e.push(s))}return e}function F(t,a=B.current){a!=B.current&&(k.checkNormalize(),t=t.normalize(a));let e=[];for(let a=0;a<t.length;a++){const r=t.charCodeAt(a);if(r<128)e.push(r);else if(r<2048)e.push(r>>6|192),e.push(63&r|128);else if(55296==(64512&r)){a++;const o=t.charCodeAt(a);if(a>=t.length||56320!=(64512&o))throw new Error("invalid utf-8 string");const i=65536+((1023&r)<<10)+(1023&o);e.push(i>>18|240),e.push(i>>12&63|128),e.push(i>>6&63|128),e.push(63&i|128)}else e.push(r>>12|224),e.push(r>>6&63|128),e.push(63&r|128)}return(0,A.lE)(e)}function S(t){return t.map((t=>t<=65535?String.fromCharCode(t):(t-=65536,String.fromCharCode(55296+(t>>10&1023),56320+(1023&t))))).join("")}function P(t,a){return S(N(t,a))}function O(t,a=B.current){return N(F(t,a))}function R(t){return(0,M.w)(F(t))}const I=new r.Yd(_),T=new Uint8Array(32);T.fill(0);const q=b.O$.from(-1),G=b.O$.from(0),L=b.O$.from(1),z=b.O$.from("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"),D=(0,A.$m)(L.toHexString(),32),U=(0,A.$m)(G.toHexString(),32),j={name:"string",version:"string",chainId:"uint256",verifyingContract:"address",salt:"bytes32"},$=["name","version","chainId","verifyingContract","salt"];function Y(t){return function(a){return"string"!=typeof a&&I.throwArgumentError(`invalid domain value for ${JSON.stringify(t)}`,`domain.${t}`,a),a}}const H={name:Y("name"),version:Y("version"),chainId:function(t){try{return b.O$.from(t).toString()}catch(t){}return I.throwArgumentError('invalid domain value for "chainId"',"domain.chainId",t)},verifyingContract:function(t){try{return(0,w.Kn)(t).toLowerCase()}catch(t){}return I.throwArgumentError('invalid domain value "verifyingContract"',"domain.verifyingContract",t)},salt:function(t){try{const a=(0,A.lE)(t);if(32!==a.length)throw new Error("bad length");return(0,A.Dv)(a)}catch(t){}return I.throwArgumentError('invalid domain value "salt"',"domain.salt",t)}};function W(t){{const a=t.match(/^(u?)int(\d*)$/);if(a){const e=""===a[1],r=parseInt(a[2]||"256");(r%8!=0||r>256||a[2]&&a[2]!==String(r))&&I.throwArgumentError("invalid numeric width","type",t);const o=z.mask(e?r-1:r),i=e?o.add(L).mul(q):G;return function(a){const e=b.O$.from(a);return(e.lt(i)||e.gt(o))&&I.throwArgumentError(`value out-of-bounds for ${t}`,"value",a),(0,A.$m)(e.toTwos(256).toHexString(),32)}}}{const a=t.match(/^bytes(\d+)$/);if(a){const e=parseInt(a[1]);return(0===e||e>32||a[1]!==String(e))&&I.throwArgumentError("invalid bytes width","type",t),function(a){return(0,A.lE)(a).length!==e&&I.throwArgumentError(`invalid length for ${t}`,"value",a),function(t){const a=(0,A.lE)(t),e=a.length%32;return e?(0,A.xs)([a,T.slice(e)]):(0,A.Dv)(a)}(a)}}}switch(t){case"address":return function(t){return(0,A.$m)((0,w.Kn)(t),32)};case"bool":return function(t){return t?D:U};case"bytes":return function(t){return(0,M.w)(t)};case"string":return function(t){return R(t)}}return null}function V(t,a){return`${t}(${a.map((({name:t,type:a})=>a+" "+t)).join(",")})`}class Z{constructor(t){i(this,"types",Object.freeze(f(t))),i(this,"_encoderCache",{}),i(this,"_types",{});const a={},e={},r={};Object.keys(t).forEach((t=>{a[t]={},e[t]=[],r[t]={}}));for(const r in t){const o={};t[r].forEach((i=>{o[i.name]&&I.throwArgumentError(`duplicate variable name ${JSON.stringify(i.name)} in ${JSON.stringify(r)}`,"types",t),o[i.name]=!0;const n=i.type.match(/^([^\x5b]*)(\x5b|$)/)[1];n===r&&I.throwArgumentError(`circular type reference to ${JSON.stringify(n)}`,"types",t),W(n)||(e[n]||I.throwArgumentError(`unknown type ${JSON.stringify(n)}`,"types",t),e[n].push(r),a[r][n]=!0)}))}const o=Object.keys(e).filter((t=>0===e[t].length));0===o.length?I.throwArgumentError("missing primary type","types",t):o.length>1&&I.throwArgumentError(`ambiguous primary types or unused types: ${o.map((t=>JSON.stringify(t))).join(", ")}`,"types",t),i(this,"primaryType",o[0]),function o(i,n){n[i]&&I.throwArgumentError(`circular type reference to ${JSON.stringify(i)}`,"types",t),n[i]=!0,Object.keys(a[i]).forEach((t=>{e[t]&&(o(t,n),Object.keys(n).forEach((a=>{r[a][t]=!0})))})),delete n[i]}(this.primaryType,{});for(const a in r){const e=Object.keys(r[a]);e.sort(),this._types[a]=V(a,t[a])+e.map((a=>V(a,t[a]))).join("")}}getEncoder(t){let a=this._encoderCache[t];return a||(a=this._encoderCache[t]=this._getEncoder(t)),a}_getEncoder(t){{const a=W(t);if(a)return a}const a=t.match(/^(.*)(\x5b(\d*)\x5d)$/);if(a){const t=a[1],e=this.getEncoder(t),r=parseInt(a[3]);return a=>{r>=0&&a.length!==r&&I.throwArgumentError("array length mismatch; expected length ${ arrayLength }","value",a);let o=a.map(e);return this._types[t]&&(o=o.map(M.w)),(0,M.w)((0,A.xs)(o))}}const e=this.types[t];if(e){const a=R(this._types[t]);return t=>{const r=e.map((({name:a,type:e})=>{const r=this.getEncoder(e)(t[a]);return this._types[e]?(0,M.w)(r):r}));return r.unshift(a),(0,A.xs)(r)}}return I.throwArgumentError(`unknown type: ${t}`,"type",t)}encodeType(t){const a=this._types[t];return a||I.throwArgumentError(`unknown type: ${JSON.stringify(t)}`,"name",t),a}encodeData(t,a){return this.getEncoder(t)(a)}hashStruct(t,a){return(0,M.w)(this.encodeData(t,a))}encode(t){return this.encodeData(this.primaryType,t)}hash(t){return this.hashStruct(this.primaryType,t)}_visit(t,a,e){if(W(t))return e(t,a);const r=t.match(/^(.*)(\x5b(\d*)\x5d)$/);if(r){const t=r[1],o=parseInt(r[3]);return o>=0&&a.length!==o&&I.throwArgumentError("array length mismatch; expected length ${ arrayLength }","value",a),a.map((a=>this._visit(t,a,e)))}const o=this.types[t];return o?o.reduce(((t,{name:r,type:o})=>(t[r]=this._visit(o,a[r],e),t)),{}):I.throwArgumentError(`unknown type: ${t}`,"type",t)}visit(t,a){return this._visit(this.primaryType,t,a)}static from(t){return new Z(t)}static getPrimaryType(t){return Z.from(t).primaryType}static hashStruct(t,a,e){return Z.from(a).hashStruct(t,e)}static hashDomain(t){const a=[];for(const e in t){const r=j[e];r||I.throwArgumentError(`invalid typed-data domain key: ${JSON.stringify(e)}`,"domain",t),a.push({name:e,type:r})}return a.sort(((t,a)=>$.indexOf(t.name)-$.indexOf(a.name))),Z.hashStruct("EIP712Domain",{EIP712Domain:a},t)}static encode(t,a,e){return(0,A.xs)(["0x1901",Z.hashDomain(t),Z.from(a).hash(e)])}static hash(t,a,e){return(0,M.w)(Z.encode(t,a,e))}static resolveNames(t,a,e,r){return o=this,i=void 0,s=function*(){t=d(t);const o={};t.verifyingContract&&!(0,A.A7)(t.verifyingContract,20)&&(o[t.verifyingContract]="0x");const i=Z.from(a);i.visit(e,((t,a)=>("address"!==t||(0,A.A7)(a,20)||(o[a]="0x"),a)));for(const t in o)o[t]=yield r(t);return t.verifyingContract&&o[t.verifyingContract]&&(t.verifyingContract=o[t.verifyingContract]),e=i.visit(e,((t,a)=>"address"===t&&o[a]?o[a]:a)),{domain:t,value:e}},new((n=void 0)||(n=Promise))((function(t,a){function e(t){try{d(s.next(t))}catch(t){a(t)}}function r(t){try{d(s.throw(t))}catch(t){a(t)}}function d(a){var o;a.done?t(a.value):(o=a.value,o instanceof n?o:new n((function(t){t(o)}))).then(e,r)}d((s=s.apply(o,i||[])).next())}));var o,i,n,s}static getPayload(t,a,e){Z.hashDomain(t);const r={},o=[];$.forEach((a=>{const e=t[a];null!=e&&(r[a]=H[a](e),o.push({name:a,type:j[a]}))}));const i=Z.from(a),n=d(a);return n.EIP712Domain?I.throwArgumentError("types must not contain EIP712Domain type","types.EIP712Domain",a):n.EIP712Domain=o,i.encode(e),{types:n,domain:r,primaryType:i.primaryType,message:i.visit(e,((t,a)=>{if(t.match(/^bytes(\d*)/))return(0,A.Dv)((0,A.lE)(a));if(t.match(/^u?int/))return b.O$.from(a).toString();switch(t){case"address":return a.toLowerCase();case"bool":return!!a;case"string":return"string"!=typeof a&&I.throwArgumentError("invalid string","value",a),a}return I.throwArgumentError("unsupported type","type",t)}))}}}const K=b.O$.from(0);var J=e(1843),X=e(2500),Q=e.n(X),tt=e(3715),at=e.n(tt);function et(t,a,e){return e={path:a,exports:{},require:function(t,a){return function(){throw new Error("Dynamic requires are not currently supported by @rollup/plugin-commonjs")}(null==a&&e.path)}},t(e,e.exports),e.exports}"undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:void 0!==e.g?e.g:"undefined"!=typeof self&&self;var rt=ot;function ot(t,a){if(!t)throw new Error(a||"Assertion failed")}ot.equal=function(t,a,e){if(t!=a)throw new Error(e||"Assertion failed: "+t+" != "+a)};var it=et((function(t,a){var e=a;function r(t){return 1===t.length?"0"+t:t}function o(t){for(var a="",e=0;e<t.length;e++)a+=r(t[e].toString(16));return a}e.toArray=function(t,a){if(Array.isArray(t))return t.slice();if(!t)return[];var e=[];if("string"!=typeof t){for(var r=0;r<t.length;r++)e[r]=0|t[r];return e}if("hex"===a)for((t=t.replace(/[^a-z0-9]+/gi,"")).length%2!=0&&(t="0"+t),r=0;r<t.length;r+=2)e.push(parseInt(t[r]+t[r+1],16));else for(r=0;r<t.length;r++){var o=t.charCodeAt(r),i=o>>8,n=255&o;i?e.push(i,n):e.push(n)}return e},e.zero2=r,e.toHex=o,e.encode=function(t,a){return"hex"===a?o(t):t}})),nt=et((function(t,a){var e=a;e.assert=rt,e.toArray=it.toArray,e.zero2=it.zero2,e.toHex=it.toHex,e.encode=it.encode,e.getNAF=function(t,a,e){var r=new Array(Math.max(t.bitLength(),e)+1);r.fill(0);for(var o=1<<a+1,i=t.clone(),n=0;n<r.length;n++){var s,d=i.andln(o-1);i.isOdd()?(s=d>(o>>1)-1?(o>>1)-d:d,i.isubn(s)):s=0,r[n]=s,i.iushrn(1)}return r},e.getJSF=function(t,a){var e=[[],[]];t=t.clone(),a=a.clone();for(var r,o=0,i=0;t.cmpn(-o)>0||a.cmpn(-i)>0;){var n,s,d=t.andln(3)+o&3,u=a.andln(3)+i&3;3===d&&(d=-1),3===u&&(u=-1),n=0==(1&d)?0:3!=(r=t.andln(7)+o&7)&&5!==r||2!==u?d:-d,e[0].push(n),s=0==(1&u)?0:3!=(r=a.andln(7)+i&7)&&5!==r||2!==d?u:-u,e[1].push(s),2*o===n+1&&(o=1-o),2*i===s+1&&(i=1-i),t.iushrn(1),a.iushrn(1)}return e},e.cachedProperty=function(t,a,e){var r="_"+a;t.prototype[a]=function(){return void 0!==this[r]?this[r]:this[r]=e.call(this)}},e.parseBytes=function(t){return"string"==typeof t?e.toArray(t,"hex"):t},e.intFromLE=function(t){return new(Q())(t,"hex","le")}})),st=nt.getNAF,dt=nt.getJSF,ut=nt.assert;function lt(t,a){this.type=t,this.p=new(Q())(a.p,16),this.red=a.prime?Q().red(a.prime):Q().mont(this.p),this.zero=new(Q())(0).toRed(this.red),this.one=new(Q())(1).toRed(this.red),this.two=new(Q())(2).toRed(this.red),this.n=a.n&&new(Q())(a.n,16),this.g=a.g&&this.pointFromJSON(a.g,a.gRed),this._wnafT1=new Array(4),this._wnafT2=new Array(4),this._wnafT3=new Array(4),this._wnafT4=new Array(4),this._bitLength=this.n?this.n.bitLength():0;var e=this.n&&this.p.div(this.n);!e||e.cmpn(100)>0?this.redN=null:(this._maxwellTrick=!0,this.redN=this.n.toRed(this.red))}var ht=lt;function ft(t,a){this.curve=t,this.type=a,this.precomputed=null}lt.prototype.point=function(){throw new Error("Not implemented")},lt.prototype.validate=function(){throw new Error("Not implemented")},lt.prototype._fixedNafMul=function(t,a){ut(t.precomputed);var e=t._getDoubles(),r=st(a,1,this._bitLength),o=(1<<e.step+1)-(e.step%2==0?2:1);o/=3;var i,n,s=[];for(i=0;i<r.length;i+=e.step){n=0;for(var d=i+e.step-1;d>=i;d--)n=(n<<1)+r[d];s.push(n)}for(var u=this.jpoint(null,null,null),l=this.jpoint(null,null,null),h=o;h>0;h--){for(i=0;i<s.length;i++)(n=s[i])===h?l=l.mixedAdd(e.points[i]):n===-h&&(l=l.mixedAdd(e.points[i].neg()));u=u.add(l)}return u.toP()},lt.prototype._wnafMul=function(t,a){var e=4,r=t._getNAFPoints(e);e=r.wnd;for(var o=r.points,i=st(a,e,this._bitLength),n=this.jpoint(null,null,null),s=i.length-1;s>=0;s--){for(var d=0;s>=0&&0===i[s];s--)d++;if(s>=0&&d++,n=n.dblp(d),s<0)break;var u=i[s];ut(0!==u),n="affine"===t.type?u>0?n.mixedAdd(o[u-1>>1]):n.mixedAdd(o[-u-1>>1].neg()):u>0?n.add(o[u-1>>1]):n.add(o[-u-1>>1].neg())}return"affine"===t.type?n.toP():n},lt.prototype._wnafMulAdd=function(t,a,e,r,o){var i,n,s,d=this._wnafT1,u=this._wnafT2,l=this._wnafT3,h=0;for(i=0;i<r;i++){var f=(s=a[i])._getNAFPoints(t);d[i]=f.wnd,u[i]=f.points}for(i=r-1;i>=1;i-=2){var c=i-1,m=i;if(1===d[c]&&1===d[m]){var p=[a[c],null,null,a[m]];0===a[c].y.cmp(a[m].y)?(p[1]=a[c].add(a[m]),p[2]=a[c].toJ().mixedAdd(a[m].neg())):0===a[c].y.cmp(a[m].y.redNeg())?(p[1]=a[c].toJ().mixedAdd(a[m]),p[2]=a[c].add(a[m].neg())):(p[1]=a[c].toJ().mixedAdd(a[m]),p[2]=a[c].toJ().mixedAdd(a[m].neg()));var y=[-3,-1,-5,-7,0,7,5,1,3],g=dt(e[c],e[m]);for(h=Math.max(g[0].length,h),l[c]=new Array(h),l[m]=new Array(h),n=0;n<h;n++){var v=0|g[0][n],b=0|g[1][n];l[c][n]=y[3*(v+1)+(b+1)],l[m][n]=0,u[c]=p}}else l[c]=st(e[c],d[c],this._bitLength),l[m]=st(e[m],d[m],this._bitLength),h=Math.max(l[c].length,h),h=Math.max(l[m].length,h)}var A=this.jpoint(null,null,null),w=this._wnafT4;for(i=h;i>=0;i--){for(var M=0;i>=0;){var _=!0;for(n=0;n<r;n++)w[n]=0|l[n][i],0!==w[n]&&(_=!1);if(!_)break;M++,i--}if(i>=0&&M++,A=A.dblp(M),i<0)break;for(n=0;n<r;n++){var k=w[n];0!==k&&(k>0?s=u[n][k-1>>1]:k<0&&(s=u[n][-k-1>>1].neg()),A="affine"===s.type?A.mixedAdd(s):A.add(s))}}for(i=0;i<r;i++)u[i]=null;return o?A:A.toP()},lt.BasePoint=ft,ft.prototype.eq=function(){throw new Error("Not implemented")},ft.prototype.validate=function(){return this.curve.validate(this)},lt.prototype.decodePoint=function(t,a){t=nt.toArray(t,a);var e=this.p.byteLength();if((4===t[0]||6===t[0]||7===t[0])&&t.length-1==2*e)return 6===t[0]?ut(t[t.length-1]%2==0):7===t[0]&&ut(t[t.length-1]%2==1),this.point(t.slice(1,1+e),t.slice(1+e,1+2*e));if((2===t[0]||3===t[0])&&t.length-1===e)return this.pointFromX(t.slice(1,1+e),3===t[0]);throw new Error("Unknown point format")},ft.prototype.encodeCompressed=function(t){return this.encode(t,!0)},ft.prototype._encode=function(t){var a=this.curve.p.byteLength(),e=this.getX().toArray("be",a);return t?[this.getY().isEven()?2:3].concat(e):[4].concat(e,this.getY().toArray("be",a))},ft.prototype.encode=function(t,a){return nt.encode(this._encode(a),t)},ft.prototype.precompute=function(t){if(this.precomputed)return this;var a={doubles:null,naf:null,beta:null};return a.naf=this._getNAFPoints(8),a.doubles=this._getDoubles(4,t),a.beta=this._getBeta(),this.precomputed=a,this},ft.prototype._hasDoubles=function(t){if(!this.precomputed)return!1;var a=this.precomputed.doubles;return!!a&&a.points.length>=Math.ceil((t.bitLength()+1)/a.step)},ft.prototype._getDoubles=function(t,a){if(this.precomputed&&this.precomputed.doubles)return this.precomputed.doubles;for(var e=[this],r=this,o=0;o<a;o+=t){for(var i=0;i<t;i++)r=r.dbl();e.push(r)}return{step:t,points:e}},ft.prototype._getNAFPoints=function(t){if(this.precomputed&&this.precomputed.naf)return this.precomputed.naf;for(var a=[this],e=(1<<t)-1,r=1===e?null:this.dbl(),o=1;o<e;o++)a[o]=a[o-1].add(r);return{wnd:t,points:a}},ft.prototype._getBeta=function(){return null},ft.prototype.dblp=function(t){for(var a=this,e=0;e<t;e++)a=a.dbl();return a};var ct=et((function(t){"function"==typeof Object.create?t.exports=function(t,a){a&&(t.super_=a,t.prototype=Object.create(a.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}))}:t.exports=function(t,a){if(a){t.super_=a;var e=function(){};e.prototype=a.prototype,t.prototype=new e,t.prototype.constructor=t}}})),mt=nt.assert;function pt(t){ht.call(this,"short",t),this.a=new(Q())(t.a,16).toRed(this.red),this.b=new(Q())(t.b,16).toRed(this.red),this.tinv=this.two.redInvm(),this.zeroA=0===this.a.fromRed().cmpn(0),this.threeA=0===this.a.fromRed().sub(this.p).cmpn(-3),this.endo=this._getEndomorphism(t),this._endoWnafT1=new Array(4),this._endoWnafT2=new Array(4)}ct(pt,ht);var yt=pt;function gt(t,a,e,r){ht.BasePoint.call(this,t,"affine"),null===a&&null===e?(this.x=null,this.y=null,this.inf=!0):(this.x=new(Q())(a,16),this.y=new(Q())(e,16),r&&(this.x.forceRed(this.curve.red),this.y.forceRed(this.curve.red)),this.x.red||(this.x=this.x.toRed(this.curve.red)),this.y.red||(this.y=this.y.toRed(this.curve.red)),this.inf=!1)}function vt(t,a,e,r){ht.BasePoint.call(this,t,"jacobian"),null===a&&null===e&&null===r?(this.x=this.curve.one,this.y=this.curve.one,this.z=new(Q())(0)):(this.x=new(Q())(a,16),this.y=new(Q())(e,16),this.z=new(Q())(r,16)),this.x.red||(this.x=this.x.toRed(this.curve.red)),this.y.red||(this.y=this.y.toRed(this.curve.red)),this.z.red||(this.z=this.z.toRed(this.curve.red)),this.zOne=this.z===this.curve.one}pt.prototype._getEndomorphism=function(t){if(this.zeroA&&this.g&&this.n&&1===this.p.modn(3)){var a,e;if(t.beta)a=new(Q())(t.beta,16).toRed(this.red);else{var r=this._getEndoRoots(this.p);a=(a=r[0].cmp(r[1])<0?r[0]:r[1]).toRed(this.red)}if(t.lambda)e=new(Q())(t.lambda,16);else{var o=this._getEndoRoots(this.n);0===this.g.mul(o[0]).x.cmp(this.g.x.redMul(a))?e=o[0]:(e=o[1],mt(0===this.g.mul(e).x.cmp(this.g.x.redMul(a))))}return{beta:a,lambda:e,basis:t.basis?t.basis.map((function(t){return{a:new(Q())(t.a,16),b:new(Q())(t.b,16)}})):this._getEndoBasis(e)}}},pt.prototype._getEndoRoots=function(t){var a=t===this.p?this.red:Q().mont(t),e=new(Q())(2).toRed(a).redInvm(),r=e.redNeg(),o=new(Q())(3).toRed(a).redNeg().redSqrt().redMul(e);return[r.redAdd(o).fromRed(),r.redSub(o).fromRed()]},pt.prototype._getEndoBasis=function(t){for(var a,e,r,o,i,n,s,d,u,l=this.n.ushrn(Math.floor(this.n.bitLength()/2)),h=t,f=this.n.clone(),c=new(Q())(1),m=new(Q())(0),p=new(Q())(0),y=new(Q())(1),g=0;0!==h.cmpn(0);){var v=f.div(h);d=f.sub(v.mul(h)),u=p.sub(v.mul(c));var b=y.sub(v.mul(m));if(!r&&d.cmp(l)<0)a=s.neg(),e=c,r=d.neg(),o=u;else if(r&&2==++g)break;s=d,f=h,h=d,p=c,c=u,y=m,m=b}i=d.neg(),n=u;var A=r.sqr().add(o.sqr());return i.sqr().add(n.sqr()).cmp(A)>=0&&(i=a,n=e),r.negative&&(r=r.neg(),o=o.neg()),i.negative&&(i=i.neg(),n=n.neg()),[{a:r,b:o},{a:i,b:n}]},pt.prototype._endoSplit=function(t){var a=this.endo.basis,e=a[0],r=a[1],o=r.b.mul(t).divRound(this.n),i=e.b.neg().mul(t).divRound(this.n),n=o.mul(e.a),s=i.mul(r.a),d=o.mul(e.b),u=i.mul(r.b);return{k1:t.sub(n).sub(s),k2:d.add(u).neg()}},pt.prototype.pointFromX=function(t,a){(t=new(Q())(t,16)).red||(t=t.toRed(this.red));var e=t.redSqr().redMul(t).redIAdd(t.redMul(this.a)).redIAdd(this.b),r=e.redSqrt();if(0!==r.redSqr().redSub(e).cmp(this.zero))throw new Error("invalid point");var o=r.fromRed().isOdd();return(a&&!o||!a&&o)&&(r=r.redNeg()),this.point(t,r)},pt.prototype.validate=function(t){if(t.inf)return!0;var a=t.x,e=t.y,r=this.a.redMul(a),o=a.redSqr().redMul(a).redIAdd(r).redIAdd(this.b);return 0===e.redSqr().redISub(o).cmpn(0)},pt.prototype._endoWnafMulAdd=function(t,a,e){for(var r=this._endoWnafT1,o=this._endoWnafT2,i=0;i<t.length;i++){var n=this._endoSplit(a[i]),s=t[i],d=s._getBeta();n.k1.negative&&(n.k1.ineg(),s=s.neg(!0)),n.k2.negative&&(n.k2.ineg(),d=d.neg(!0)),r[2*i]=s,r[2*i+1]=d,o[2*i]=n.k1,o[2*i+1]=n.k2}for(var u=this._wnafMulAdd(1,r,o,2*i,e),l=0;l<2*i;l++)r[l]=null,o[l]=null;return u},ct(gt,ht.BasePoint),pt.prototype.point=function(t,a,e){return new gt(this,t,a,e)},pt.prototype.pointFromJSON=function(t,a){return gt.fromJSON(this,t,a)},gt.prototype._getBeta=function(){if(this.curve.endo){var t=this.precomputed;if(t&&t.beta)return t.beta;var a=this.curve.point(this.x.redMul(this.curve.endo.beta),this.y);if(t){var e=this.curve,r=function(t){return e.point(t.x.redMul(e.endo.beta),t.y)};t.beta=a,a.precomputed={beta:null,naf:t.naf&&{wnd:t.naf.wnd,points:t.naf.points.map(r)},doubles:t.doubles&&{step:t.doubles.step,points:t.doubles.points.map(r)}}}return a}},gt.prototype.toJSON=function(){return this.precomputed?[this.x,this.y,this.precomputed&&{doubles:this.precomputed.doubles&&{step:this.precomputed.doubles.step,points:this.precomputed.doubles.points.slice(1)},naf:this.precomputed.naf&&{wnd:this.precomputed.naf.wnd,points:this.precomputed.naf.points.slice(1)}}]:[this.x,this.y]},gt.fromJSON=function(t,a,e){"string"==typeof a&&(a=JSON.parse(a));var r=t.point(a[0],a[1],e);if(!a[2])return r;function o(a){return t.point(a[0],a[1],e)}var i=a[2];return r.precomputed={beta:null,doubles:i.doubles&&{step:i.doubles.step,points:[r].concat(i.doubles.points.map(o))},naf:i.naf&&{wnd:i.naf.wnd,points:[r].concat(i.naf.points.map(o))}},r},gt.prototype.inspect=function(){return this.isInfinity()?"<EC Point Infinity>":"<EC Point x: "+this.x.fromRed().toString(16,2)+" y: "+this.y.fromRed().toString(16,2)+">"},gt.prototype.isInfinity=function(){return this.inf},gt.prototype.add=function(t){if(this.inf)return t;if(t.inf)return this;if(this.eq(t))return this.dbl();if(this.neg().eq(t))return this.curve.point(null,null);if(0===this.x.cmp(t.x))return this.curve.point(null,null);var a=this.y.redSub(t.y);0!==a.cmpn(0)&&(a=a.redMul(this.x.redSub(t.x).redInvm()));var e=a.redSqr().redISub(this.x).redISub(t.x),r=a.redMul(this.x.redSub(e)).redISub(this.y);return this.curve.point(e,r)},gt.prototype.dbl=function(){if(this.inf)return this;var t=this.y.redAdd(this.y);if(0===t.cmpn(0))return this.curve.point(null,null);var a=this.curve.a,e=this.x.redSqr(),r=t.redInvm(),o=e.redAdd(e).redIAdd(e).redIAdd(a).redMul(r),i=o.redSqr().redISub(this.x.redAdd(this.x)),n=o.redMul(this.x.redSub(i)).redISub(this.y);return this.curve.point(i,n)},gt.prototype.getX=function(){return this.x.fromRed()},gt.prototype.getY=function(){return this.y.fromRed()},gt.prototype.mul=function(t){return t=new(Q())(t,16),this.isInfinity()?this:this._hasDoubles(t)?this.curve._fixedNafMul(this,t):this.curve.endo?this.curve._endoWnafMulAdd([this],[t]):this.curve._wnafMul(this,t)},gt.prototype.mulAdd=function(t,a,e){var r=[this,a],o=[t,e];return this.curve.endo?this.curve._endoWnafMulAdd(r,o):this.curve._wnafMulAdd(1,r,o,2)},gt.prototype.jmulAdd=function(t,a,e){var r=[this,a],o=[t,e];return this.curve.endo?this.curve._endoWnafMulAdd(r,o,!0):this.curve._wnafMulAdd(1,r,o,2,!0)},gt.prototype.eq=function(t){return this===t||this.inf===t.inf&&(this.inf||0===this.x.cmp(t.x)&&0===this.y.cmp(t.y))},gt.prototype.neg=function(t){if(this.inf)return this;var a=this.curve.point(this.x,this.y.redNeg());if(t&&this.precomputed){var e=this.precomputed,r=function(t){return t.neg()};a.precomputed={naf:e.naf&&{wnd:e.naf.wnd,points:e.naf.points.map(r)},doubles:e.doubles&&{step:e.doubles.step,points:e.doubles.points.map(r)}}}return a},gt.prototype.toJ=function(){return this.inf?this.curve.jpoint(null,null,null):this.curve.jpoint(this.x,this.y,this.curve.one)},ct(vt,ht.BasePoint),pt.prototype.jpoint=function(t,a,e){return new vt(this,t,a,e)},vt.prototype.toP=function(){if(this.isInfinity())return this.curve.point(null,null);var t=this.z.redInvm(),a=t.redSqr(),e=this.x.redMul(a),r=this.y.redMul(a).redMul(t);return this.curve.point(e,r)},vt.prototype.neg=function(){return this.curve.jpoint(this.x,this.y.redNeg(),this.z)},vt.prototype.add=function(t){if(this.isInfinity())return t;if(t.isInfinity())return this;var a=t.z.redSqr(),e=this.z.redSqr(),r=this.x.redMul(a),o=t.x.redMul(e),i=this.y.redMul(a.redMul(t.z)),n=t.y.redMul(e.redMul(this.z)),s=r.redSub(o),d=i.redSub(n);if(0===s.cmpn(0))return 0!==d.cmpn(0)?this.curve.jpoint(null,null,null):this.dbl();var u=s.redSqr(),l=u.redMul(s),h=r.redMul(u),f=d.redSqr().redIAdd(l).redISub(h).redISub(h),c=d.redMul(h.redISub(f)).redISub(i.redMul(l)),m=this.z.redMul(t.z).redMul(s);return this.curve.jpoint(f,c,m)},vt.prototype.mixedAdd=function(t){if(this.isInfinity())return t.toJ();if(t.isInfinity())return this;var a=this.z.redSqr(),e=this.x,r=t.x.redMul(a),o=this.y,i=t.y.redMul(a).redMul(this.z),n=e.redSub(r),s=o.redSub(i);if(0===n.cmpn(0))return 0!==s.cmpn(0)?this.curve.jpoint(null,null,null):this.dbl();var d=n.redSqr(),u=d.redMul(n),l=e.redMul(d),h=s.redSqr().redIAdd(u).redISub(l).redISub(l),f=s.redMul(l.redISub(h)).redISub(o.redMul(u)),c=this.z.redMul(n);return this.curve.jpoint(h,f,c)},vt.prototype.dblp=function(t){if(0===t)return this;if(this.isInfinity())return this;if(!t)return this.dbl();var a;if(this.curve.zeroA||this.curve.threeA){var e=this;for(a=0;a<t;a++)e=e.dbl();return e}var r=this.curve.a,o=this.curve.tinv,i=this.x,n=this.y,s=this.z,d=s.redSqr().redSqr(),u=n.redAdd(n);for(a=0;a<t;a++){var l=i.redSqr(),h=u.redSqr(),f=h.redSqr(),c=l.redAdd(l).redIAdd(l).redIAdd(r.redMul(d)),m=i.redMul(h),p=c.redSqr().redISub(m.redAdd(m)),y=m.redISub(p),g=c.redMul(y);g=g.redIAdd(g).redISub(f);var v=u.redMul(s);a+1<t&&(d=d.redMul(f)),i=p,s=v,u=g}return this.curve.jpoint(i,u.redMul(o),s)},vt.prototype.dbl=function(){return this.isInfinity()?this:this.curve.zeroA?this._zeroDbl():this.curve.threeA?this._threeDbl():this._dbl()},vt.prototype._zeroDbl=function(){var t,a,e;if(this.zOne){var r=this.x.redSqr(),o=this.y.redSqr(),i=o.redSqr(),n=this.x.redAdd(o).redSqr().redISub(r).redISub(i);n=n.redIAdd(n);var s=r.redAdd(r).redIAdd(r),d=s.redSqr().redISub(n).redISub(n),u=i.redIAdd(i);u=(u=u.redIAdd(u)).redIAdd(u),t=d,a=s.redMul(n.redISub(d)).redISub(u),e=this.y.redAdd(this.y)}else{var l=this.x.redSqr(),h=this.y.redSqr(),f=h.redSqr(),c=this.x.redAdd(h).redSqr().redISub(l).redISub(f);c=c.redIAdd(c);var m=l.redAdd(l).redIAdd(l),p=m.redSqr(),y=f.redIAdd(f);y=(y=y.redIAdd(y)).redIAdd(y),t=p.redISub(c).redISub(c),a=m.redMul(c.redISub(t)).redISub(y),e=(e=this.y.redMul(this.z)).redIAdd(e)}return this.curve.jpoint(t,a,e)},vt.prototype._threeDbl=function(){var t,a,e;if(this.zOne){var r=this.x.redSqr(),o=this.y.redSqr(),i=o.redSqr(),n=this.x.redAdd(o).redSqr().redISub(r).redISub(i);n=n.redIAdd(n);var s=r.redAdd(r).redIAdd(r).redIAdd(this.curve.a),d=s.redSqr().redISub(n).redISub(n);t=d;var u=i.redIAdd(i);u=(u=u.redIAdd(u)).redIAdd(u),a=s.redMul(n.redISub(d)).redISub(u),e=this.y.redAdd(this.y)}else{var l=this.z.redSqr(),h=this.y.redSqr(),f=this.x.redMul(h),c=this.x.redSub(l).redMul(this.x.redAdd(l));c=c.redAdd(c).redIAdd(c);var m=f.redIAdd(f),p=(m=m.redIAdd(m)).redAdd(m);t=c.redSqr().redISub(p),e=this.y.redAdd(this.z).redSqr().redISub(h).redISub(l);var y=h.redSqr();y=(y=(y=y.redIAdd(y)).redIAdd(y)).redIAdd(y),a=c.redMul(m.redISub(t)).redISub(y)}return this.curve.jpoint(t,a,e)},vt.prototype._dbl=function(){var t=this.curve.a,a=this.x,e=this.y,r=this.z,o=r.redSqr().redSqr(),i=a.redSqr(),n=e.redSqr(),s=i.redAdd(i).redIAdd(i).redIAdd(t.redMul(o)),d=a.redAdd(a),u=(d=d.redIAdd(d)).redMul(n),l=s.redSqr().redISub(u.redAdd(u)),h=u.redISub(l),f=n.redSqr();f=(f=(f=f.redIAdd(f)).redIAdd(f)).redIAdd(f);var c=s.redMul(h).redISub(f),m=e.redAdd(e).redMul(r);return this.curve.jpoint(l,c,m)},vt.prototype.trpl=function(){if(!this.curve.zeroA)return this.dbl().add(this);var t=this.x.redSqr(),a=this.y.redSqr(),e=this.z.redSqr(),r=a.redSqr(),o=t.redAdd(t).redIAdd(t),i=o.redSqr(),n=this.x.redAdd(a).redSqr().redISub(t).redISub(r),s=(n=(n=(n=n.redIAdd(n)).redAdd(n).redIAdd(n)).redISub(i)).redSqr(),d=r.redIAdd(r);d=(d=(d=d.redIAdd(d)).redIAdd(d)).redIAdd(d);var u=o.redIAdd(n).redSqr().redISub(i).redISub(s).redISub(d),l=a.redMul(u);l=(l=l.redIAdd(l)).redIAdd(l);var h=this.x.redMul(s).redISub(l);h=(h=h.redIAdd(h)).redIAdd(h);var f=this.y.redMul(u.redMul(d.redISub(u)).redISub(n.redMul(s)));f=(f=(f=f.redIAdd(f)).redIAdd(f)).redIAdd(f);var c=this.z.redAdd(n).redSqr().redISub(e).redISub(s);return this.curve.jpoint(h,f,c)},vt.prototype.mul=function(t,a){return t=new(Q())(t,a),this.curve._wnafMul(this,t)},vt.prototype.eq=function(t){if("affine"===t.type)return this.eq(t.toJ());if(this===t)return!0;var a=this.z.redSqr(),e=t.z.redSqr();if(0!==this.x.redMul(e).redISub(t.x.redMul(a)).cmpn(0))return!1;var r=a.redMul(this.z),o=e.redMul(t.z);return 0===this.y.redMul(o).redISub(t.y.redMul(r)).cmpn(0)},vt.prototype.eqXToP=function(t){var a=this.z.redSqr(),e=t.toRed(this.curve.red).redMul(a);if(0===this.x.cmp(e))return!0;for(var r=t.clone(),o=this.curve.redN.redMul(a);;){if(r.iadd(this.curve.n),r.cmp(this.curve.p)>=0)return!1;if(e.redIAdd(o),0===this.x.cmp(e))return!0}},vt.prototype.inspect=function(){return this.isInfinity()?"<EC JPoint Infinity>":"<EC JPoint x: "+this.x.toString(16,2)+" y: "+this.y.toString(16,2)+" z: "+this.z.toString(16,2)+">"},vt.prototype.isInfinity=function(){return 0===this.z.cmpn(0)};var bt=et((function(t,a){var e=a;e.base=ht,e.short=yt,e.mont=null,e.edwards=null})),At=et((function(t,a){var e,r=a,o=nt.assert;function i(t){"short"===t.type?this.curve=new bt.short(t):"edwards"===t.type?this.curve=new bt.edwards(t):this.curve=new bt.mont(t),this.g=this.curve.g,this.n=this.curve.n,this.hash=t.hash,o(this.g.validate(),"Invalid curve"),o(this.g.mul(this.n).isInfinity(),"Invalid curve, G*N != O")}function n(t,a){Object.defineProperty(r,t,{configurable:!0,enumerable:!0,get:function(){var e=new i(a);return Object.defineProperty(r,t,{configurable:!0,enumerable:!0,value:e}),e}})}r.PresetCurve=i,n("p192",{type:"short",prime:"p192",p:"ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff",a:"ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc",b:"64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1",n:"ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831",hash:at().sha256,gRed:!1,g:["188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012","07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811"]}),n("p224",{type:"short",prime:"p224",p:"ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001",a:"ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe",b:"b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4",n:"ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d",hash:at().sha256,gRed:!1,g:["b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21","bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34"]}),n("p256",{type:"short",prime:null,p:"ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff",a:"ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc",b:"5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b",n:"ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551",hash:at().sha256,gRed:!1,g:["6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296","4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5"]}),n("p384",{type:"short",prime:null,p:"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 ffffffff",a:"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 fffffffc",b:"b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f 5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef",n:"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 f4372ddf 581a0db2 48b0a77a ecec196a ccc52973",hash:at().sha384,gRed:!1,g:["aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 5502f25d bf55296c 3a545e38 72760ab7","3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 0a60b1ce 1d7e819d 7a431d7c 90ea0e5f"]}),n("p521",{type:"short",prime:null,p:"000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff",a:"000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffc",b:"00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b 99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd 3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00",n:"000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409",hash:at().sha512,gRed:!1,g:["000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66","00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 3fad0761 353c7086 a272c240 88be9476 9fd16650"]}),n("curve25519",{type:"mont",prime:"p25519",p:"7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",a:"76d06",b:"1",n:"1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",hash:at().sha256,gRed:!1,g:["9"]}),n("ed25519",{type:"edwards",prime:"p25519",p:"7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",a:"-1",c:"1",d:"52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3",n:"1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",hash:at().sha256,gRed:!1,g:["216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a","6666666666666666666666666666666666666666666666666666666666666658"]});try{e=null.crash()}catch(t){e=void 0}n("secp256k1",{type:"short",prime:"k256",p:"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f",a:"0",b:"7",n:"ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141",h:"1",hash:at().sha256,beta:"7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee",lambda:"5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72",basis:[{a:"3086d221a7d46bcde86c90e49284eb15",b:"-e4437ed6010e88286f547fa90abfe4c3"},{a:"114ca50f7a8e2f3f657c1108d9d44cfd8",b:"3086d221a7d46bcde86c90e49284eb15"}],gRed:!1,g:["79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798","483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8",e]})}));function wt(t){if(!(this instanceof wt))return new wt(t);this.hash=t.hash,this.predResist=!!t.predResist,this.outLen=this.hash.outSize,this.minEntropy=t.minEntropy||this.hash.hmacStrength,this._reseed=null,this.reseedInterval=null,this.K=null,this.V=null;var a=it.toArray(t.entropy,t.entropyEnc||"hex"),e=it.toArray(t.nonce,t.nonceEnc||"hex"),r=it.toArray(t.pers,t.persEnc||"hex");rt(a.length>=this.minEntropy/8,"Not enough entropy. Minimum is: "+this.minEntropy+" bits"),this._init(a,e,r)}var Mt=wt;wt.prototype._init=function(t,a,e){var r=t.concat(a).concat(e);this.K=new Array(this.outLen/8),this.V=new Array(this.outLen/8);for(var o=0;o<this.V.length;o++)this.K[o]=0,this.V[o]=1;this._update(r),this._reseed=1,this.reseedInterval=281474976710656},wt.prototype._hmac=function(){return new(at().hmac)(this.hash,this.K)},wt.prototype._update=function(t){var a=this._hmac().update(this.V).update([0]);t&&(a=a.update(t)),this.K=a.digest(),this.V=this._hmac().update(this.V).digest(),t&&(this.K=this._hmac().update(this.V).update([1]).update(t).digest(),this.V=this._hmac().update(this.V).digest())},wt.prototype.reseed=function(t,a,e,r){"string"!=typeof a&&(r=e,e=a,a=null),t=it.toArray(t,a),e=it.toArray(e,r),rt(t.length>=this.minEntropy/8,"Not enough entropy. Minimum is: "+this.minEntropy+" bits"),this._update(t.concat(e||[])),this._reseed=1},wt.prototype.generate=function(t,a,e,r){if(this._reseed>this.reseedInterval)throw new Error("Reseed is required");"string"!=typeof a&&(r=e,e=a,a=null),e&&(e=it.toArray(e,r||"hex"),this._update(e));for(var o=[];o.length<t;)this.V=this._hmac().update(this.V).digest(),o=o.concat(this.V);var i=o.slice(0,t);return this._update(e),this._reseed++,it.encode(i,a)};var _t=nt.assert;function kt(t,a){this.ec=t,this.priv=null,this.pub=null,a.priv&&this._importPrivate(a.priv,a.privEnc),a.pub&&this._importPublic(a.pub,a.pubEnc)}var Bt=kt;kt.fromPublic=function(t,a,e){return a instanceof kt?a:new kt(t,{pub:a,pubEnc:e})},kt.fromPrivate=function(t,a,e){return a instanceof kt?a:new kt(t,{priv:a,privEnc:e})},kt.prototype.validate=function(){var t=this.getPublic();return t.isInfinity()?{result:!1,reason:"Invalid public key"}:t.validate()?t.mul(this.ec.curve.n).isInfinity()?{result:!0,reason:null}:{result:!1,reason:"Public key * N != O"}:{result:!1,reason:"Public key is not a point"}},kt.prototype.getPublic=function(t,a){return"string"==typeof t&&(a=t,t=null),this.pub||(this.pub=this.ec.g.mul(this.priv)),a?this.pub.encode(a,t):this.pub},kt.prototype.getPrivate=function(t){return"hex"===t?this.priv.toString(16,2):this.priv},kt.prototype._importPrivate=function(t,a){this.priv=new(Q())(t,a||16),this.priv=this.priv.umod(this.ec.curve.n)},kt.prototype._importPublic=function(t,a){if(t.x||t.y)return"mont"===this.ec.curve.type?_t(t.x,"Need x coordinate"):"short"!==this.ec.curve.type&&"edwards"!==this.ec.curve.type||_t(t.x&&t.y,"Need both x and y coordinate"),void(this.pub=this.ec.curve.point(t.x,t.y));this.pub=this.ec.curve.decodePoint(t,a)},kt.prototype.derive=function(t){return t.validate()||_t(t.validate(),"public point not validated"),t.mul(this.priv).getX()},kt.prototype.sign=function(t,a,e){return this.ec.sign(t,this,a,e)},kt.prototype.verify=function(t,a){return this.ec.verify(t,a,this)},kt.prototype.inspect=function(){return"<Key priv: "+(this.priv&&this.priv.toString(16,2))+" pub: "+(this.pub&&this.pub.inspect())+" >"};var Ct=nt.assert;function Et(t,a){if(t instanceof Et)return t;this._importDER(t,a)||(Ct(t.r&&t.s,"Signature without r or s"),this.r=new(Q())(t.r,16),this.s=new(Q())(t.s,16),void 0===t.recoveryParam?this.recoveryParam=null:this.recoveryParam=t.recoveryParam)}var xt=Et;function Nt(){this.place=0}function Ft(t,a){var e=t[a.place++];if(!(128&e))return e;var r=15&e;if(0===r||r>4)return!1;for(var o=0,i=0,n=a.place;i<r;i++,n++)o<<=8,o|=t[n],o>>>=0;return!(o<=127)&&(a.place=n,o)}function St(t){for(var a=0,e=t.length-1;!t[a]&&!(128&t[a+1])&&a<e;)a++;return 0===a?t:t.slice(a)}function Pt(t,a){if(a<128)t.push(a);else{var e=1+(Math.log(a)/Math.LN2>>>3);for(t.push(128|e);--e;)t.push(a>>>(e<<3)&255);t.push(a)}}Et.prototype._importDER=function(t,a){t=nt.toArray(t,a);var e=new Nt;if(48!==t[e.place++])return!1;var r=Ft(t,e);if(!1===r)return!1;if(r+e.place!==t.length)return!1;if(2!==t[e.place++])return!1;var o=Ft(t,e);if(!1===o)return!1;var i=t.slice(e.place,o+e.place);if(e.place+=o,2!==t[e.place++])return!1;var n=Ft(t,e);if(!1===n)return!1;if(t.length!==n+e.place)return!1;var s=t.slice(e.place,n+e.place);if(0===i[0]){if(!(128&i[1]))return!1;i=i.slice(1)}if(0===s[0]){if(!(128&s[1]))return!1;s=s.slice(1)}return this.r=new(Q())(i),this.s=new(Q())(s),this.recoveryParam=null,!0},Et.prototype.toDER=function(t){var a=this.r.toArray(),e=this.s.toArray();for(128&a[0]&&(a=[0].concat(a)),128&e[0]&&(e=[0].concat(e)),a=St(a),e=St(e);!(e[0]||128&e[1]);)e=e.slice(1);var r=[2];Pt(r,a.length),(r=r.concat(a)).push(2),Pt(r,e.length);var o=r.concat(e),i=[48];return Pt(i,o.length),i=i.concat(o),nt.encode(i,t)};var Ot=function(){throw new Error("unsupported")},Rt=nt.assert;function It(t){if(!(this instanceof It))return new It(t);"string"==typeof t&&(Rt(Object.prototype.hasOwnProperty.call(At,t),"Unknown curve "+t),t=At[t]),t instanceof At.PresetCurve&&(t={curve:t}),this.curve=t.curve.curve,this.n=this.curve.n,this.nh=this.n.ushrn(1),this.g=this.curve.g,this.g=t.curve.g,this.g.precompute(t.curve.n.bitLength()+1),this.hash=t.hash||t.curve.hash}var Tt=It;It.prototype.keyPair=function(t){return new Bt(this,t)},It.prototype.keyFromPrivate=function(t,a){return Bt.fromPrivate(this,t,a)},It.prototype.keyFromPublic=function(t,a){return Bt.fromPublic(this,t,a)},It.prototype.genKeyPair=function(t){t||(t={});for(var a=new Mt({hash:this.hash,pers:t.pers,persEnc:t.persEnc||"utf8",entropy:t.entropy||Ot(this.hash.hmacStrength),entropyEnc:t.entropy&&t.entropyEnc||"utf8",nonce:this.n.toArray()}),e=this.n.byteLength(),r=this.n.sub(new(Q())(2));;){var o=new(Q())(a.generate(e));if(!(o.cmp(r)>0))return o.iaddn(1),this.keyFromPrivate(o)}},It.prototype._truncateToN=function(t,a){var e=8*t.byteLength()-this.n.bitLength();return e>0&&(t=t.ushrn(e)),!a&&t.cmp(this.n)>=0?t.sub(this.n):t},It.prototype.sign=function(t,a,e,r){"object"==typeof e&&(r=e,e=null),r||(r={}),a=this.keyFromPrivate(a,e),t=this._truncateToN(new(Q())(t,16));for(var o=this.n.byteLength(),i=a.getPrivate().toArray("be",o),n=t.toArray("be",o),s=new Mt({hash:this.hash,entropy:i,nonce:n,pers:r.pers,persEnc:r.persEnc||"utf8"}),d=this.n.sub(new(Q())(1)),u=0;;u++){var l=r.k?r.k(u):new(Q())(s.generate(this.n.byteLength()));if(!((l=this._truncateToN(l,!0)).cmpn(1)<=0||l.cmp(d)>=0)){var h=this.g.mul(l);if(!h.isInfinity()){var f=h.getX(),c=f.umod(this.n);if(0!==c.cmpn(0)){var m=l.invm(this.n).mul(c.mul(a.getPrivate()).iadd(t));if(0!==(m=m.umod(this.n)).cmpn(0)){var p=(h.getY().isOdd()?1:0)|(0!==f.cmp(c)?2:0);return r.canonical&&m.cmp(this.nh)>0&&(m=this.n.sub(m),p^=1),new xt({r:c,s:m,recoveryParam:p})}}}}}},It.prototype.verify=function(t,a,e,r){t=this._truncateToN(new(Q())(t,16)),e=this.keyFromPublic(e,r);var o=(a=new xt(a,"hex")).r,i=a.s;if(o.cmpn(1)<0||o.cmp(this.n)>=0)return!1;if(i.cmpn(1)<0||i.cmp(this.n)>=0)return!1;var n,s=i.invm(this.n),d=s.mul(t).umod(this.n),u=s.mul(o).umod(this.n);return this.curve._maxwellTrick?!(n=this.g.jmulAdd(d,e.getPublic(),u)).isInfinity()&&n.eqXToP(o):!(n=this.g.mulAdd(d,e.getPublic(),u)).isInfinity()&&0===n.getX().umod(this.n).cmp(o)},It.prototype.recoverPubKey=function(t,a,e,r){Rt((3&e)===e,"The recovery param is more than two bits"),a=new xt(a,r);var o=this.n,i=new(Q())(t),n=a.r,s=a.s,d=1&e,u=e>>1;if(n.cmp(this.curve.p.umod(this.curve.n))>=0&&u)throw new Error("Unable to find sencond key candinate");n=u?this.curve.pointFromX(n.add(this.curve.n),d):this.curve.pointFromX(n,d);var l=a.r.invm(o),h=o.sub(i).mul(l).umod(o),f=s.mul(l).umod(o);return this.g.mulAdd(h,n,f)},It.prototype.getKeyRecoveryParam=function(t,a,e,r){if(null!==(a=new xt(a,r)).recoveryParam)return a.recoveryParam;for(var o=0;o<4;o++){var i;try{i=this.recoverPubKey(t,a,o)}catch(t){continue}if(i.eq(e))return o}throw new Error("Unable to find valid recovery factor")};var qt=et((function(t,a){var e=a;e.version="6.5.4",e.utils=nt,e.rand=function(){throw new Error("unsupported")},e.curve=bt,e.curves=At,e.ec=Tt,e.eddsa=null})).ec;const Gt=new r.Yd("signing-key/5.4.0");let Lt=null;function zt(){return Lt||(Lt=new qt("secp256k1")),Lt}class Dt{constructor(t){i(this,"curve","secp256k1"),i(this,"privateKey",(0,A.Dv)(t));const a=zt().keyFromPrivate((0,A.lE)(this.privateKey));i(this,"publicKey","0x"+a.getPublic(!1,"hex")),i(this,"compressedPublicKey","0x"+a.getPublic(!0,"hex")),i(this,"_isSigningKey",!0)}_addPoint(t){const a=zt().keyFromPublic((0,A.lE)(this.publicKey)),e=zt().keyFromPublic((0,A.lE)(t));return"0x"+a.pub.add(e.pub).encodeCompressed("hex")}signDigest(t){const a=zt().keyFromPrivate((0,A.lE)(this.privateKey)),e=(0,A.lE)(t);32!==e.length&&Gt.throwArgumentError("bad digest length","digest",t);const r=a.sign(e,{canonical:!0});return(0,A.N)({recoveryParam:r.recoveryParam,r:(0,A.$m)("0x"+r.r.toString(16),32),s:(0,A.$m)("0x"+r.s.toString(16),32)})}computeSharedSecret(t){const a=zt().keyFromPrivate((0,A.lE)(this.privateKey)),e=zt().keyFromPublic((0,A.lE)(Ut(t)));return(0,A.$m)("0x"+a.derive(e.getPublic()).toString(16),32)}static isSigningKey(t){return!(!t||!t._isSigningKey)}}function Ut(t,a){const e=(0,A.lE)(t);if(32===e.length){const t=new Dt(e);return a?"0x"+zt().keyFromPrivate(e).getPublic(!0,"hex"):t.publicKey}return 33===e.length?a?(0,A.Dv)(e):"0x"+zt().keyFromPublic(e).getPublic(!1,"hex"):65===e.length?a?"0x"+zt().keyFromPublic(e).getPublic(!0,"hex"):(0,A.Dv)(e):Gt.throwArgumentError("invalid public or private key","key","[REDACTED]")}const jt=new r.Yd("transactions/5.4.0");var $t;function Yt(t){return"0x"===t?null:(0,w.Kn)(t)}function Ht(t){return"0x"===t?K:b.O$.from(t)}function Wt(t,a){return function(t){const a=Ut(t);return(0,w.Kn)((0,A.p3)((0,M.w)((0,A.p3)(a,1)),12))}(function(t,a){const e=(0,A.N)(a),r={r:(0,A.lE)(e.r),s:(0,A.lE)(e.s)};return"0x"+zt().recoverPubKey((0,A.lE)(t),r,e.recoveryParam).encode("hex",!1)}((0,A.lE)(t),a))}function Vt(t,a){const e=(0,A.G1)(b.O$.from(t).toHexString());return e.length>32&&jt.throwArgumentError("invalid length for "+a,"transaction:"+a,t),e}function Zt(t,a){return{address:(0,w.Kn)(t),storageKeys:(a||[]).map(((a,e)=>(32!==(0,A.E1)(a)&&jt.throwArgumentError("invalid access list storageKey",`accessList[${t}:${e}]`,a),a.toLowerCase())))}}function Kt(t){if(Array.isArray(t))return t.map(((t,a)=>Array.isArray(t)?(t.length>2&&jt.throwArgumentError("access list expected to be [ address, storageKeys[] ]",`value[${a}]`,t),Zt(t[0],t[1])):Zt(t.address,t.storageKeys)));const a=Object.keys(t).map((a=>{const e=t[a].reduce(((t,a)=>(t[a]=!0,t)),{});return Zt(a,Object.keys(e).sort())}));return a.sort(((t,a)=>t.address.localeCompare(a.address))),a}function Jt(t){return Kt(t).map((t=>[t.address,t.storageKeys]))}function Xt(t,a){if(null!=t.gasPrice){const a=b.O$.from(t.gasPrice),e=b.O$.from(t.maxFeePerGas||0);a.eq(e)||jt.throwArgumentError("mismatch EIP-1559 gasPrice != maxFeePerGas","tx",{gasPrice:a,maxFeePerGas:e})}const e=[Vt(t.chainId||0,"chainId"),Vt(t.nonce||0,"nonce"),Vt(t.maxPriorityFeePerGas||0,"maxPriorityFeePerGas"),Vt(t.maxFeePerGas||0,"maxFeePerGas"),Vt(t.gasLimit||0,"gasLimit"),null!=t.to?(0,w.Kn)(t.to):"0x",Vt(t.value||0,"value"),t.data||"0x",Jt(t.accessList||[])];if(a){const t=(0,A.N)(a);e.push(Vt(t.recoveryParam,"recoveryParam")),e.push((0,A.G1)(t.r)),e.push((0,A.G1)(t.s))}return(0,A.xs)(["0x02",J.c(e)])}function Qt(t,a){const e=[Vt(t.chainId||0,"chainId"),Vt(t.nonce||0,"nonce"),Vt(t.gasPrice||0,"gasPrice"),Vt(t.gasLimit||0,"gasLimit"),null!=t.to?(0,w.Kn)(t.to):"0x",Vt(t.value||0,"value"),t.data||"0x",Jt(t.accessList||[])];if(a){const t=(0,A.N)(a);e.push(Vt(t.recoveryParam,"recoveryParam")),e.push((0,A.G1)(t.r)),e.push((0,A.G1)(t.s))}return(0,A.xs)(["0x01",J.c(e)])}function ta(t,a,e){try{const e=Ht(a[0]).toNumber();if(0!==e&&1!==e)throw new Error("bad recid");t.v=e}catch(t){jt.throwArgumentError("invalid v for transaction type: 1","v",a[0])}t.r=(0,A.$m)(a[1],32),t.s=(0,A.$m)(a[2],32);try{const a=(0,M.w)(e(t));t.from=Wt(a,{r:t.r,s:t.s,recoveryParam:t.v})}catch(t){console.log(t)}}function aa(t){t=(0,A.lE)(t);let a="";for(let e=0;e<t.length;e++)a+=String.fromCharCode(t[e]);return btoa(a)}!function(t){t[t.legacy=0]="legacy",t[t.eip2930=1]="eip2930",t[t.eip1559=2]="eip1559"}($t||($t={}));function ea(t,a){return e=this,r=void 0,i=function*(){null==a&&(a={});const e={method:a.method||"GET",headers:a.headers||{},body:a.body||void 0,mode:"cors",cache:"no-cache",credentials:"same-origin",redirect:"follow",referrer:"client"},r=yield fetch(t,e),o=yield r.arrayBuffer(),i={};return r.headers.forEach?r.headers.forEach(((t,a)=>{i[a.toLowerCase()]=t})):r.headers.keys().forEach((t=>{i[t.toLowerCase()]=r.headers.get(t)})),{headers:i,statusCode:r.status,statusMessage:r.statusText,body:(0,A.lE)(new Uint8Array(o))}},new((o=void 0)||(o=Promise))((function(t,a){function n(t){try{d(i.next(t))}catch(t){a(t)}}function s(t){try{d(i.throw(t))}catch(t){a(t)}}function d(a){var e;a.done?t(a.value):(e=a.value,e instanceof o?e:new o((function(t){t(e)}))).then(n,s)}d((i=i.apply(e,r||[])).next())}));var e,r,o,i}const ra=new r.Yd("web/5.4.0");function oa(t){return new Promise((a=>{setTimeout(a,t)}))}function ia(t,a){if(null==t)return null;if("string"==typeof t)return t;if((0,A.Zq)(t)){if(a&&("text"===a.split("/")[0]||"application/json"===a.split(";")[0].trim()))try{return P(t)}catch(t){}return(0,A.Dv)(t)}return t}function na(t,a,e){let o=null;if(null!=a){o=F(a);const e="string"==typeof t?{url:t}:d(t);e.headers?0!==Object.keys(e.headers).filter((t=>"content-type"===t.toLowerCase())).length||(e.headers=d(e.headers),e.headers["content-type"]="application/json"):e.headers={"content-type":"application/json"},t=e}return function(t,a,e){const o="object"==typeof t&&null!=t.throttleLimit?t.throttleLimit:12;ra.assertArgument(o>0&&o%1==0,"invalid connection throttle limit","connection.throttleLimit",o);const i="object"==typeof t?t.throttleCallback:null,n="object"==typeof t&&"number"==typeof t.throttleSlotInterval?t.throttleSlotInterval:100;ra.assertArgument(n>0&&n%1==0,"invalid connection throttle slot interval","connection.throttleSlotInterval",n);const s={};let d=null;const u={method:"GET"};let l=!1,h=12e4;if("string"==typeof t)d=t;else if("object"==typeof t){if(null!=t&&null!=t.url||ra.throwArgumentError("missing URL","connection.url",t),d=t.url,"number"==typeof t.timeout&&t.timeout>0&&(h=t.timeout),t.headers)for(const a in t.headers)s[a.toLowerCase()]={key:a,value:String(t.headers[a])},["if-none-match","if-modified-since"].indexOf(a.toLowerCase())>=0&&(l=!0);if(u.allowGzip=!!t.allowGzip,null!=t.user&&null!=t.password){"https:"!==d.substring(0,6)&&!0!==t.allowInsecureAuthentication&&ra.throwError("basic authentication requires a secure https url",r.Yd.errors.INVALID_ARGUMENT,{argument:"url",url:d,user:t.user,password:"[REDACTED]"});const a=t.user+":"+t.password;s.authorization={key:"Authorization",value:"Basic "+aa(F(a))}}}a&&(u.method="POST",u.body=a,null==s["content-type"]&&(s["content-type"]={key:"Content-Type",value:"application/octet-stream"}),null==s["content-length"]&&(s["content-length"]={key:"Content-Length",value:String(a.length)}));const f={};Object.keys(s).forEach((t=>{const a=s[t];f[a.key]=a.value})),u.headers=f;const c=function(){let t=null;return{promise:new Promise((function(a,e){h&&(t=setTimeout((()=>{null!=t&&(t=null,e(ra.makeError("timeout",r.Yd.errors.TIMEOUT,{requestBody:ia(u.body,f["content-type"]),requestMethod:u.method,timeout:h,url:d})))}),h))})),cancel:function(){null!=t&&(clearTimeout(t),t=null)}}}(),m=function(){return t=this,a=void 0,h=function*(){for(let t=0;t<o;t++){let a=null;try{if(a=yield ea(d,u),429===a.statusCode&&t<o){let e=!0;if(i&&(e=yield i(t,d)),e){let e=0;const r=a.headers["retry-after"];e="string"==typeof r&&r.match(/^[1-9][0-9]*$/)?1e3*parseInt(r):n*parseInt(String(Math.random()*Math.pow(2,t))),yield oa(e);continue}}}catch(t){a=t.response,null==a&&(c.cancel(),ra.throwError("missing response",r.Yd.errors.SERVER_ERROR,{requestBody:ia(u.body,f["content-type"]),requestMethod:u.method,serverError:t,url:d}))}let s=a.body;if(l&&304===a.statusCode?s=null:(a.statusCode<200||a.statusCode>=300)&&(c.cancel(),ra.throwError("bad response",r.Yd.errors.SERVER_ERROR,{status:a.statusCode,headers:a.headers,body:ia(s,a.headers?a.headers["content-type"]:null),requestBody:ia(u.body,f["content-type"]),requestMethod:u.method,url:d})),e)try{const t=yield e(s,a);return c.cancel(),t}catch(e){if(e.throttleRetry&&t<o){let a=!0;if(i&&(a=yield i(t,d)),a){const a=n*parseInt(String(Math.random()*Math.pow(2,t)));yield oa(a);continue}}c.cancel(),ra.throwError("processing response error",r.Yd.errors.SERVER_ERROR,{body:ia(s,a.headers?a.headers["content-type"]:null),error:e,requestBody:ia(u.body,f["content-type"]),requestMethod:u.method,url:d})}return c.cancel(),s}return ra.throwError("failed response",r.Yd.errors.SERVER_ERROR,{requestBody:ia(u.body,f["content-type"]),requestMethod:u.method,url:d})},new((s=void 0)||(s=Promise))((function(e,r){function o(t){try{n(h.next(t))}catch(t){r(t)}}function i(t){try{n(h.throw(t))}catch(t){r(t)}}function n(t){var a;t.done?e(t.value):(a=t.value,a instanceof s?a:new s((function(t){t(a)}))).then(o,i)}n((h=h.apply(t,a||[])).next())}));var t,a,s,h}();return Promise.race([c.promise,m])}(t,o,((t,a)=>{let o=null;if(null!=t)try{o=JSON.parse(P(t))}catch(a){ra.throwError("invalid JSON",r.Yd.errors.SERVER_ERROR,{body:t,error:a})}return e&&(o=e(o,a)),o}))}function sa(t,a){return a||(a={}),null==(a=d(a)).floor&&(a.floor=0),null==a.ceiling&&(a.ceiling=1e4),null==a.interval&&(a.interval=250),new Promise((function(e,r){let o=null,i=!1;const n=()=>!i&&(i=!0,o&&clearTimeout(o),!0);a.timeout&&(o=setTimeout((()=>{n()&&r(new Error("timeout"))}),a.timeout));const s=a.retryLimit;let d=0;!function o(){return t().then((function(t){if(void 0!==t)n()&&e(t);else if(a.oncePoll)a.oncePoll.once("poll",o);else if(a.onceBlock)a.onceBlock.once("block",o);else if(!i){if(d++,d>s)return void(n()&&r(new Error("retry limit reached")));let t=a.interval*parseInt(String(Math.random()*Math.pow(2,d)));t<a.floor&&(t=a.floor),t>a.ceiling&&(t=a.ceiling),setTimeout(o,t)}return null}),(function(t){n()&&r(t)}))}()}))}const da=new r.Yd("abstract-provider/5.4.1");class ua{constructor(){da.checkAbstract(new.target,ua),i(this,"_isProvider",!0)}getFeeData(){return t=this,a=void 0,r=function*(){const{block:t,gasPrice:a}=yield s({block:this.getBlock("latest"),gasPrice:this.getGasPrice().catch((t=>null))});let e=null,r=null;return t&&t.baseFeePerGas&&(r=b.O$.from("2500000000"),e=t.baseFeePerGas.mul(2).add(r)),{maxFeePerGas:e,maxPriorityFeePerGas:r,gasPrice:a}},new((e=void 0)||(e=Promise))((function(o,i){function n(t){try{d(r.next(t))}catch(t){i(t)}}function s(t){try{d(r.throw(t))}catch(t){i(t)}}function d(t){var a;t.done?o(t.value):(a=t.value,a instanceof e?a:new e((function(t){t(a)}))).then(n,s)}d((r=r.apply(t,a||[])).next())}));var t,a,e,r}addListener(t,a){return this.on(t,a)}removeListener(t,a){return this.off(t,a)}static isProvider(t){return!(!t||!t._isProvider)}}class la{constructor(t){i(this,"alphabet",t),i(this,"base",t.length),i(this,"_alphabetMap",{}),i(this,"_leader",t.charAt(0));for(let a=0;a<t.length;a++)this._alphabetMap[t.charAt(a)]=a}encode(t){let a=(0,A.lE)(t);if(0===a.length)return"";let e=[0];for(let t=0;t<a.length;++t){let r=a[t];for(let t=0;t<e.length;++t)r+=e[t]<<8,e[t]=r%this.base,r=r/this.base|0;for(;r>0;)e.push(r%this.base),r=r/this.base|0}let r="";for(let t=0;0===a[t]&&t<a.length-1;++t)r+=this._leader;for(let t=e.length-1;t>=0;--t)r+=this.alphabet[e[t]];return r}decode(t){if("string"!=typeof t)throw new TypeError("Expected String");let a=[];if(0===t.length)return new Uint8Array(a);a.push(0);for(let e=0;e<t.length;e++){let r=this._alphabetMap[t[e]];if(void 0===r)throw new Error("Non-base"+this.base+" character");let o=r;for(let t=0;t<a.length;++t)o+=a[t]*this.base,a[t]=255&o,o>>=8;for(;o>0;)a.push(255&o),o>>=8}for(let e=0;t[e]===this._leader&&e<t.length-1;++e)a.push(0);return(0,A.lE)(new Uint8Array(a.reverse()))}}new la("abcdefghijklmnopqrstuvwxyz234567");const ha=new la("123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz");function fa(t,a){a||(a=function(t){return[parseInt(t,16)]});let e=0,r={};return t.split(",").forEach((t=>{let o=t.split(":");e+=parseInt(o[0],16),r[e]=a(o[1])})),r}function ca(t){let a=0;return t.split(",").map((t=>{let e=t.split("-");1===e.length?e[1]="0":""===e[1]&&(e[1]="1");let r=a+parseInt(e[0],16);return a=parseInt(e[1],16),{l:r,h:a}}))}function ma(t,a){let e=0;for(let r=0;r<a.length;r++){let o=a[r];if(e+=o.l,t>=e&&t<=e+o.h&&(t-e)%(o.d||1)==0){if(o.e&&-1!==o.e.indexOf(t-e))continue;return o}}return null}const pa=ca("221,13-1b,5f-,40-10,51-f,11-3,3-3,2-2,2-4,8,2,15,2d,28-8,88,48,27-,3-5,11-20,27-,8,28,3-5,12,18,b-a,1c-4,6-16,2-d,2-2,2,1b-4,17-9,8f-,10,f,1f-2,1c-34,33-14e,4,36-,13-,6-2,1a-f,4,9-,3-,17,8,2-2,5-,2,8-,3-,4-8,2-3,3,6-,16-6,2-,7-3,3-,17,8,3,3,3-,2,6-3,3-,4-a,5,2-6,10-b,4,8,2,4,17,8,3,6-,b,4,4-,2-e,2-4,b-10,4,9-,3-,17,8,3-,5-,9-2,3-,4-7,3-3,3,4-3,c-10,3,7-2,4,5-2,3,2,3-2,3-2,4-2,9,4-3,6-2,4,5-8,2-e,d-d,4,9,4,18,b,6-3,8,4,5-6,3-8,3-3,b-11,3,9,4,18,b,6-3,8,4,5-6,3-6,2,3-3,b-11,3,9,4,18,11-3,7-,4,5-8,2-7,3-3,b-11,3,13-2,19,a,2-,8-2,2-3,7,2,9-11,4-b,3b-3,1e-24,3,2-,3,2-,2-5,5,8,4,2,2-,3,e,4-,6,2,7-,b-,3-21,49,23-5,1c-3,9,25,10-,2-2f,23,6,3,8-2,5-5,1b-45,27-9,2a-,2-3,5b-4,45-4,53-5,8,40,2,5-,8,2,5-,28,2,5-,20,2,5-,8,2,5-,8,8,18,20,2,5-,8,28,14-5,1d-22,56-b,277-8,1e-2,52-e,e,8-a,18-8,15-b,e,4,3-b,5e-2,b-15,10,b-5,59-7,2b-555,9d-3,5b-5,17-,7-,27-,7-,9,2,2,2,20-,36,10,f-,7,14-,4,a,54-3,2-6,6-5,9-,1c-10,13-1d,1c-14,3c-,10-6,32-b,240-30,28-18,c-14,a0,115-,3,66-,b-76,5,5-,1d,24,2,5-2,2,8-,35-2,19,f-10,1d-3,311-37f,1b,5a-b,d7-19,d-3,41,57-,68-4,29-3,5f,29-37,2e-2,25-c,2c-2,4e-3,30,78-3,64-,20,19b7-49,51a7-59,48e-2,38-738,2ba5-5b,222f-,3c-94,8-b,6-4,1b,6,2,3,3,6d-20,16e-f,41-,37-7,2e-2,11-f,5-b,18-,b,14,5-3,6,88-,2,bf-2,7-,7-,7-,4-2,8,8-9,8-2ff,20,5-b,1c-b4,27-,27-cbb1,f7-9,28-2,b5-221,56,48,3-,2-,3-,5,d,2,5,3,42,5-,9,8,1d,5,6,2-2,8,153-3,123-3,33-27fd,a6da-5128,21f-5df,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3,2-1d,61-ff7d"),ya="ad,34f,1806,180b,180c,180d,200b,200c,200d,2060,feff".split(",").map((t=>parseInt(t,16))),ga=[{h:25,s:32,l:65},{h:30,s:32,e:[23],l:127},{h:54,s:1,e:[48],l:64,d:2},{h:14,s:1,l:57,d:2},{h:44,s:1,l:17,d:2},{h:10,s:1,e:[2,6,8],l:61,d:2},{h:16,s:1,l:68,d:2},{h:84,s:1,e:[18,24,66],l:19,d:2},{h:26,s:32,e:[17],l:435},{h:22,s:1,l:71,d:2},{h:15,s:80,l:40},{h:31,s:32,l:16},{h:32,s:1,l:80,d:2},{h:52,s:1,l:42,d:2},{h:12,s:1,l:55,d:2},{h:40,s:1,e:[38],l:15,d:2},{h:14,s:1,l:48,d:2},{h:37,s:48,l:49},{h:148,s:1,l:6351,d:2},{h:88,s:1,l:160,d:2},{h:15,s:16,l:704},{h:25,s:26,l:854},{h:25,s:32,l:55915},{h:37,s:40,l:1247},{h:25,s:-119711,l:53248},{h:25,s:-119763,l:52},{h:25,s:-119815,l:52},{h:25,s:-119867,e:[1,4,5,7,8,11,12,17],l:52},{h:25,s:-119919,l:52},{h:24,s:-119971,e:[2,7,8,17],l:52},{h:24,s:-120023,e:[2,7,13,15,16,17],l:52},{h:25,s:-120075,l:52},{h:25,s:-120127,l:52},{h:25,s:-120179,l:52},{h:25,s:-120231,l:52},{h:25,s:-120283,l:52},{h:25,s:-120335,l:52},{h:24,s:-119543,e:[17],l:56},{h:24,s:-119601,e:[17],l:58},{h:24,s:-119659,e:[17],l:58},{h:24,s:-119717,e:[17],l:58},{h:24,s:-119775,e:[17],l:58}],va=fa("b5:3bc,c3:ff,7:73,2:253,5:254,3:256,1:257,5:259,1:25b,3:260,1:263,2:269,1:268,5:26f,1:272,2:275,7:280,3:283,5:288,3:28a,1:28b,5:292,3f:195,1:1bf,29:19e,125:3b9,8b:3b2,1:3b8,1:3c5,3:3c6,1:3c0,1a:3ba,1:3c1,1:3c3,2:3b8,1:3b5,1bc9:3b9,1c:1f76,1:1f77,f:1f7a,1:1f7b,d:1f78,1:1f79,1:1f7c,1:1f7d,107:63,5:25b,4:68,1:68,1:68,3:69,1:69,1:6c,3:6e,4:70,1:71,1:72,1:72,1:72,7:7a,2:3c9,2:7a,2:6b,1:e5,1:62,1:63,3:65,1:66,2:6d,b:3b3,1:3c0,6:64,1b574:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3"),ba=fa("179:1,2:1,2:1,5:1,2:1,a:4f,a:1,8:1,2:1,2:1,3:1,5:1,3:1,4:1,2:1,3:1,4:1,8:2,1:1,2:2,1:1,2:2,27:2,195:26,2:25,1:25,1:25,2:40,2:3f,1:3f,33:1,11:-6,1:-9,1ac7:-3a,6d:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,b:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,c:-8,2:-8,2:-8,2:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,49:-8,1:-8,1:-4a,1:-4a,d:-56,1:-56,1:-56,1:-56,d:-8,1:-8,f:-8,1:-8,3:-7"),Aa=fa("df:00730073,51:00690307,19:02BC006E,a7:006A030C,18a:002003B9,16:03B903080301,20:03C503080301,1d7:05650582,190f:00680331,1:00740308,1:0077030A,1:0079030A,1:006102BE,b6:03C50313,2:03C503130300,2:03C503130301,2:03C503130342,2a:1F0003B9,1:1F0103B9,1:1F0203B9,1:1F0303B9,1:1F0403B9,1:1F0503B9,1:1F0603B9,1:1F0703B9,1:1F0003B9,1:1F0103B9,1:1F0203B9,1:1F0303B9,1:1F0403B9,1:1F0503B9,1:1F0603B9,1:1F0703B9,1:1F2003B9,1:1F2103B9,1:1F2203B9,1:1F2303B9,1:1F2403B9,1:1F2503B9,1:1F2603B9,1:1F2703B9,1:1F2003B9,1:1F2103B9,1:1F2203B9,1:1F2303B9,1:1F2403B9,1:1F2503B9,1:1F2603B9,1:1F2703B9,1:1F6003B9,1:1F6103B9,1:1F6203B9,1:1F6303B9,1:1F6403B9,1:1F6503B9,1:1F6603B9,1:1F6703B9,1:1F6003B9,1:1F6103B9,1:1F6203B9,1:1F6303B9,1:1F6403B9,1:1F6503B9,1:1F6603B9,1:1F6703B9,3:1F7003B9,1:03B103B9,1:03AC03B9,2:03B10342,1:03B1034203B9,5:03B103B9,6:1F7403B9,1:03B703B9,1:03AE03B9,2:03B70342,1:03B7034203B9,5:03B703B9,6:03B903080300,1:03B903080301,3:03B90342,1:03B903080342,b:03C503080300,1:03C503080301,1:03C10313,2:03C50342,1:03C503080342,b:1F7C03B9,1:03C903B9,1:03CE03B9,2:03C90342,1:03C9034203B9,5:03C903B9,ac:00720073,5b:00B00063,6:00B00066,d:006E006F,a:0073006D,1:00740065006C,1:0074006D,124f:006800700061,2:00610075,2:006F0076,b:00700061,1:006E0061,1:03BC0061,1:006D0061,1:006B0061,1:006B0062,1:006D0062,1:00670062,3:00700066,1:006E0066,1:03BC0066,4:0068007A,1:006B0068007A,1:006D0068007A,1:00670068007A,1:00740068007A,15:00700061,1:006B00700061,1:006D00700061,1:006700700061,8:00700076,1:006E0076,1:03BC0076,1:006D0076,1:006B0076,1:006D0076,1:00700077,1:006E0077,1:03BC0077,1:006D0077,1:006B0077,1:006D0077,1:006B03C9,1:006D03C9,2:00620071,3:00632215006B0067,1:0063006F002E,1:00640062,1:00670079,2:00680070,2:006B006B,1:006B006D,9:00700068,2:00700070006D,1:00700072,2:00730076,1:00770062,c723:00660066,1:00660069,1:0066006C,1:006600660069,1:00660066006C,1:00730074,1:00730074,d:05740576,1:05740565,1:0574056B,1:057E0576,1:0574056D",(function(t){if(t.length%4!=0)throw new Error("bad data");let a=[];for(let e=0;e<t.length;e+=4)a.push(parseInt(t.substring(e,e+4),16));return a})),wa=ca("80-20,2a0-,39c,32,f71,18e,7f2-f,19-7,30-4,7-5,f81-b,5,a800-20ff,4d1-1f,110,fa-6,d174-7,2e84-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,2,1f-5f,ff7f-20001");function Ma(t){if(t.match(/^[a-z0-9-]*$/i)&&t.length<=59)return t.toLowerCase();let a=O(t);var e;e=a.map((t=>{if(ya.indexOf(t)>=0)return[];if(t>=65024&&t<=65039)return[];let a=function(t){let a=ma(t,ga);if(a)return[t+a.s];let e=va[t];if(e)return e;let r=ba[t];return r?[t+r[0]]:Aa[t]||null}(t);return a||[t]})),a=e.reduce(((t,a)=>(a.forEach((a=>{t.push(a)})),t)),[]),a=O(S(a),B.NFKC),a.forEach((t=>{if(ma(t,wa))throw new Error("STRINGPREP_CONTAINS_PROHIBITED")})),a.forEach((t=>{if(ma(t,pa))throw new Error("STRINGPREP_CONTAINS_UNASSIGNED")}));let r=S(a);if("-"===r.substring(0,1)||"--"===r.substring(2,4)||"-"===r.substring(r.length-1))throw new Error("invalid hyphen");if(r.length>63)throw new Error("too long");return r}const _a=new r.Yd(_),ka=new Uint8Array(32);ka.fill(0);const Ba=new RegExp("^((.*)\\.)?([^.]+)$");function Ca(t){"string"!=typeof t&&_a.throwArgumentError("invalid ENS name; not a string","name",t);let a=t,e=ka;for(;a.length;){const r=a.match(Ba);null!=r&&""!==r[2]||_a.throwArgumentError("invalid ENS address; missing component","name",t);const o=F(Ma(r[3]));e=(0,M.w)((0,A.zo)([e,(0,M.w)(o)])),a=r[2]||""}return(0,A.Dv)(e)}const Ea=new r.Yd("networks/5.4.2");function xa(t){const a=function(a,e){null==e&&(e={});const r=[];if(a.InfuraProvider)try{r.push(new a.InfuraProvider(t,e.infura))}catch(t){}if(a.EtherscanProvider)try{r.push(new a.EtherscanProvider(t,e.etherscan))}catch(t){}if(a.AlchemyProvider)try{r.push(new a.AlchemyProvider(t,e.alchemy))}catch(t){}if(a.PocketProvider){const e=["goerli","ropsten","rinkeby"];try{const o=new a.PocketProvider(t);o.network&&-1===e.indexOf(o.network.name)&&r.push(o)}catch(t){}}if(a.CloudflareProvider)try{r.push(new a.CloudflareProvider(t))}catch(t){}if(0===r.length)return null;if(a.FallbackProvider){let o=1;return null!=e.quorum?o=e.quorum:"homestead"===t&&(o=2),new a.FallbackProvider(r,o)}return r[0]};return a.renetwork=function(t){return xa(t)},a}function Na(t,a){const e=function(e,r){return e.JsonRpcProvider?new e.JsonRpcProvider(t,a):null};return e.renetwork=function(a){return Na(t,a)},e}const Fa={chainId:1,ensAddress:"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",name:"homestead",_defaultProvider:xa("homestead")},Sa={chainId:3,ensAddress:"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",name:"ropsten",_defaultProvider:xa("ropsten")},Pa={chainId:63,name:"classicMordor",_defaultProvider:Na("https://www.ethercluster.com/mordor","classicMordor")},Oa={unspecified:{chainId:0,name:"unspecified"},homestead:Fa,mainnet:Fa,morden:{chainId:2,name:"morden"},ropsten:Sa,testnet:Sa,rinkeby:{chainId:4,ensAddress:"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",name:"rinkeby",_defaultProvider:xa("rinkeby")},kovan:{chainId:42,name:"kovan",_defaultProvider:xa("kovan")},goerli:{chainId:5,ensAddress:"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",name:"goerli",_defaultProvider:xa("goerli")},classic:{chainId:61,name:"classic",_defaultProvider:Na("https://www.ethercluster.com/etc","classic")},classicMorden:{chainId:62,name:"classicMorden"},classicMordor:Pa,classicTestnet:Pa,classicKotti:{chainId:6,name:"classicKotti",_defaultProvider:Na("https://www.ethercluster.com/kotti","classicKotti")},xdai:{chainId:100,name:"xdai"},matic:{chainId:137,name:"matic"},maticmum:{chainId:80001,name:"maticmum"},bnb:{chainId:56,name:"bnb"},bnbt:{chainId:97,name:"bnbt"}};function Ra(t){return"0x"+at().sha256().update((0,A.lE)(t)).digest("hex")}new r.Yd("sha2/5.4.0");var Ia=e(2882),Ta=e.n(Ia);const qa=new r.Yd(c);class Ga{constructor(){qa.checkNew(new.target,Ga),this.formats=this.getDefaultFormats()}getDefaultFormats(){const t={},a=this.address.bind(this),e=this.bigNumber.bind(this),r=this.blockTag.bind(this),o=this.data.bind(this),i=this.hash.bind(this),n=this.hex.bind(this),s=this.number.bind(this),u=this.type.bind(this);return t.transaction={hash:i,type:u,accessList:Ga.allowNull(this.accessList.bind(this),null),blockHash:Ga.allowNull(i,null),blockNumber:Ga.allowNull(s,null),transactionIndex:Ga.allowNull(s,null),confirmations:Ga.allowNull(s,null),from:a,gasPrice:Ga.allowNull(e),maxPriorityFeePerGas:Ga.allowNull(e),maxFeePerGas:Ga.allowNull(e),gasLimit:e,to:Ga.allowNull(a,null),value:e,nonce:s,data:o,r:Ga.allowNull(this.uint256),s:Ga.allowNull(this.uint256),v:Ga.allowNull(s),creates:Ga.allowNull(a,null),raw:Ga.allowNull(o)},t.transactionRequest={from:Ga.allowNull(a),nonce:Ga.allowNull(s),gasLimit:Ga.allowNull(e),gasPrice:Ga.allowNull(e),maxPriorityFeePerGas:Ga.allowNull(e),maxFeePerGas:Ga.allowNull(e),to:Ga.allowNull(a),value:Ga.allowNull(e),data:Ga.allowNull((t=>this.data(t,!0))),type:Ga.allowNull(s),accessList:Ga.allowNull(this.accessList.bind(this),null)},t.receiptLog={transactionIndex:s,blockNumber:s,transactionHash:i,address:a,topics:Ga.arrayOf(i),data:o,logIndex:s,blockHash:i},t.receipt={to:Ga.allowNull(this.address,null),from:Ga.allowNull(this.address,null),contractAddress:Ga.allowNull(a,null),transactionIndex:s,root:Ga.allowNull(n),gasUsed:e,logsBloom:Ga.allowNull(o),blockHash:i,transactionHash:i,logs:Ga.arrayOf(this.receiptLog.bind(this)),blockNumber:s,confirmations:Ga.allowNull(s,null),cumulativeGasUsed:e,effectiveGasPrice:Ga.allowNull(e),status:Ga.allowNull(s),type:u},t.block={hash:i,parentHash:i,number:s,timestamp:s,nonce:Ga.allowNull(n),difficulty:this.difficulty.bind(this),gasLimit:e,gasUsed:e,miner:a,extraData:o,transactions:Ga.allowNull(Ga.arrayOf(i)),baseFeePerGas:Ga.allowNull(e)},t.blockWithTransactions=d(t.block),t.blockWithTransactions.transactions=Ga.allowNull(Ga.arrayOf(this.transactionResponse.bind(this))),t.filter={fromBlock:Ga.allowNull(r,void 0),toBlock:Ga.allowNull(r,void 0),blockHash:Ga.allowNull(i,void 0),address:Ga.allowNull(a,void 0),topics:Ga.allowNull(this.topics.bind(this),void 0)},t.filterLog={blockNumber:Ga.allowNull(s),blockHash:Ga.allowNull(i),transactionIndex:s,removed:Ga.allowNull(this.boolean.bind(this)),address:a,data:Ga.allowFalsish(o,"0x"),topics:Ga.arrayOf(i),transactionHash:i,logIndex:s},t}accessList(t){return Kt(t||[])}number(t){return"0x"===t?0:b.O$.from(t).toNumber()}type(t){return"0x"===t||null==t?0:b.O$.from(t).toNumber()}bigNumber(t){return b.O$.from(t)}boolean(t){if("boolean"==typeof t)return t;if("string"==typeof t){if("true"===(t=t.toLowerCase()))return!0;if("false"===t)return!1}throw new Error("invalid boolean - "+t)}hex(t,a){return"string"==typeof t&&(a||"0x"===t.substring(0,2)||(t="0x"+t),(0,A.A7)(t))?t.toLowerCase():qa.throwArgumentError("invalid hash","value",t)}data(t,a){const e=this.hex(t,a);if(e.length%2!=0)throw new Error("invalid data; odd-length - "+t);return e}address(t){return(0,w.Kn)(t)}callAddress(t){if(!(0,A.A7)(t,32))return null;const a=(0,w.Kn)((0,A.p3)(t,12));return"0x0000000000000000000000000000000000000000"===a?null:a}contractAddress(t){return(0,w.CR)(t)}blockTag(t){if(null==t)return"latest";if("earliest"===t)return"0x0";if("latest"===t||"pending"===t)return t;if("number"==typeof t||(0,A.A7)(t))return(0,A.$P)(t);throw new Error("invalid blockTag")}hash(t,a){const e=this.hex(t,a);return 32!==(0,A.E1)(e)?qa.throwArgumentError("invalid hash","value",t):e}difficulty(t){if(null==t)return null;const a=b.O$.from(t);try{return a.toNumber()}catch(t){}return null}uint256(t){if(!(0,A.A7)(t))throw new Error("invalid uint256");return(0,A.$m)(t,32)}_block(t,a){return null!=t.author&&null==t.miner&&(t.miner=t.author),Ga.check(a,t)}block(t){return this._block(t,this.formats.block)}blockWithTransactions(t){return this._block(t,this.formats.blockWithTransactions)}transactionRequest(t){return Ga.check(this.formats.transactionRequest,t)}transactionResponse(t){null!=t.gas&&null==t.gasLimit&&(t.gasLimit=t.gas),t.to&&b.O$.from(t.to).isZero()&&(t.to="0x0000000000000000000000000000000000000000"),null!=t.input&&null==t.data&&(t.data=t.input),null==t.to&&null==t.creates&&(t.creates=this.contractAddress(t)),1!==t.type&&2!==t.type||null!=t.accessList||(t.accessList=[]);const a=Ga.check(this.formats.transaction,t);if(null!=t.chainId){let e=t.chainId;(0,A.A7)(e)&&(e=b.O$.from(e).toNumber()),a.chainId=e}else{let e=t.networkId;null==e&&null==a.v&&(e=t.chainId),(0,A.A7)(e)&&(e=b.O$.from(e).toNumber()),"number"!=typeof e&&null!=a.v&&(e=(a.v-35)/2,e<0&&(e=0),e=parseInt(e)),"number"!=typeof e&&(e=0),a.chainId=e}return a.blockHash&&"x"===a.blockHash.replace(/0/g,"")&&(a.blockHash=null),a}transaction(t){return function(t){const a=(0,A.lE)(t);if(a[0]>127)return function(t){const a=J.J(t);9!==a.length&&6!==a.length&&jt.throwArgumentError("invalid raw transaction","rawTransaction",t);const e={nonce:Ht(a[0]).toNumber(),gasPrice:Ht(a[1]),gasLimit:Ht(a[2]),to:Yt(a[3]),value:Ht(a[4]),data:a[5],chainId:0};if(6===a.length)return e;try{e.v=b.O$.from(a[6]).toNumber()}catch(t){return console.log(t),e}if(e.r=(0,A.$m)(a[7],32),e.s=(0,A.$m)(a[8],32),b.O$.from(e.r).isZero()&&b.O$.from(e.s).isZero())e.chainId=e.v,e.v=0;else{e.chainId=Math.floor((e.v-35)/2),e.chainId<0&&(e.chainId=0);let r=e.v-27;const o=a.slice(0,6);0!==e.chainId&&(o.push((0,A.Dv)(e.chainId)),o.push("0x"),o.push("0x"),r-=2*e.chainId+8);const i=(0,M.w)(J.c(o));try{e.from=Wt(i,{r:(0,A.Dv)(e.r),s:(0,A.Dv)(e.s),recoveryParam:r})}catch(t){console.log(t)}e.hash=(0,M.w)(t)}return e.type=null,e}(a);switch(a[0]){case 1:return function(t){const a=J.J(t.slice(1));8!==a.length&&11!==a.length&&jt.throwArgumentError("invalid component count for transaction type: 1","payload",(0,A.Dv)(t));const e={type:1,chainId:Ht(a[0]).toNumber(),nonce:Ht(a[1]).toNumber(),gasPrice:Ht(a[2]),gasLimit:Ht(a[3]),to:Yt(a[4]),value:Ht(a[5]),data:a[6],accessList:Kt(a[7])};return 8===a.length||(e.hash=(0,M.w)(t),ta(e,a.slice(8),Qt)),e}(a);case 2:return function(t){const a=J.J(t.slice(1));9!==a.length&&12!==a.length&&jt.throwArgumentError("invalid component count for transaction type: 2","payload",(0,A.Dv)(t));const e=Ht(a[2]),r=Ht(a[3]),o={type:2,chainId:Ht(a[0]).toNumber(),nonce:Ht(a[1]).toNumber(),maxPriorityFeePerGas:e,maxFeePerGas:r,gasPrice:null,gasLimit:Ht(a[4]),to:Yt(a[5]),value:Ht(a[6]),data:a[7],accessList:Kt(a[8])};return 9===a.length||(o.hash=(0,M.w)(t),ta(o,a.slice(9),Xt)),o}(a)}return jt.throwError(`unsupported transaction type: ${a[0]}`,r.Yd.errors.UNSUPPORTED_OPERATION,{operation:"parseTransaction",transactionType:a[0]})}(t)}receiptLog(t){return Ga.check(this.formats.receiptLog,t)}receipt(t){const a=Ga.check(this.formats.receipt,t);if(null!=a.root)if(a.root.length<=4){const t=b.O$.from(a.root).toNumber();0===t||1===t?(null!=a.status&&a.status!==t&&qa.throwArgumentError("alt-root-status/status mismatch","value",{root:a.root,status:a.status}),a.status=t,delete a.root):qa.throwArgumentError("invalid alt-root-status","value.root",a.root)}else 66!==a.root.length&&qa.throwArgumentError("invalid root hash","value.root",a.root);return null!=a.status&&(a.byzantium=!0),a}topics(t){return Array.isArray(t)?t.map((t=>this.topics(t))):null!=t?this.hash(t,!0):null}filter(t){return Ga.check(this.formats.filter,t)}filterLog(t){return Ga.check(this.formats.filterLog,t)}static check(t,a){const e={};for(const r in t)try{const o=t[r](a[r]);void 0!==o&&(e[r]=o)}catch(t){throw t.checkKey=r,t.checkValue=a[r],t}return e}static allowNull(t,a){return function(e){return null==e?a:t(e)}}static allowFalsish(t,a){return function(e){return e?t(e):a}}static arrayOf(t){return function(a){if(!Array.isArray(a))throw new Error("not an array");const e=[];return a.forEach((function(a){e.push(t(a))})),e}}}var La=function(t,a,e,r){return new(e||(e=Promise))((function(o,i){function n(t){try{d(r.next(t))}catch(t){i(t)}}function s(t){try{d(r.throw(t))}catch(t){i(t)}}function d(t){var a;t.done?o(t.value):(a=t.value,a instanceof e?a:new e((function(t){t(a)}))).then(n,s)}d((r=r.apply(t,a||[])).next())}))};const za=new r.Yd(c);function Da(t){return null==t?"null":(32!==(0,A.E1)(t)&&za.throwArgumentError("invalid topic","topic",t),t.toLowerCase())}function Ua(t){for(t=t.slice();t.length>0&&null==t[t.length-1];)t.pop();return t.map((t=>{if(Array.isArray(t)){const a={};t.forEach((t=>{a[Da(t)]=!0}));const e=Object.keys(a);return e.sort(),e.join("|")}return Da(t)})).join("&")}function ja(t){if("string"==typeof t){if(t=t.toLowerCase(),32===(0,A.E1)(t))return"tx:"+t;if(-1===t.indexOf(":"))return t}else{if(Array.isArray(t))return"filter:*:"+Ua(t);if(class extends class{constructor(t){for(const a in t)this[a]=f(t[a])}}{static isForkEvent(t){return!(!t||!t._isForkEvent)}}.isForkEvent(t))throw za.warn("not implemented"),new Error("not implemented");if(t&&"object"==typeof t)return"filter:"+(t.address||"*")+":"+Ua(t.topics||[])}throw new Error("invalid event - "+t)}function $a(){return(new Date).getTime()}function Ya(t){return new Promise((a=>{setTimeout(a,t)}))}const Ha=["block","network","pending","poll"];class Wa{constructor(t,a,e){i(this,"tag",t),i(this,"listener",a),i(this,"once",e)}get event(){switch(this.type){case"tx":return this.hash;case"filter":return this.filter}return this.tag}get type(){return this.tag.split(":")[0]}get hash(){const t=this.tag.split(":");return"tx"!==t[0]?null:t[1]}get filter(){const t=this.tag.split(":");if("filter"!==t[0])return null;const a=t[1],e=""===(r=t[2])?[]:r.split(/&/g).map((t=>{if(""===t)return[];const a=t.split("|").map((t=>"null"===t?null:t));return 1===a.length?a[0]:a}));var r;const o={};return e.length>0&&(o.topics=e),a&&"*"!==a&&(o.address=a),o}pollable(){return this.tag.indexOf(":")>=0||Ha.indexOf(this.tag)>=0}}const Va={0:{symbol:"btc",p2pkh:0,p2sh:5,prefix:"bc"},2:{symbol:"ltc",p2pkh:48,p2sh:50,prefix:"ltc"},3:{symbol:"doge",p2pkh:30,p2sh:22},60:{symbol:"eth",ilk:"eth"},61:{symbol:"etc",ilk:"eth"},700:{symbol:"xdai",ilk:"eth"}};function Za(t){return(0,A.$m)(b.O$.from(t).toHexString(),32)}function Ka(t){return ha.encode((0,A.zo)([t,(0,A.p3)(Ra(Ra(t)),0,4)]))}class Ja{constructor(t,a,e){i(this,"provider",t),i(this,"name",e),i(this,"address",t.formatter.address(a))}_fetchBytes(t,a){return La(this,void 0,void 0,(function*(){const e={to:this.address,data:(0,A.xs)([t,Ca(this.name),a||"0x"])};try{const t=yield this.provider.call(e);if("0x"===t)return null;const a=b.O$.from((0,A.p3)(t,0,32)).toNumber(),r=b.O$.from((0,A.p3)(t,a,a+32)).toNumber();return(0,A.p3)(t,a+32,a+32+r)}catch(t){return t.code,r.Yd.errors.CALL_EXCEPTION,null}}))}_getAddress(t,a){const e=Va[String(t)];if(null==e&&za.throwError(`unsupported coin type: ${t}`,r.Yd.errors.UNSUPPORTED_OPERATION,{operation:`getAddress(${t})`}),"eth"===e.ilk)return this.provider.formatter.address(a);const o=(0,A.lE)(a);if(null!=e.p2pkh){const t=a.match(/^0x76a9([0-9a-f][0-9a-f])([0-9a-f]*)88ac$/);if(t){const a=parseInt(t[1],16);if(t[2].length===2*a&&a>=1&&a<=75)return Ka((0,A.zo)([[e.p2pkh],"0x"+t[2]]))}}if(null!=e.p2sh){const t=a.match(/^0xa9([0-9a-f][0-9a-f])([0-9a-f]*)87$/);if(t){const a=parseInt(t[1],16);if(t[2].length===2*a&&a>=1&&a<=75)return Ka((0,A.zo)([[e.p2sh],"0x"+t[2]]))}}if(null!=e.prefix){const t=o[1];let a=o[0];if(0===a?20!==t&&32!==t&&(a=-1):a=-1,a>=0&&o.length===2+t&&t>=1&&t<=75){const t=Ta().toWords(o.slice(2));return t.unshift(a),Ta().encode(e.prefix,t)}}return null}getAddress(t){return La(this,void 0,void 0,(function*(){if(null==t&&(t=60),60===t)try{const t={to:this.address,data:"0x3b3b57de"+Ca(this.name).substring(2)},a=yield this.provider.call(t);return"0x"===a||"0x0000000000000000000000000000000000000000000000000000000000000000"===a?null:this.provider.formatter.callAddress(a)}catch(t){if(t.code===r.Yd.errors.CALL_EXCEPTION)return null;throw t}const a=yield this._fetchBytes("0xf1cb7e06",Za(t));if(null==a||"0x"===a)return null;const e=this._getAddress(t,a);return null==e&&za.throwError("invalid or unsupported coin data",r.Yd.errors.UNSUPPORTED_OPERATION,{operation:`getAddress(${t})`,coinType:t,data:a}),e}))}getContentHash(){return La(this,void 0,void 0,(function*(){const t=yield this._fetchBytes("0xbc1c58d1");if(null==t||"0x"===t)return null;const a=t.match(/^0xe3010170(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);if(a){const t=parseInt(a[3],16);if(a[4].length===2*t)return"ipfs://"+ha.encode("0x"+a[1])}const e=t.match(/^0xe40101fa011b20([0-9a-f]*)$/);return e&&64===e[1].length?"bzz://"+e[1]:za.throwError("invalid or unsupported content hash data",r.Yd.errors.UNSUPPORTED_OPERATION,{operation:"getContentHash()",data:t})}))}getText(t){return La(this,void 0,void 0,(function*(){let a=F(t);a=(0,A.zo)([Za(64),Za(a.length),a]),a.length%32!=0&&(a=(0,A.zo)([a,(0,A.$m)("0x",32-t.length%32)]));const e=yield this._fetchBytes("0x59d1d43c",(0,A.Dv)(a));return null==e||"0x"===e?null:P(e)}))}}let Xa=null,Qa=1;class te extends ua{constructor(t){if(za.checkNew(new.target,ua),super(),this._events=[],this._emitted={block:-2},this.formatter=new.target.getFormatter(),i(this,"anyNetwork","any"===t),this.anyNetwork&&(t=this.detectNetwork()),t instanceof Promise)this._networkPromise=t,t.catch((t=>{})),this._ready().catch((t=>{}));else{const a=n(new.target,"getNetwork")(t);a?(i(this,"_network",a),this.emit("network",a,null)):za.throwArgumentError("invalid network","network",t)}this._maxInternalBlockNumber=-1024,this._lastBlockNumber=-2,this._pollingInterval=4e3,this._fastQueryDate=0}_ready(){return La(this,void 0,void 0,(function*(){if(null==this._network){let t=null;if(this._networkPromise)try{t=yield this._networkPromise}catch(t){}null==t&&(t=yield this.detectNetwork()),t||za.throwError("no network detected",r.Yd.errors.UNKNOWN_ERROR,{}),null==this._network&&(this.anyNetwork?this._network=t:i(this,"_network",t),this.emit("network",t,null))}return this._network}))}get ready(){return sa((()=>this._ready().then((t=>t),(t=>{if(t.code!==r.Yd.errors.NETWORK_ERROR||"noNetwork"!==t.event)throw t}))))}static getFormatter(){return null==Xa&&(Xa=new Ga),Xa}static getNetwork(t){return function(t){if(null==t)return null;if("number"==typeof t){for(const a in Oa){const e=Oa[a];if(e.chainId===t)return{name:e.name,chainId:e.chainId,ensAddress:e.ensAddress||null,_defaultProvider:e._defaultProvider||null}}return{chainId:t,name:"unknown"}}if("string"==typeof t){const a=Oa[t];return null==a?null:{name:a.name,chainId:a.chainId,ensAddress:a.ensAddress,_defaultProvider:a._defaultProvider||null}}const a=Oa[t.name];if(!a)return"number"!=typeof t.chainId&&Ea.throwArgumentError("invalid network chainId","network",t),t;0!==t.chainId&&t.chainId!==a.chainId&&Ea.throwArgumentError("network chainId mismatch","network",t);let e=t._defaultProvider||null;var r;return null==e&&a._defaultProvider&&(e=(r=a._defaultProvider)&&"function"==typeof r.renetwork?a._defaultProvider.renetwork(t):a._defaultProvider),{name:t.name,chainId:a.chainId,ensAddress:t.ensAddress||a.ensAddress||null,_defaultProvider:e}}(null==t?"homestead":t)}_getInternalBlockNumber(t){return La(this,void 0,void 0,(function*(){if(yield this._ready(),t>0)for(;this._internalBlockNumber;){const a=this._internalBlockNumber;try{const e=yield a;if($a()-e.respTime<=t)return e.blockNumber;break}catch(t){if(this._internalBlockNumber===a)break}}const a=$a(),e=s({blockNumber:this.perform("getBlockNumber",{}),networkError:this.getNetwork().then((t=>null),(t=>t))}).then((({blockNumber:t,networkError:r})=>{if(r)throw this._internalBlockNumber===e&&(this._internalBlockNumber=null),r;const o=$a();return(t=b.O$.from(t).toNumber())<this._maxInternalBlockNumber&&(t=this._maxInternalBlockNumber),this._maxInternalBlockNumber=t,this._setFastBlockNumber(t),{blockNumber:t,reqTime:a,respTime:o}}));return this._internalBlockNumber=e,e.catch((t=>{this._internalBlockNumber===e&&(this._internalBlockNumber=null)})),(yield e).blockNumber}))}poll(){return La(this,void 0,void 0,(function*(){const t=Qa++,a=[];let e=null;try{e=yield this._getInternalBlockNumber(100+this.pollingInterval/2)}catch(t){return void this.emit("error",t)}if(this._setFastBlockNumber(e),this.emit("poll",t,e),e!==this._lastBlockNumber){if(-2===this._emitted.block&&(this._emitted.block=e-1),Math.abs(this._emitted.block-e)>1e3)za.warn(`network block skew detected; skipping block events (emitted=${this._emitted.block} blockNumber${e})`),this.emit("error",za.makeError("network block skew detected",r.Yd.errors.NETWORK_ERROR,{blockNumber:e,event:"blockSkew",previousBlockNumber:this._emitted.block})),this.emit("block",e);else for(let t=this._emitted.block+1;t<=e;t++)this.emit("block",t);this._emitted.block!==e&&(this._emitted.block=e,Object.keys(this._emitted).forEach((t=>{if("block"===t)return;const a=this._emitted[t];"pending"!==a&&e-a>12&&delete this._emitted[t]}))),-2===this._lastBlockNumber&&(this._lastBlockNumber=e-1),this._events.forEach((t=>{switch(t.type){case"tx":{const e=t.hash;let r=this.getTransactionReceipt(e).then((t=>t&&null!=t.blockNumber?(this._emitted["t:"+e]=t.blockNumber,this.emit(e,t),null):null)).catch((t=>{this.emit("error",t)}));a.push(r);break}case"filter":{const r=t.filter;r.fromBlock=this._lastBlockNumber+1,r.toBlock=e;const o=this.getLogs(r).then((t=>{0!==t.length&&t.forEach((t=>{this._emitted["b:"+t.blockHash]=t.blockNumber,this._emitted["t:"+t.transactionHash]=t.blockNumber,this.emit(r,t)}))})).catch((t=>{this.emit("error",t)}));a.push(o);break}}})),this._lastBlockNumber=e,Promise.all(a).then((()=>{this.emit("didPoll",t)})).catch((t=>{this.emit("error",t)}))}else this.emit("didPoll",t)}))}resetEventsBlock(t){this._lastBlockNumber=t-1,this.polling&&this.poll()}get network(){return this._network}detectNetwork(){return La(this,void 0,void 0,(function*(){return za.throwError("provider does not support network detection",r.Yd.errors.UNSUPPORTED_OPERATION,{operation:"provider.detectNetwork"})}))}getNetwork(){return La(this,void 0,void 0,(function*(){const t=yield this._ready(),a=yield this.detectNetwork();if(t.chainId!==a.chainId){if(this.anyNetwork)return this._network=a,this._lastBlockNumber=-2,this._fastBlockNumber=null,this._fastBlockNumberPromise=null,this._fastQueryDate=0,this._emitted.block=-2,this._maxInternalBlockNumber=-1024,this._internalBlockNumber=null,this.emit("network",a,t),yield Ya(0),this._network;const e=za.makeError("underlying network changed",r.Yd.errors.NETWORK_ERROR,{event:"changed",network:t,detectedNetwork:a});throw this.emit("error",e),e}return t}))}get blockNumber(){return this._getInternalBlockNumber(100+this.pollingInterval/2).then((t=>{this._setFastBlockNumber(t)}),(t=>{})),null!=this._fastBlockNumber?this._fastBlockNumber:-1}get polling(){return null!=this._poller}set polling(t){t&&!this._poller?(this._poller=setInterval((()=>{this.poll()}),this.pollingInterval),this._bootstrapPoll||(this._bootstrapPoll=setTimeout((()=>{this.poll(),this._bootstrapPoll=setTimeout((()=>{this._poller||this.poll(),this._bootstrapPoll=null}),this.pollingInterval)}),0))):!t&&this._poller&&(clearInterval(this._poller),this._poller=null)}get pollingInterval(){return this._pollingInterval}set pollingInterval(t){if("number"!=typeof t||t<=0||parseInt(String(t))!=t)throw new Error("invalid polling interval");this._pollingInterval=t,this._poller&&(clearInterval(this._poller),this._poller=setInterval((()=>{this.poll()}),this._pollingInterval))}_getFastBlockNumber(){const t=$a();return t-this._fastQueryDate>2*this._pollingInterval&&(this._fastQueryDate=t,this._fastBlockNumberPromise=this.getBlockNumber().then((t=>((null==this._fastBlockNumber||t>this._fastBlockNumber)&&(this._fastBlockNumber=t),this._fastBlockNumber)))),this._fastBlockNumberPromise}_setFastBlockNumber(t){null!=this._fastBlockNumber&&t<this._fastBlockNumber||(this._fastQueryDate=$a(),(null==this._fastBlockNumber||t>this._fastBlockNumber)&&(this._fastBlockNumber=t,this._fastBlockNumberPromise=Promise.resolve(t)))}waitForTransaction(t,a,e){return La(this,void 0,void 0,(function*(){return this._waitForTransaction(t,null==a?1:a,e||0,null)}))}_waitForTransaction(t,a,e,o){return La(this,void 0,void 0,(function*(){const i=yield this.getTransactionReceipt(t);return(i?i.confirmations:0)>=a?i:new Promise(((i,n)=>{const s=[];let d=!1;const u=function(){return!!d||(d=!0,s.forEach((t=>{t()})),!1)},l=t=>{t.confirmations<a||u()||i(t)};if(this.on(t,l),s.push((()=>{this.removeListener(t,l)})),o){let e=o.startBlock,i=null;const l=s=>La(this,void 0,void 0,(function*(){d||(yield Ya(1e3),this.getTransactionCount(o.from).then((h=>La(this,void 0,void 0,(function*(){if(!d){if(h<=o.nonce)e=s;else{{const a=yield this.getTransaction(t);if(a&&null!=a.blockNumber)return}for(null==i&&(i=e-3,i<o.startBlock&&(i=o.startBlock));i<=s;){if(d)return;const e=yield this.getBlockWithTransactions(i);for(let i=0;i<e.transactions.length;i++){const s=e.transactions[i];if(s.hash===t)return;if(s.from===o.from&&s.nonce===o.nonce){if(d)return;const e=yield this.waitForTransaction(s.hash,a);if(u())return;let i="replaced";return s.data===o.data&&s.to===o.to&&s.value.eq(o.value)?i="repriced":"0x"===s.data&&s.from===s.to&&s.value.isZero()&&(i="cancelled"),void n(za.makeError("transaction was replaced",r.Yd.errors.TRANSACTION_REPLACED,{cancelled:"replaced"===i||"cancelled"===i,reason:i,replacement:this._wrapTransaction(s),hash:t,receipt:e}))}}i++}}d||this.once("block",l)}}))),(t=>{d||this.once("block",l)})))}));if(d)return;this.once("block",l),s.push((()=>{this.removeListener("block",l)}))}if("number"==typeof e&&e>0){const t=setTimeout((()=>{u()||n(za.makeError("timeout exceeded",r.Yd.errors.TIMEOUT,{timeout:e}))}),e);t.unref&&t.unref(),s.push((()=>{clearTimeout(t)}))}}))}))}getBlockNumber(){return La(this,void 0,void 0,(function*(){return this._getInternalBlockNumber(0)}))}getGasPrice(){return La(this,void 0,void 0,(function*(){yield this.getNetwork();const t=yield this.perform("getGasPrice",{});try{return b.O$.from(t)}catch(a){return za.throwError("bad result from backend",r.Yd.errors.SERVER_ERROR,{method:"getGasPrice",result:t,error:a})}}))}getBalance(t,a){return La(this,void 0,void 0,(function*(){yield this.getNetwork();const e=yield s({address:this._getAddress(t),blockTag:this._getBlockTag(a)}),o=yield this.perform("getBalance",e);try{return b.O$.from(o)}catch(t){return za.throwError("bad result from backend",r.Yd.errors.SERVER_ERROR,{method:"getBalance",params:e,result:o,error:t})}}))}getTransactionCount(t,a){return La(this,void 0,void 0,(function*(){yield this.getNetwork();const e=yield s({address:this._getAddress(t),blockTag:this._getBlockTag(a)}),o=yield this.perform("getTransactionCount",e);try{return b.O$.from(o).toNumber()}catch(t){return za.throwError("bad result from backend",r.Yd.errors.SERVER_ERROR,{method:"getTransactionCount",params:e,result:o,error:t})}}))}getCode(t,a){return La(this,void 0,void 0,(function*(){yield this.getNetwork();const e=yield s({address:this._getAddress(t),blockTag:this._getBlockTag(a)}),o=yield this.perform("getCode",e);try{return(0,A.Dv)(o)}catch(t){return za.throwError("bad result from backend",r.Yd.errors.SERVER_ERROR,{method:"getCode",params:e,result:o,error:t})}}))}getStorageAt(t,a,e){return La(this,void 0,void 0,(function*(){yield this.getNetwork();const o=yield s({address:this._getAddress(t),blockTag:this._getBlockTag(e),position:Promise.resolve(a).then((t=>(0,A.$P)(t)))}),i=yield this.perform("getStorageAt",o);try{return(0,A.Dv)(i)}catch(t){return za.throwError("bad result from backend",r.Yd.errors.SERVER_ERROR,{method:"getStorageAt",params:o,result:i,error:t})}}))}_wrapTransaction(t,a,e){if(null!=a&&32!==(0,A.E1)(a))throw new Error("invalid response - sendTransaction");const o=t;return null!=a&&t.hash!==a&&za.throwError("Transaction hash mismatch from Provider.sendTransaction.",r.Yd.errors.UNKNOWN_ERROR,{expectedHash:t.hash,returnedHash:a}),o.wait=(a,o)=>La(this,void 0,void 0,(function*(){let i;null==a&&(a=1),null==o&&(o=0),0!==a&&null!=e&&(i={data:t.data,from:t.from,nonce:t.nonce,to:t.to,value:t.value,startBlock:e});const n=yield this._waitForTransaction(t.hash,a,o,i);return null==n&&0===a?null:(this._emitted["t:"+t.hash]=n.blockNumber,0===n.status&&za.throwError("transaction failed",r.Yd.errors.CALL_EXCEPTION,{transactionHash:t.hash,transaction:t,receipt:n}),n)})),o}sendTransaction(t){return La(this,void 0,void 0,(function*(){yield this.getNetwork();const a=yield Promise.resolve(t).then((t=>(0,A.Dv)(t))),e=this.formatter.transaction(t);null==e.confirmations&&(e.confirmations=0);const r=yield this._getInternalBlockNumber(100+2*this.pollingInterval);try{const t=yield this.perform("sendTransaction",{signedTransaction:a});return this._wrapTransaction(e,t,r)}catch(t){throw t.transaction=e,t.transactionHash=e.hash,t}}))}_getTransactionRequest(t){return La(this,void 0,void 0,(function*(){const a=yield t,e={};return["from","to"].forEach((t=>{null!=a[t]&&(e[t]=Promise.resolve(a[t]).then((t=>t?this._getAddress(t):null)))})),["gasLimit","gasPrice","maxFeePerGas","maxPriorityFeePerGas","value"].forEach((t=>{null!=a[t]&&(e[t]=Promise.resolve(a[t]).then((t=>t?b.O$.from(t):null)))})),["type"].forEach((t=>{null!=a[t]&&(e[t]=Promise.resolve(a[t]).then((t=>null!=t?t:null)))})),a.accessList&&(e.accessList=this.formatter.accessList(a.accessList)),["data"].forEach((t=>{null!=a[t]&&(e[t]=Promise.resolve(a[t]).then((t=>t?(0,A.Dv)(t):null)))})),this.formatter.transactionRequest(yield s(e))}))}_getFilter(t){return La(this,void 0,void 0,(function*(){t=yield t;const a={};return null!=t.address&&(a.address=this._getAddress(t.address)),["blockHash","topics"].forEach((e=>{null!=t[e]&&(a[e]=t[e])})),["fromBlock","toBlock"].forEach((e=>{null!=t[e]&&(a[e]=this._getBlockTag(t[e]))})),this.formatter.filter(yield s(a))}))}call(t,a){return La(this,void 0,void 0,(function*(){yield this.getNetwork();const e=yield s({transaction:this._getTransactionRequest(t),blockTag:this._getBlockTag(a)}),o=yield this.perform("call",e);try{return(0,A.Dv)(o)}catch(t){return za.throwError("bad result from backend",r.Yd.errors.SERVER_ERROR,{method:"call",params:e,result:o,error:t})}}))}estimateGas(t){return La(this,void 0,void 0,(function*(){yield this.getNetwork();const a=yield s({transaction:this._getTransactionRequest(t)}),e=yield this.perform("estimateGas",a);try{return b.O$.from(e)}catch(t){return za.throwError("bad result from backend",r.Yd.errors.SERVER_ERROR,{method:"estimateGas",params:a,result:e,error:t})}}))}_getAddress(t){return La(this,void 0,void 0,(function*(){const a=yield this.resolveName(t);return null==a&&za.throwError("ENS name not configured",r.Yd.errors.UNSUPPORTED_OPERATION,{operation:`resolveName(${JSON.stringify(t)})`}),a}))}_getBlock(t,a){return La(this,void 0,void 0,(function*(){yield this.getNetwork(),t=yield t;let e=-128;const r={includeTransactions:!!a};if((0,A.A7)(t,32))r.blockHash=t;else try{r.blockTag=this.formatter.blockTag(yield this._getBlockTag(t)),(0,A.A7)(r.blockTag)&&(e=parseInt(r.blockTag.substring(2),16))}catch(a){za.throwArgumentError("invalid block hash or block tag","blockHashOrBlockTag",t)}return sa((()=>La(this,void 0,void 0,(function*(){const t=yield this.perform("getBlock",r);if(null==t)return null!=r.blockHash&&null==this._emitted["b:"+r.blockHash]||null!=r.blockTag&&e>this._emitted.block?null:void 0;if(a){let a=null;for(let e=0;e<t.transactions.length;e++){const r=t.transactions[e];if(null==r.blockNumber)r.confirmations=0;else if(null==r.confirmations){null==a&&(a=yield this._getInternalBlockNumber(100+2*this.pollingInterval));let t=a-r.blockNumber+1;t<=0&&(t=1),r.confirmations=t}}const e=this.formatter.blockWithTransactions(t);return e.transactions=e.transactions.map((t=>this._wrapTransaction(t))),e}return this.formatter.block(t)}))),{oncePoll:this})}))}getBlock(t){return this._getBlock(t,!1)}getBlockWithTransactions(t){return this._getBlock(t,!0)}getTransaction(t){return La(this,void 0,void 0,(function*(){yield this.getNetwork(),t=yield t;const a={transactionHash:this.formatter.hash(t,!0)};return sa((()=>La(this,void 0,void 0,(function*(){const e=yield this.perform("getTransaction",a);if(null==e)return null==this._emitted["t:"+t]?null:void 0;const r=this.formatter.transactionResponse(e);if(null==r.blockNumber)r.confirmations=0;else if(null==r.confirmations){let t=(yield this._getInternalBlockNumber(100+2*this.pollingInterval))-r.blockNumber+1;t<=0&&(t=1),r.confirmations=t}return this._wrapTransaction(r)}))),{oncePoll:this})}))}getTransactionReceipt(t){return La(this,void 0,void 0,(function*(){yield this.getNetwork(),t=yield t;const a={transactionHash:this.formatter.hash(t,!0)};return sa((()=>La(this,void 0,void 0,(function*(){const e=yield this.perform("getTransactionReceipt",a);if(null==e)return null==this._emitted["t:"+t]?null:void 0;if(null==e.blockHash)return;const r=this.formatter.receipt(e);if(null==r.blockNumber)r.confirmations=0;else if(null==r.confirmations){let t=(yield this._getInternalBlockNumber(100+2*this.pollingInterval))-r.blockNumber+1;t<=0&&(t=1),r.confirmations=t}return r}))),{oncePoll:this})}))}getLogs(t){return La(this,void 0,void 0,(function*(){yield this.getNetwork();const a=yield s({filter:this._getFilter(t)}),e=yield this.perform("getLogs",a);return e.forEach((t=>{null==t.removed&&(t.removed=!1)})),Ga.arrayOf(this.formatter.filterLog.bind(this.formatter))(e)}))}getEtherPrice(){return La(this,void 0,void 0,(function*(){return yield this.getNetwork(),this.perform("getEtherPrice",{})}))}_getBlockTag(t){return La(this,void 0,void 0,(function*(){if("number"==typeof(t=yield t)&&t<0){t%1&&za.throwArgumentError("invalid BlockTag","blockTag",t);let a=yield this._getInternalBlockNumber(100+2*this.pollingInterval);return a+=t,a<0&&(a=0),this.formatter.blockTag(a)}return this.formatter.blockTag(t)}))}getResolver(t){return La(this,void 0,void 0,(function*(){try{const a=yield this._getResolver(t);return null==a?null:new Ja(this,a,t)}catch(t){return t.code,r.Yd.errors.CALL_EXCEPTION,null}}))}_getResolver(t){return La(this,void 0,void 0,(function*(){const a=yield this.getNetwork();a.ensAddress||za.throwError("network does not support ENS",r.Yd.errors.UNSUPPORTED_OPERATION,{operation:"ENS",network:a.name});const e={to:a.ensAddress,data:"0x0178b8bf"+Ca(t).substring(2)};try{return this.formatter.callAddress(yield this.call(e))}catch(t){if(t.code===r.Yd.errors.CALL_EXCEPTION)return null;throw t}}))}resolveName(t){return La(this,void 0,void 0,(function*(){t=yield t;try{return Promise.resolve(this.formatter.address(t))}catch(a){if((0,A.A7)(t))throw a}"string"!=typeof t&&za.throwArgumentError("invalid ENS name","name",t);const a=yield this.getResolver(t);return a?yield a.getAddress():null}))}lookupAddress(t){return La(this,void 0,void 0,(function*(){t=yield t;const a=(t=this.formatter.address(t)).substring(2).toLowerCase()+".addr.reverse",e=yield this._getResolver(a);if(!e)return null;let r=(0,A.lE)(yield this.call({to:e,data:"0x691f3431"+Ca(a).substring(2)}));if(r.length<32||!b.O$.from(r.slice(0,32)).eq(32))return null;if(r=r.slice(32),r.length<32)return null;const o=b.O$.from(r.slice(0,32)).toNumber();if(r=r.slice(32),o>r.length)return null;const i=P(r.slice(0,o));return(yield this.resolveName(i))!=t?null:i}))}perform(t,a){return za.throwError(t+" not implemented",r.Yd.errors.NOT_IMPLEMENTED,{operation:t})}_startEvent(t){this.polling=this._events.filter((t=>t.pollable())).length>0}_stopEvent(t){this.polling=this._events.filter((t=>t.pollable())).length>0}_addEventListener(t,a,e){const r=new Wa(ja(t),a,e);return this._events.push(r),this._startEvent(r),this}on(t,a){return this._addEventListener(t,a,!1)}once(t,a){return this._addEventListener(t,a,!0)}emit(t,...a){let e=!1,r=[],o=ja(t);return this._events=this._events.filter((t=>t.tag!==o||(setTimeout((()=>{t.listener.apply(this,a)}),0),e=!0,!t.once||(r.push(t),!1)))),r.forEach((t=>{this._stopEvent(t)})),e}listenerCount(t){if(!t)return this._events.length;let a=ja(t);return this._events.filter((t=>t.tag===a)).length}listeners(t){if(null==t)return this._events.map((t=>t.listener));let a=ja(t);return this._events.filter((t=>t.tag===a)).map((t=>t.listener))}off(t,a){if(null==a)return this.removeAllListeners(t);const e=[];let r=!1,o=ja(t);return this._events=this._events.filter((t=>t.tag!==o||t.listener!=a||!!r||(r=!0,e.push(t),!1))),e.forEach((t=>{this._stopEvent(t)})),this}removeAllListeners(t){let a=[];if(null==t)a=this._events,this._events=[];else{const e=ja(t);this._events=this._events.filter((t=>t.tag!==e||(a.push(t),!1)))}return a.forEach((t=>{this._stopEvent(t)})),this}}var ae=function(t,a,e,r){return new(e||(e=Promise))((function(o,i){function n(t){try{d(r.next(t))}catch(t){i(t)}}function s(t){try{d(r.throw(t))}catch(t){i(t)}}function d(t){var a;t.done?o(t.value):(a=t.value,a instanceof e?a:new e((function(t){t(a)}))).then(n,s)}d((r=r.apply(t,a||[])).next())}))};const ee=new r.Yd(c),re=["call","estimateGas"];function oe(t,a,e){if("call"===t&&a.code===r.Yd.errors.SERVER_ERROR){const t=a.error;if(t&&t.message.match("reverted")&&(0,A.A7)(t.data))return t.data;ee.throwError("missing revert data in call exception",r.Yd.errors.CALL_EXCEPTION,{error:a,data:"0x"})}let o=a.message;a.code===r.Yd.errors.SERVER_ERROR&&a.error&&"string"==typeof a.error.message?o=a.error.message:"string"==typeof a.body?o=a.body:"string"==typeof a.responseText&&(o=a.responseText),o=(o||"").toLowerCase();const i=e.transaction||e.signedTransaction;throw o.match(/insufficient funds|base fee exceeds gas limit/)&&ee.throwError("insufficient funds for intrinsic transaction cost",r.Yd.errors.INSUFFICIENT_FUNDS,{error:a,method:t,transaction:i}),o.match(/nonce too low/)&&ee.throwError("nonce has already been used",r.Yd.errors.NONCE_EXPIRED,{error:a,method:t,transaction:i}),o.match(/replacement transaction underpriced/)&&ee.throwError("replacement fee too low",r.Yd.errors.REPLACEMENT_UNDERPRICED,{error:a,method:t,transaction:i}),o.match(/only replay-protected/)&&ee.throwError("legacy pre-eip-155 transactions not supported",r.Yd.errors.UNSUPPORTED_OPERATION,{error:a,method:t,transaction:i}),re.indexOf(t)>=0&&o.match(/gas required exceeds allowance|always failing transaction|execution reverted/)&&ee.throwError("cannot estimate gas; transaction may fail or may require manual gas limit",r.Yd.errors.UNPREDICTABLE_GAS_LIMIT,{error:a,method:t,transaction:i}),a}function ie(t){return new Promise((function(a){setTimeout(a,t)}))}function ne(t){if(t.error){const a=new Error(t.error.message);throw a.code=t.error.code,a.data=t.error.data,a}return t.result}function se(t){return t?t.toLowerCase():t}const de={};class ue extends v{constructor(t,a,e){if(ee.checkNew(new.target,ue),super(),t!==de)throw new Error("do not call the JsonRpcSigner constructor directly; use provider.getSigner");i(this,"provider",a),null==e&&(e=0),"string"==typeof e?(i(this,"_address",this.provider.formatter.address(e)),i(this,"_index",null)):"number"==typeof e?(i(this,"_index",e),i(this,"_address",null)):ee.throwArgumentError("invalid address or index","addressOrIndex",e)}connect(t){return ee.throwError("cannot alter JSON-RPC Signer connection",r.Yd.errors.UNSUPPORTED_OPERATION,{operation:"connect"})}connectUnchecked(){return new le(de,this.provider,this._address||this._index)}getAddress(){return this._address?Promise.resolve(this._address):this.provider.send("eth_accounts",[]).then((t=>(t.length<=this._index&&ee.throwError("unknown account #"+this._index,r.Yd.errors.UNSUPPORTED_OPERATION,{operation:"getAddress"}),this.provider.formatter.address(t[this._index]))))}sendUncheckedTransaction(t){t=d(t);const a=this.getAddress().then((t=>(t&&(t=t.toLowerCase()),t)));if(null==t.gasLimit){const e=d(t);e.from=a,t.gasLimit=this.provider.estimateGas(e)}return null!=t.to&&(t.to=Promise.resolve(t.to).then((t=>ae(this,void 0,void 0,(function*(){if(null==t)return null;const a=yield this.provider.resolveName(t);return null==a&&ee.throwArgumentError("provided ENS name resolves to null","tx.to",t),a}))))),s({tx:s(t),sender:a}).then((({tx:a,sender:e})=>{null!=a.from?a.from.toLowerCase()!==e&&ee.throwArgumentError("from address mismatch","transaction",t):a.from=e;const r=this.provider.constructor.hexlifyTransaction(a,{from:!0});return this.provider.send("eth_sendTransaction",[r]).then((t=>t),(t=>oe("sendTransaction",t,r)))}))}signTransaction(t){return ee.throwError("signing transactions is unsupported",r.Yd.errors.UNSUPPORTED_OPERATION,{operation:"signTransaction"})}sendTransaction(t){return ae(this,void 0,void 0,(function*(){const a=yield this.provider._getInternalBlockNumber(100+2*this.provider.pollingInterval),e=yield this.sendUncheckedTransaction(t);try{return yield sa((()=>ae(this,void 0,void 0,(function*(){const t=yield this.provider.getTransaction(e);if(null!==t)return this.provider._wrapTransaction(t,e,a)}))),{oncePoll:this.provider})}catch(t){throw t.transactionHash=e,t}}))}signMessage(t){return ae(this,void 0,void 0,(function*(){const a="string"==typeof t?F(t):t,e=yield this.getAddress();return yield this.provider.send("eth_sign",[e.toLowerCase(),(0,A.Dv)(a)])}))}_signTypedData(t,a,e){return ae(this,void 0,void 0,(function*(){const r=yield Z.resolveNames(t,a,e,(t=>this.provider.resolveName(t))),o=yield this.getAddress();return yield this.provider.send("eth_signTypedData_v4",[o.toLowerCase(),JSON.stringify(Z.getPayload(r.domain,a,r.value))])}))}unlock(t){return ae(this,void 0,void 0,(function*(){const a=this.provider,e=yield this.getAddress();return a.send("personal_unlockAccount",[e.toLowerCase(),t,null])}))}}class le extends ue{sendTransaction(t){return this.sendUncheckedTransaction(t).then((t=>({hash:t,nonce:null,gasLimit:null,gasPrice:null,data:null,value:null,chainId:null,confirmations:0,from:null,wait:a=>this.provider.waitForTransaction(t,a)})))}}const he={chainId:!0,data:!0,gasLimit:!0,gasPrice:!0,nonce:!0,to:!0,value:!0,type:!0,accessList:!0,maxFeePerGas:!0,maxPriorityFeePerGas:!0};class fe extends te{constructor(t,a){ee.checkNew(new.target,fe);let e=a;null==e&&(e=new Promise(((t,a)=>{setTimeout((()=>{this.detectNetwork().then((a=>{t(a)}),(t=>{a(t)}))}),0)}))),super(e),t||(t=n(this.constructor,"defaultUrl")()),i(this,"connection","string"==typeof t?Object.freeze({url:t}):Object.freeze(d(t))),this._nextId=42}get _cache(){return null==this._eventLoopCache&&(this._eventLoopCache={}),this._eventLoopCache}static defaultUrl(){return"http://localhost:8545"}detectNetwork(){return this._cache.detectNetwork||(this._cache.detectNetwork=this._uncachedDetectNetwork(),setTimeout((()=>{this._cache.detectNetwork=null}),0)),this._cache.detectNetwork}_uncachedDetectNetwork(){return ae(this,void 0,void 0,(function*(){yield ie(0);let t=null;try{t=yield this.send("eth_chainId",[])}catch(a){try{t=yield this.send("net_version",[])}catch(t){}}if(null!=t){const a=n(this.constructor,"getNetwork");try{return a(b.O$.from(t).toNumber())}catch(a){return ee.throwError("could not detect network",r.Yd.errors.NETWORK_ERROR,{chainId:t,event:"invalidNetwork",serverError:a})}}return ee.throwError("could not detect network",r.Yd.errors.NETWORK_ERROR,{event:"noNetwork"})}))}getSigner(t){return new ue(de,this,t)}getUncheckedSigner(t){return this.getSigner(t).connectUnchecked()}listAccounts(){return this.send("eth_accounts",[]).then((t=>t.map((t=>this.formatter.address(t)))))}send(t,a){const e={method:t,params:a,id:this._nextId++,jsonrpc:"2.0"};this.emit("debug",{action:"request",request:f(e),provider:this});const r=["eth_chainId","eth_blockNumber"].indexOf(t)>=0;if(r&&this._cache[t])return this._cache[t];const o=na(this.connection,JSON.stringify(e),ne).then((t=>(this.emit("debug",{action:"response",request:e,response:t,provider:this}),t)),(t=>{throw this.emit("debug",{action:"response",error:t,request:e,provider:this}),t}));return r&&(this._cache[t]=o,setTimeout((()=>{this._cache[t]=null}),0)),o}prepareRequest(t,a){switch(t){case"getBlockNumber":return["eth_blockNumber",[]];case"getGasPrice":return["eth_gasPrice",[]];case"getBalance":return["eth_getBalance",[se(a.address),a.blockTag]];case"getTransactionCount":return["eth_getTransactionCount",[se(a.address),a.blockTag]];case"getCode":return["eth_getCode",[se(a.address),a.blockTag]];case"getStorageAt":return["eth_getStorageAt",[se(a.address),a.position,a.blockTag]];case"sendTransaction":return["eth_sendRawTransaction",[a.signedTransaction]];case"getBlock":return a.blockTag?["eth_getBlockByNumber",[a.blockTag,!!a.includeTransactions]]:a.blockHash?["eth_getBlockByHash",[a.blockHash,!!a.includeTransactions]]:null;case"getTransaction":return["eth_getTransactionByHash",[a.transactionHash]];case"getTransactionReceipt":return["eth_getTransactionReceipt",[a.transactionHash]];case"call":return["eth_call",[n(this.constructor,"hexlifyTransaction")(a.transaction,{from:!0}),a.blockTag]];case"estimateGas":return["eth_estimateGas",[n(this.constructor,"hexlifyTransaction")(a.transaction,{from:!0})]];case"getLogs":return a.filter&&null!=a.filter.address&&(a.filter.address=se(a.filter.address)),["eth_getLogs",[a.filter]]}return null}perform(t,a){return ae(this,void 0,void 0,(function*(){if("call"===t||"estimateGas"===t){const t=a.transaction;if(t&&null!=t.type&&b.O$.from(t.type).isZero()&&null==t.maxFeePerGas&&null==t.maxPriorityFeePerGas){const e=yield this.getFeeData();null==e.maxFeePerGas&&null==e.maxPriorityFeePerGas&&((a=d(a)).transaction=d(t),delete a.transaction.type)}}const e=this.prepareRequest(t,a);null==e&&ee.throwError(t+" not implemented",r.Yd.errors.NOT_IMPLEMENTED,{operation:t});try{return yield this.send(e[0],e[1])}catch(e){return oe(t,e,a)}}))}_startEvent(t){"pending"===t.tag&&this._startPending(),super._startEvent(t)}_startPending(){if(null!=this._pendingFilter)return;const t=this,a=this.send("eth_newPendingTransactionFilter",[]);this._pendingFilter=a,a.then((function(e){return function r(){t.send("eth_getFilterChanges",[e]).then((function(e){if(t._pendingFilter!=a)return null;let r=Promise.resolve();return e.forEach((function(a){t._emitted["t:"+a.toLowerCase()]="pending",r=r.then((function(){return t.getTransaction(a).then((function(a){return t.emit("pending",a),null}))}))})),r.then((function(){return ie(1e3)}))})).then((function(){if(t._pendingFilter==a)return setTimeout((function(){r()}),0),null;t.send("eth_uninstallFilter",[e])})).catch((t=>{}))}(),e})).catch((t=>{}))}_stopEvent(t){"pending"===t.tag&&0===this.listenerCount("pending")&&(this._pendingFilter=null),super._stopEvent(t)}static hexlifyTransaction(t,a){const e=d(he);if(a)for(const t in a)a[t]&&(e[t]=!0);var r,i;i=e,(r=t)&&"object"==typeof r||o.throwArgumentError("invalid object","object",r),Object.keys(r).forEach((t=>{i[t]||o.throwArgumentError("invalid object key - "+t,"transaction:"+t,r)}));const n={};return["gasLimit","gasPrice","type","maxFeePerGas","maxPriorityFeePerGas","nonce","value"].forEach((function(a){if(null==t[a])return;const e=(0,A.$P)(t[a]);"gasLimit"===a&&(a="gas"),n[a]=e})),["from","to","data"].forEach((function(a){null!=t[a]&&(n[a]=(0,A.Dv)(t[a]))})),t.accessList&&(n.accessList=Kt(t.accessList)),n}}const ce=new r.Yd(c);let me=1;function pe(t,a){const e="Web3LegacyFetcher";return function(r,o){"eth_sign"==r&&(t.isMetaMask||t.isStatus)&&(r="personal_sign",o=[o[1],o[0]]);const i={method:r,params:o,id:me++,jsonrpc:"2.0"};return new Promise(((t,r)=>{this.emit("debug",{action:"request",fetcher:e,request:f(i),provider:this}),a(i,((a,o)=>{if(a)return this.emit("debug",{action:"response",fetcher:e,error:a,request:i,provider:this}),r(a);if(this.emit("debug",{action:"response",fetcher:e,request:i,response:o,provider:this}),o.error){const t=new Error(o.error.message);return t.code=o.error.code,t.data=o.error.data,r(t)}t(o.result)}))}))}}class ye extends fe{constructor(t,a){ce.checkNew(new.target,ye),null==t&&ce.throwArgumentError("missing provider","provider",t);let e=null,r=null,o=null;"function"==typeof t?(e="unknown:",r=t):(e=t.host||t.path||"",!e&&t.isMetaMask&&(e="metamask"),o=t,t.request?(""===e&&(e="eip-1193:"),r=function(t){return function(a,e){null==e&&(e=[]),"eth_sign"==a&&(t.isMetaMask||t.isStatus)&&(a="personal_sign",e=[e[1],e[0]]);const r={method:a,params:e};return this.emit("debug",{action:"request",fetcher:"Eip1193Fetcher",request:f(r),provider:this}),t.request(r).then((t=>(this.emit("debug",{action:"response",fetcher:"Eip1193Fetcher",request:r,response:t,provider:this}),t)),(t=>{throw this.emit("debug",{action:"response",fetcher:"Eip1193Fetcher",request:r,error:t,provider:this}),t}))}}(t)):t.sendAsync?r=pe(t,t.sendAsync.bind(t)):t.send?r=pe(t,t.send.bind(t)):ce.throwArgumentError("unsupported provider","provider",t),e||(e="unknown:")),super(e,a),i(this,"jsonRpcFetchFunc",r),i(this,"provider",o)}send(t,a){return this.jsonRpcFetchFunc(t,a)}}},1843:(t,a,e)=>{"use strict";e.d(a,{J:()=>f,c:()=>u});var r=e(3286),o=e(711);const i=new o.Yd("rlp/5.4.0");function n(t){const a=[];for(;t;)a.unshift(255&t),t>>=8;return a}function s(t,a,e){let r=0;for(let o=0;o<e;o++)r=256*r+t[a+o];return r}function d(t){if(Array.isArray(t)){let a=[];if(t.forEach((function(t){a=a.concat(d(t))})),a.length<=55)return a.unshift(192+a.length),a;const e=n(a.length);return e.unshift(247+e.length),e.concat(a)}(0,r.Zq)(t)||i.throwArgumentError("RLP object must be BytesLike","object",t);const a=Array.prototype.slice.call((0,r.lE)(t));if(1===a.length&&a[0]<=127)return a;if(a.length<=55)return a.unshift(128+a.length),a;const e=n(a.length);return e.unshift(183+e.length),e.concat(a)}function u(t){return(0,r.Dv)(d(t))}function l(t,a,e,r){const n=[];for(;e<a+1+r;){const s=h(t,e);n.push(s.result),(e+=s.consumed)>a+1+r&&i.throwError("child data too short",o.Yd.errors.BUFFER_OVERRUN,{})}return{consumed:1+r,result:n}}function h(t,a){if(0===t.length&&i.throwError("data too short",o.Yd.errors.BUFFER_OVERRUN,{}),t[a]>=248){const e=t[a]-247;a+1+e>t.length&&i.throwError("data short segment too short",o.Yd.errors.BUFFER_OVERRUN,{});const r=s(t,a+1,e);return a+1+e+r>t.length&&i.throwError("data long segment too short",o.Yd.errors.BUFFER_OVERRUN,{}),l(t,a,a+1+e,e+r)}if(t[a]>=192){const e=t[a]-192;return a+1+e>t.length&&i.throwError("data array too short",o.Yd.errors.BUFFER_OVERRUN,{}),l(t,a,a+1,e)}if(t[a]>=184){const e=t[a]-183;a+1+e>t.length&&i.throwError("data array too short",o.Yd.errors.BUFFER_OVERRUN,{});const n=s(t,a+1,e);return a+1+e+n>t.length&&i.throwError("data array too short",o.Yd.errors.BUFFER_OVERRUN,{}),{consumed:1+e+n,result:(0,r.Dv)(t.slice(a+1+e,a+1+e+n))}}if(t[a]>=128){const e=t[a]-128;return a+1+e>t.length&&i.throwError("data too short",o.Yd.errors.BUFFER_OVERRUN,{}),{consumed:1+e,result:(0,r.Dv)(t.slice(a+1,a+1+e))}}return{consumed:1,result:(0,r.Dv)(t[a])}}function f(t){const a=(0,r.lE)(t),e=h(a,0);return e.consumed!==a.length&&i.throwArgumentError("invalid rlp data","data",t),e.result}},2500:function(t,a,e){!function(t,a){"use strict";function r(t,a){if(!t)throw new Error(a||"Assertion failed")}function o(t,a){t.super_=a;var e=function(){};e.prototype=a.prototype,t.prototype=new e,t.prototype.constructor=t}function i(t,a,e){if(i.isBN(t))return t;this.negative=0,this.words=null,this.length=0,this.red=null,null!==t&&("le"!==a&&"be"!==a||(e=a,a=10),this._init(t||0,a||10,e||"be"))}var n;"object"==typeof t?t.exports=i:a.BN=i,i.BN=i,i.wordSize=26;try{n="undefined"!=typeof window&&void 0!==window.Buffer?window.Buffer:e(2808).Buffer}catch(t){}function s(t,a){var e=t.charCodeAt(a);return e>=65&&e<=70?e-55:e>=97&&e<=102?e-87:e-48&15}function d(t,a,e){var r=s(t,e);return e-1>=a&&(r|=s(t,e-1)<<4),r}function u(t,a,e,r){for(var o=0,i=Math.min(t.length,e),n=a;n<i;n++){var s=t.charCodeAt(n)-48;o*=r,o+=s>=49?s-49+10:s>=17?s-17+10:s}return o}i.isBN=function(t){return t instanceof i||null!==t&&"object"==typeof t&&t.constructor.wordSize===i.wordSize&&Array.isArray(t.words)},i.max=function(t,a){return t.cmp(a)>0?t:a},i.min=function(t,a){return t.cmp(a)<0?t:a},i.prototype._init=function(t,a,e){if("number"==typeof t)return this._initNumber(t,a,e);if("object"==typeof t)return this._initArray(t,a,e);"hex"===a&&(a=16),r(a===(0|a)&&a>=2&&a<=36);var o=0;"-"===(t=t.toString().replace(/\s+/g,""))[0]&&(o++,this.negative=1),o<t.length&&(16===a?this._parseHex(t,o,e):(this._parseBase(t,a,o),"le"===e&&this._initArray(this.toArray(),a,e)))},i.prototype._initNumber=function(t,a,e){t<0&&(this.negative=1,t=-t),t<67108864?(this.words=[67108863&t],this.length=1):t<4503599627370496?(this.words=[67108863&t,t/67108864&67108863],this.length=2):(r(t<9007199254740992),this.words=[67108863&t,t/67108864&67108863,1],this.length=3),"le"===e&&this._initArray(this.toArray(),a,e)},i.prototype._initArray=function(t,a,e){if(r("number"==typeof t.length),t.length<=0)return this.words=[0],this.length=1,this;this.length=Math.ceil(t.length/3),this.words=new Array(this.length);for(var o=0;o<this.length;o++)this.words[o]=0;var i,n,s=0;if("be"===e)for(o=t.length-1,i=0;o>=0;o-=3)n=t[o]|t[o-1]<<8|t[o-2]<<16,this.words[i]|=n<<s&67108863,this.words[i+1]=n>>>26-s&67108863,(s+=24)>=26&&(s-=26,i++);else if("le"===e)for(o=0,i=0;o<t.length;o+=3)n=t[o]|t[o+1]<<8|t[o+2]<<16,this.words[i]|=n<<s&67108863,this.words[i+1]=n>>>26-s&67108863,(s+=24)>=26&&(s-=26,i++);return this.strip()},i.prototype._parseHex=function(t,a,e){this.length=Math.ceil((t.length-a)/6),this.words=new Array(this.length);for(var r=0;r<this.length;r++)this.words[r]=0;var o,i=0,n=0;if("be"===e)for(r=t.length-1;r>=a;r-=2)o=d(t,a,r)<<i,this.words[n]|=67108863&o,i>=18?(i-=18,n+=1,this.words[n]|=o>>>26):i+=8;else for(r=(t.length-a)%2==0?a+1:a;r<t.length;r+=2)o=d(t,a,r)<<i,this.words[n]|=67108863&o,i>=18?(i-=18,n+=1,this.words[n]|=o>>>26):i+=8;this.strip()},i.prototype._parseBase=function(t,a,e){this.words=[0],this.length=1;for(var r=0,o=1;o<=67108863;o*=a)r++;r--,o=o/a|0;for(var i=t.length-e,n=i%r,s=Math.min(i,i-n)+e,d=0,l=e;l<s;l+=r)d=u(t,l,l+r,a),this.imuln(o),this.words[0]+d<67108864?this.words[0]+=d:this._iaddn(d);if(0!==n){var h=1;for(d=u(t,l,t.length,a),l=0;l<n;l++)h*=a;this.imuln(h),this.words[0]+d<67108864?this.words[0]+=d:this._iaddn(d)}this.strip()},i.prototype.copy=function(t){t.words=new Array(this.length);for(var a=0;a<this.length;a++)t.words[a]=this.words[a];t.length=this.length,t.negative=this.negative,t.red=this.red},i.prototype.clone=function(){var t=new i(null);return this.copy(t),t},i.prototype._expand=function(t){for(;this.length<t;)this.words[this.length++]=0;return this},i.prototype.strip=function(){for(;this.length>1&&0===this.words[this.length-1];)this.length--;return this._normSign()},i.prototype._normSign=function(){return 1===this.length&&0===this.words[0]&&(this.negative=0),this},i.prototype.inspect=function(){return(this.red?"<BN-R: ":"<BN: ")+this.toString(16)+">"};var l=["","0","00","000","0000","00000","000000","0000000","00000000","000000000","0000000000","00000000000","000000000000","0000000000000","00000000000000","000000000000000","0000000000000000","00000000000000000","000000000000000000","0000000000000000000","00000000000000000000","000000000000000000000","0000000000000000000000","00000000000000000000000","000000000000000000000000","0000000000000000000000000"],h=[0,0,25,16,12,11,10,9,8,8,7,7,7,7,6,6,6,6,6,6,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],f=[0,0,33554432,43046721,16777216,48828125,60466176,40353607,16777216,43046721,1e7,19487171,35831808,62748517,7529536,11390625,16777216,24137569,34012224,47045881,64e6,4084101,5153632,6436343,7962624,9765625,11881376,14348907,17210368,20511149,243e5,28629151,33554432,39135393,45435424,52521875,60466176];function c(t,a,e){e.negative=a.negative^t.negative;var r=t.length+a.length|0;e.length=r,r=r-1|0;var o=0|t.words[0],i=0|a.words[0],n=o*i,s=67108863&n,d=n/67108864|0;e.words[0]=s;for(var u=1;u<r;u++){for(var l=d>>>26,h=67108863&d,f=Math.min(u,a.length-1),c=Math.max(0,u-t.length+1);c<=f;c++){var m=u-c|0;l+=(n=(o=0|t.words[m])*(i=0|a.words[c])+h)/67108864|0,h=67108863&n}e.words[u]=0|h,d=0|l}return 0!==d?e.words[u]=0|d:e.length--,e.strip()}i.prototype.toString=function(t,a){var e;if(a=0|a||1,16===(t=t||10)||"hex"===t){e="";for(var o=0,i=0,n=0;n<this.length;n++){var s=this.words[n],d=(16777215&(s<<o|i)).toString(16);e=0!=(i=s>>>24-o&16777215)||n!==this.length-1?l[6-d.length]+d+e:d+e,(o+=2)>=26&&(o-=26,n--)}for(0!==i&&(e=i.toString(16)+e);e.length%a!=0;)e="0"+e;return 0!==this.negative&&(e="-"+e),e}if(t===(0|t)&&t>=2&&t<=36){var u=h[t],c=f[t];e="";var m=this.clone();for(m.negative=0;!m.isZero();){var p=m.modn(c).toString(t);e=(m=m.idivn(c)).isZero()?p+e:l[u-p.length]+p+e}for(this.isZero()&&(e="0"+e);e.length%a!=0;)e="0"+e;return 0!==this.negative&&(e="-"+e),e}r(!1,"Base should be between 2 and 36")},i.prototype.toNumber=function(){var t=this.words[0];return 2===this.length?t+=67108864*this.words[1]:3===this.length&&1===this.words[2]?t+=4503599627370496+67108864*this.words[1]:this.length>2&&r(!1,"Number can only safely store up to 53 bits"),0!==this.negative?-t:t},i.prototype.toJSON=function(){return this.toString(16)},i.prototype.toBuffer=function(t,a){return r(void 0!==n),this.toArrayLike(n,t,a)},i.prototype.toArray=function(t,a){return this.toArrayLike(Array,t,a)},i.prototype.toArrayLike=function(t,a,e){var o=this.byteLength(),i=e||Math.max(1,o);r(o<=i,"byte array longer than desired length"),r(i>0,"Requested array length <= 0"),this.strip();var n,s,d="le"===a,u=new t(i),l=this.clone();if(d){for(s=0;!l.isZero();s++)n=l.andln(255),l.iushrn(8),u[s]=n;for(;s<i;s++)u[s]=0}else{for(s=0;s<i-o;s++)u[s]=0;for(s=0;!l.isZero();s++)n=l.andln(255),l.iushrn(8),u[i-s-1]=n}return u},Math.clz32?i.prototype._countBits=function(t){return 32-Math.clz32(t)}:i.prototype._countBits=function(t){var a=t,e=0;return a>=4096&&(e+=13,a>>>=13),a>=64&&(e+=7,a>>>=7),a>=8&&(e+=4,a>>>=4),a>=2&&(e+=2,a>>>=2),e+a},i.prototype._zeroBits=function(t){if(0===t)return 26;var a=t,e=0;return 0==(8191&a)&&(e+=13,a>>>=13),0==(127&a)&&(e+=7,a>>>=7),0==(15&a)&&(e+=4,a>>>=4),0==(3&a)&&(e+=2,a>>>=2),0==(1&a)&&e++,e},i.prototype.bitLength=function(){var t=this.words[this.length-1],a=this._countBits(t);return 26*(this.length-1)+a},i.prototype.zeroBits=function(){if(this.isZero())return 0;for(var t=0,a=0;a<this.length;a++){var e=this._zeroBits(this.words[a]);if(t+=e,26!==e)break}return t},i.prototype.byteLength=function(){return Math.ceil(this.bitLength()/8)},i.prototype.toTwos=function(t){return 0!==this.negative?this.abs().inotn(t).iaddn(1):this.clone()},i.prototype.fromTwos=function(t){return this.testn(t-1)?this.notn(t).iaddn(1).ineg():this.clone()},i.prototype.isNeg=function(){return 0!==this.negative},i.prototype.neg=function(){return this.clone().ineg()},i.prototype.ineg=function(){return this.isZero()||(this.negative^=1),this},i.prototype.iuor=function(t){for(;this.length<t.length;)this.words[this.length++]=0;for(var a=0;a<t.length;a++)this.words[a]=this.words[a]|t.words[a];return this.strip()},i.prototype.ior=function(t){return r(0==(this.negative|t.negative)),this.iuor(t)},i.prototype.or=function(t){return this.length>t.length?this.clone().ior(t):t.clone().ior(this)},i.prototype.uor=function(t){return this.length>t.length?this.clone().iuor(t):t.clone().iuor(this)},i.prototype.iuand=function(t){var a;a=this.length>t.length?t:this;for(var e=0;e<a.length;e++)this.words[e]=this.words[e]&t.words[e];return this.length=a.length,this.strip()},i.prototype.iand=function(t){return r(0==(this.negative|t.negative)),this.iuand(t)},i.prototype.and=function(t){return this.length>t.length?this.clone().iand(t):t.clone().iand(this)},i.prototype.uand=function(t){return this.length>t.length?this.clone().iuand(t):t.clone().iuand(this)},i.prototype.iuxor=function(t){var a,e;this.length>t.length?(a=this,e=t):(a=t,e=this);for(var r=0;r<e.length;r++)this.words[r]=a.words[r]^e.words[r];if(this!==a)for(;r<a.length;r++)this.words[r]=a.words[r];return this.length=a.length,this.strip()},i.prototype.ixor=function(t){return r(0==(this.negative|t.negative)),this.iuxor(t)},i.prototype.xor=function(t){return this.length>t.length?this.clone().ixor(t):t.clone().ixor(this)},i.prototype.uxor=function(t){return this.length>t.length?this.clone().iuxor(t):t.clone().iuxor(this)},i.prototype.inotn=function(t){r("number"==typeof t&&t>=0);var a=0|Math.ceil(t/26),e=t%26;this._expand(a),e>0&&a--;for(var o=0;o<a;o++)this.words[o]=67108863&~this.words[o];return e>0&&(this.words[o]=~this.words[o]&67108863>>26-e),this.strip()},i.prototype.notn=function(t){return this.clone().inotn(t)},i.prototype.setn=function(t,a){r("number"==typeof t&&t>=0);var e=t/26|0,o=t%26;return this._expand(e+1),this.words[e]=a?this.words[e]|1<<o:this.words[e]&~(1<<o),this.strip()},i.prototype.iadd=function(t){var a,e,r;if(0!==this.negative&&0===t.negative)return this.negative=0,a=this.isub(t),this.negative^=1,this._normSign();if(0===this.negative&&0!==t.negative)return t.negative=0,a=this.isub(t),t.negative=1,a._normSign();this.length>t.length?(e=this,r=t):(e=t,r=this);for(var o=0,i=0;i<r.length;i++)a=(0|e.words[i])+(0|r.words[i])+o,this.words[i]=67108863&a,o=a>>>26;for(;0!==o&&i<e.length;i++)a=(0|e.words[i])+o,this.words[i]=67108863&a,o=a>>>26;if(this.length=e.length,0!==o)this.words[this.length]=o,this.length++;else if(e!==this)for(;i<e.length;i++)this.words[i]=e.words[i];return this},i.prototype.add=function(t){var a;return 0!==t.negative&&0===this.negative?(t.negative=0,a=this.sub(t),t.negative^=1,a):0===t.negative&&0!==this.negative?(this.negative=0,a=t.sub(this),this.negative=1,a):this.length>t.length?this.clone().iadd(t):t.clone().iadd(this)},i.prototype.isub=function(t){if(0!==t.negative){t.negative=0;var a=this.iadd(t);return t.negative=1,a._normSign()}if(0!==this.negative)return this.negative=0,this.iadd(t),this.negative=1,this._normSign();var e,r,o=this.cmp(t);if(0===o)return this.negative=0,this.length=1,this.words[0]=0,this;o>0?(e=this,r=t):(e=t,r=this);for(var i=0,n=0;n<r.length;n++)i=(a=(0|e.words[n])-(0|r.words[n])+i)>>26,this.words[n]=67108863&a;for(;0!==i&&n<e.length;n++)i=(a=(0|e.words[n])+i)>>26,this.words[n]=67108863&a;if(0===i&&n<e.length&&e!==this)for(;n<e.length;n++)this.words[n]=e.words[n];return this.length=Math.max(this.length,n),e!==this&&(this.negative=1),this.strip()},i.prototype.sub=function(t){return this.clone().isub(t)};var m=function(t,a,e){var r,o,i,n=t.words,s=a.words,d=e.words,u=0,l=0|n[0],h=8191&l,f=l>>>13,c=0|n[1],m=8191&c,p=c>>>13,y=0|n[2],g=8191&y,v=y>>>13,b=0|n[3],A=8191&b,w=b>>>13,M=0|n[4],_=8191&M,k=M>>>13,B=0|n[5],C=8191&B,E=B>>>13,x=0|n[6],N=8191&x,F=x>>>13,S=0|n[7],P=8191&S,O=S>>>13,R=0|n[8],I=8191&R,T=R>>>13,q=0|n[9],G=8191&q,L=q>>>13,z=0|s[0],D=8191&z,U=z>>>13,j=0|s[1],$=8191&j,Y=j>>>13,H=0|s[2],W=8191&H,V=H>>>13,Z=0|s[3],K=8191&Z,J=Z>>>13,X=0|s[4],Q=8191&X,tt=X>>>13,at=0|s[5],et=8191&at,rt=at>>>13,ot=0|s[6],it=8191&ot,nt=ot>>>13,st=0|s[7],dt=8191&st,ut=st>>>13,lt=0|s[8],ht=8191&lt,ft=lt>>>13,ct=0|s[9],mt=8191&ct,pt=ct>>>13;e.negative=t.negative^a.negative,e.length=19;var yt=(u+(r=Math.imul(h,D))|0)+((8191&(o=(o=Math.imul(h,U))+Math.imul(f,D)|0))<<13)|0;u=((i=Math.imul(f,U))+(o>>>13)|0)+(yt>>>26)|0,yt&=67108863,r=Math.imul(m,D),o=(o=Math.imul(m,U))+Math.imul(p,D)|0,i=Math.imul(p,U);var gt=(u+(r=r+Math.imul(h,$)|0)|0)+((8191&(o=(o=o+Math.imul(h,Y)|0)+Math.imul(f,$)|0))<<13)|0;u=((i=i+Math.imul(f,Y)|0)+(o>>>13)|0)+(gt>>>26)|0,gt&=67108863,r=Math.imul(g,D),o=(o=Math.imul(g,U))+Math.imul(v,D)|0,i=Math.imul(v,U),r=r+Math.imul(m,$)|0,o=(o=o+Math.imul(m,Y)|0)+Math.imul(p,$)|0,i=i+Math.imul(p,Y)|0;var vt=(u+(r=r+Math.imul(h,W)|0)|0)+((8191&(o=(o=o+Math.imul(h,V)|0)+Math.imul(f,W)|0))<<13)|0;u=((i=i+Math.imul(f,V)|0)+(o>>>13)|0)+(vt>>>26)|0,vt&=67108863,r=Math.imul(A,D),o=(o=Math.imul(A,U))+Math.imul(w,D)|0,i=Math.imul(w,U),r=r+Math.imul(g,$)|0,o=(o=o+Math.imul(g,Y)|0)+Math.imul(v,$)|0,i=i+Math.imul(v,Y)|0,r=r+Math.imul(m,W)|0,o=(o=o+Math.imul(m,V)|0)+Math.imul(p,W)|0,i=i+Math.imul(p,V)|0;var bt=(u+(r=r+Math.imul(h,K)|0)|0)+((8191&(o=(o=o+Math.imul(h,J)|0)+Math.imul(f,K)|0))<<13)|0;u=((i=i+Math.imul(f,J)|0)+(o>>>13)|0)+(bt>>>26)|0,bt&=67108863,r=Math.imul(_,D),o=(o=Math.imul(_,U))+Math.imul(k,D)|0,i=Math.imul(k,U),r=r+Math.imul(A,$)|0,o=(o=o+Math.imul(A,Y)|0)+Math.imul(w,$)|0,i=i+Math.imul(w,Y)|0,r=r+Math.imul(g,W)|0,o=(o=o+Math.imul(g,V)|0)+Math.imul(v,W)|0,i=i+Math.imul(v,V)|0,r=r+Math.imul(m,K)|0,o=(o=o+Math.imul(m,J)|0)+Math.imul(p,K)|0,i=i+Math.imul(p,J)|0;var At=(u+(r=r+Math.imul(h,Q)|0)|0)+((8191&(o=(o=o+Math.imul(h,tt)|0)+Math.imul(f,Q)|0))<<13)|0;u=((i=i+Math.imul(f,tt)|0)+(o>>>13)|0)+(At>>>26)|0,At&=67108863,r=Math.imul(C,D),o=(o=Math.imul(C,U))+Math.imul(E,D)|0,i=Math.imul(E,U),r=r+Math.imul(_,$)|0,o=(o=o+Math.imul(_,Y)|0)+Math.imul(k,$)|0,i=i+Math.imul(k,Y)|0,r=r+Math.imul(A,W)|0,o=(o=o+Math.imul(A,V)|0)+Math.imul(w,W)|0,i=i+Math.imul(w,V)|0,r=r+Math.imul(g,K)|0,o=(o=o+Math.imul(g,J)|0)+Math.imul(v,K)|0,i=i+Math.imul(v,J)|0,r=r+Math.imul(m,Q)|0,o=(o=o+Math.imul(m,tt)|0)+Math.imul(p,Q)|0,i=i+Math.imul(p,tt)|0;var wt=(u+(r=r+Math.imul(h,et)|0)|0)+((8191&(o=(o=o+Math.imul(h,rt)|0)+Math.imul(f,et)|0))<<13)|0;u=((i=i+Math.imul(f,rt)|0)+(o>>>13)|0)+(wt>>>26)|0,wt&=67108863,r=Math.imul(N,D),o=(o=Math.imul(N,U))+Math.imul(F,D)|0,i=Math.imul(F,U),r=r+Math.imul(C,$)|0,o=(o=o+Math.imul(C,Y)|0)+Math.imul(E,$)|0,i=i+Math.imul(E,Y)|0,r=r+Math.imul(_,W)|0,o=(o=o+Math.imul(_,V)|0)+Math.imul(k,W)|0,i=i+Math.imul(k,V)|0,r=r+Math.imul(A,K)|0,o=(o=o+Math.imul(A,J)|0)+Math.imul(w,K)|0,i=i+Math.imul(w,J)|0,r=r+Math.imul(g,Q)|0,o=(o=o+Math.imul(g,tt)|0)+Math.imul(v,Q)|0,i=i+Math.imul(v,tt)|0,r=r+Math.imul(m,et)|0,o=(o=o+Math.imul(m,rt)|0)+Math.imul(p,et)|0,i=i+Math.imul(p,rt)|0;var Mt=(u+(r=r+Math.imul(h,it)|0)|0)+((8191&(o=(o=o+Math.imul(h,nt)|0)+Math.imul(f,it)|0))<<13)|0;u=((i=i+Math.imul(f,nt)|0)+(o>>>13)|0)+(Mt>>>26)|0,Mt&=67108863,r=Math.imul(P,D),o=(o=Math.imul(P,U))+Math.imul(O,D)|0,i=Math.imul(O,U),r=r+Math.imul(N,$)|0,o=(o=o+Math.imul(N,Y)|0)+Math.imul(F,$)|0,i=i+Math.imul(F,Y)|0,r=r+Math.imul(C,W)|0,o=(o=o+Math.imul(C,V)|0)+Math.imul(E,W)|0,i=i+Math.imul(E,V)|0,r=r+Math.imul(_,K)|0,o=(o=o+Math.imul(_,J)|0)+Math.imul(k,K)|0,i=i+Math.imul(k,J)|0,r=r+Math.imul(A,Q)|0,o=(o=o+Math.imul(A,tt)|0)+Math.imul(w,Q)|0,i=i+Math.imul(w,tt)|0,r=r+Math.imul(g,et)|0,o=(o=o+Math.imul(g,rt)|0)+Math.imul(v,et)|0,i=i+Math.imul(v,rt)|0,r=r+Math.imul(m,it)|0,o=(o=o+Math.imul(m,nt)|0)+Math.imul(p,it)|0,i=i+Math.imul(p,nt)|0;var _t=(u+(r=r+Math.imul(h,dt)|0)|0)+((8191&(o=(o=o+Math.imul(h,ut)|0)+Math.imul(f,dt)|0))<<13)|0;u=((i=i+Math.imul(f,ut)|0)+(o>>>13)|0)+(_t>>>26)|0,_t&=67108863,r=Math.imul(I,D),o=(o=Math.imul(I,U))+Math.imul(T,D)|0,i=Math.imul(T,U),r=r+Math.imul(P,$)|0,o=(o=o+Math.imul(P,Y)|0)+Math.imul(O,$)|0,i=i+Math.imul(O,Y)|0,r=r+Math.imul(N,W)|0,o=(o=o+Math.imul(N,V)|0)+Math.imul(F,W)|0,i=i+Math.imul(F,V)|0,r=r+Math.imul(C,K)|0,o=(o=o+Math.imul(C,J)|0)+Math.imul(E,K)|0,i=i+Math.imul(E,J)|0,r=r+Math.imul(_,Q)|0,o=(o=o+Math.imul(_,tt)|0)+Math.imul(k,Q)|0,i=i+Math.imul(k,tt)|0,r=r+Math.imul(A,et)|0,o=(o=o+Math.imul(A,rt)|0)+Math.imul(w,et)|0,i=i+Math.imul(w,rt)|0,r=r+Math.imul(g,it)|0,o=(o=o+Math.imul(g,nt)|0)+Math.imul(v,it)|0,i=i+Math.imul(v,nt)|0,r=r+Math.imul(m,dt)|0,o=(o=o+Math.imul(m,ut)|0)+Math.imul(p,dt)|0,i=i+Math.imul(p,ut)|0;var kt=(u+(r=r+Math.imul(h,ht)|0)|0)+((8191&(o=(o=o+Math.imul(h,ft)|0)+Math.imul(f,ht)|0))<<13)|0;u=((i=i+Math.imul(f,ft)|0)+(o>>>13)|0)+(kt>>>26)|0,kt&=67108863,r=Math.imul(G,D),o=(o=Math.imul(G,U))+Math.imul(L,D)|0,i=Math.imul(L,U),r=r+Math.imul(I,$)|0,o=(o=o+Math.imul(I,Y)|0)+Math.imul(T,$)|0,i=i+Math.imul(T,Y)|0,r=r+Math.imul(P,W)|0,o=(o=o+Math.imul(P,V)|0)+Math.imul(O,W)|0,i=i+Math.imul(O,V)|0,r=r+Math.imul(N,K)|0,o=(o=o+Math.imul(N,J)|0)+Math.imul(F,K)|0,i=i+Math.imul(F,J)|0,r=r+Math.imul(C,Q)|0,o=(o=o+Math.imul(C,tt)|0)+Math.imul(E,Q)|0,i=i+Math.imul(E,tt)|0,r=r+Math.imul(_,et)|0,o=(o=o+Math.imul(_,rt)|0)+Math.imul(k,et)|0,i=i+Math.imul(k,rt)|0,r=r+Math.imul(A,it)|0,o=(o=o+Math.imul(A,nt)|0)+Math.imul(w,it)|0,i=i+Math.imul(w,nt)|0,r=r+Math.imul(g,dt)|0,o=(o=o+Math.imul(g,ut)|0)+Math.imul(v,dt)|0,i=i+Math.imul(v,ut)|0,r=r+Math.imul(m,ht)|0,o=(o=o+Math.imul(m,ft)|0)+Math.imul(p,ht)|0,i=i+Math.imul(p,ft)|0;var Bt=(u+(r=r+Math.imul(h,mt)|0)|0)+((8191&(o=(o=o+Math.imul(h,pt)|0)+Math.imul(f,mt)|0))<<13)|0;u=((i=i+Math.imul(f,pt)|0)+(o>>>13)|0)+(Bt>>>26)|0,Bt&=67108863,r=Math.imul(G,$),o=(o=Math.imul(G,Y))+Math.imul(L,$)|0,i=Math.imul(L,Y),r=r+Math.imul(I,W)|0,o=(o=o+Math.imul(I,V)|0)+Math.imul(T,W)|0,i=i+Math.imul(T,V)|0,r=r+Math.imul(P,K)|0,o=(o=o+Math.imul(P,J)|0)+Math.imul(O,K)|0,i=i+Math.imul(O,J)|0,r=r+Math.imul(N,Q)|0,o=(o=o+Math.imul(N,tt)|0)+Math.imul(F,Q)|0,i=i+Math.imul(F,tt)|0,r=r+Math.imul(C,et)|0,o=(o=o+Math.imul(C,rt)|0)+Math.imul(E,et)|0,i=i+Math.imul(E,rt)|0,r=r+Math.imul(_,it)|0,o=(o=o+Math.imul(_,nt)|0)+Math.imul(k,it)|0,i=i+Math.imul(k,nt)|0,r=r+Math.imul(A,dt)|0,o=(o=o+Math.imul(A,ut)|0)+Math.imul(w,dt)|0,i=i+Math.imul(w,ut)|0,r=r+Math.imul(g,ht)|0,o=(o=o+Math.imul(g,ft)|0)+Math.imul(v,ht)|0,i=i+Math.imul(v,ft)|0;var Ct=(u+(r=r+Math.imul(m,mt)|0)|0)+((8191&(o=(o=o+Math.imul(m,pt)|0)+Math.imul(p,mt)|0))<<13)|0;u=((i=i+Math.imul(p,pt)|0)+(o>>>13)|0)+(Ct>>>26)|0,Ct&=67108863,r=Math.imul(G,W),o=(o=Math.imul(G,V))+Math.imul(L,W)|0,i=Math.imul(L,V),r=r+Math.imul(I,K)|0,o=(o=o+Math.imul(I,J)|0)+Math.imul(T,K)|0,i=i+Math.imul(T,J)|0,r=r+Math.imul(P,Q)|0,o=(o=o+Math.imul(P,tt)|0)+Math.imul(O,Q)|0,i=i+Math.imul(O,tt)|0,r=r+Math.imul(N,et)|0,o=(o=o+Math.imul(N,rt)|0)+Math.imul(F,et)|0,i=i+Math.imul(F,rt)|0,r=r+Math.imul(C,it)|0,o=(o=o+Math.imul(C,nt)|0)+Math.imul(E,it)|0,i=i+Math.imul(E,nt)|0,r=r+Math.imul(_,dt)|0,o=(o=o+Math.imul(_,ut)|0)+Math.imul(k,dt)|0,i=i+Math.imul(k,ut)|0,r=r+Math.imul(A,ht)|0,o=(o=o+Math.imul(A,ft)|0)+Math.imul(w,ht)|0,i=i+Math.imul(w,ft)|0;var Et=(u+(r=r+Math.imul(g,mt)|0)|0)+((8191&(o=(o=o+Math.imul(g,pt)|0)+Math.imul(v,mt)|0))<<13)|0;u=((i=i+Math.imul(v,pt)|0)+(o>>>13)|0)+(Et>>>26)|0,Et&=67108863,r=Math.imul(G,K),o=(o=Math.imul(G,J))+Math.imul(L,K)|0,i=Math.imul(L,J),r=r+Math.imul(I,Q)|0,o=(o=o+Math.imul(I,tt)|0)+Math.imul(T,Q)|0,i=i+Math.imul(T,tt)|0,r=r+Math.imul(P,et)|0,o=(o=o+Math.imul(P,rt)|0)+Math.imul(O,et)|0,i=i+Math.imul(O,rt)|0,r=r+Math.imul(N,it)|0,o=(o=o+Math.imul(N,nt)|0)+Math.imul(F,it)|0,i=i+Math.imul(F,nt)|0,r=r+Math.imul(C,dt)|0,o=(o=o+Math.imul(C,ut)|0)+Math.imul(E,dt)|0,i=i+Math.imul(E,ut)|0,r=r+Math.imul(_,ht)|0,o=(o=o+Math.imul(_,ft)|0)+Math.imul(k,ht)|0,i=i+Math.imul(k,ft)|0;var xt=(u+(r=r+Math.imul(A,mt)|0)|0)+((8191&(o=(o=o+Math.imul(A,pt)|0)+Math.imul(w,mt)|0))<<13)|0;u=((i=i+Math.imul(w,pt)|0)+(o>>>13)|0)+(xt>>>26)|0,xt&=67108863,r=Math.imul(G,Q),o=(o=Math.imul(G,tt))+Math.imul(L,Q)|0,i=Math.imul(L,tt),r=r+Math.imul(I,et)|0,o=(o=o+Math.imul(I,rt)|0)+Math.imul(T,et)|0,i=i+Math.imul(T,rt)|0,r=r+Math.imul(P,it)|0,o=(o=o+Math.imul(P,nt)|0)+Math.imul(O,it)|0,i=i+Math.imul(O,nt)|0,r=r+Math.imul(N,dt)|0,o=(o=o+Math.imul(N,ut)|0)+Math.imul(F,dt)|0,i=i+Math.imul(F,ut)|0,r=r+Math.imul(C,ht)|0,o=(o=o+Math.imul(C,ft)|0)+Math.imul(E,ht)|0,i=i+Math.imul(E,ft)|0;var Nt=(u+(r=r+Math.imul(_,mt)|0)|0)+((8191&(o=(o=o+Math.imul(_,pt)|0)+Math.imul(k,mt)|0))<<13)|0;u=((i=i+Math.imul(k,pt)|0)+(o>>>13)|0)+(Nt>>>26)|0,Nt&=67108863,r=Math.imul(G,et),o=(o=Math.imul(G,rt))+Math.imul(L,et)|0,i=Math.imul(L,rt),r=r+Math.imul(I,it)|0,o=(o=o+Math.imul(I,nt)|0)+Math.imul(T,it)|0,i=i+Math.imul(T,nt)|0,r=r+Math.imul(P,dt)|0,o=(o=o+Math.imul(P,ut)|0)+Math.imul(O,dt)|0,i=i+Math.imul(O,ut)|0,r=r+Math.imul(N,ht)|0,o=(o=o+Math.imul(N,ft)|0)+Math.imul(F,ht)|0,i=i+Math.imul(F,ft)|0;var Ft=(u+(r=r+Math.imul(C,mt)|0)|0)+((8191&(o=(o=o+Math.imul(C,pt)|0)+Math.imul(E,mt)|0))<<13)|0;u=((i=i+Math.imul(E,pt)|0)+(o>>>13)|0)+(Ft>>>26)|0,Ft&=67108863,r=Math.imul(G,it),o=(o=Math.imul(G,nt))+Math.imul(L,it)|0,i=Math.imul(L,nt),r=r+Math.imul(I,dt)|0,o=(o=o+Math.imul(I,ut)|0)+Math.imul(T,dt)|0,i=i+Math.imul(T,ut)|0,r=r+Math.imul(P,ht)|0,o=(o=o+Math.imul(P,ft)|0)+Math.imul(O,ht)|0,i=i+Math.imul(O,ft)|0;var St=(u+(r=r+Math.imul(N,mt)|0)|0)+((8191&(o=(o=o+Math.imul(N,pt)|0)+Math.imul(F,mt)|0))<<13)|0;u=((i=i+Math.imul(F,pt)|0)+(o>>>13)|0)+(St>>>26)|0,St&=67108863,r=Math.imul(G,dt),o=(o=Math.imul(G,ut))+Math.imul(L,dt)|0,i=Math.imul(L,ut),r=r+Math.imul(I,ht)|0,o=(o=o+Math.imul(I,ft)|0)+Math.imul(T,ht)|0,i=i+Math.imul(T,ft)|0;var Pt=(u+(r=r+Math.imul(P,mt)|0)|0)+((8191&(o=(o=o+Math.imul(P,pt)|0)+Math.imul(O,mt)|0))<<13)|0;u=((i=i+Math.imul(O,pt)|0)+(o>>>13)|0)+(Pt>>>26)|0,Pt&=67108863,r=Math.imul(G,ht),o=(o=Math.imul(G,ft))+Math.imul(L,ht)|0,i=Math.imul(L,ft);var Ot=(u+(r=r+Math.imul(I,mt)|0)|0)+((8191&(o=(o=o+Math.imul(I,pt)|0)+Math.imul(T,mt)|0))<<13)|0;u=((i=i+Math.imul(T,pt)|0)+(o>>>13)|0)+(Ot>>>26)|0,Ot&=67108863;var Rt=(u+(r=Math.imul(G,mt))|0)+((8191&(o=(o=Math.imul(G,pt))+Math.imul(L,mt)|0))<<13)|0;return u=((i=Math.imul(L,pt))+(o>>>13)|0)+(Rt>>>26)|0,Rt&=67108863,d[0]=yt,d[1]=gt,d[2]=vt,d[3]=bt,d[4]=At,d[5]=wt,d[6]=Mt,d[7]=_t,d[8]=kt,d[9]=Bt,d[10]=Ct,d[11]=Et,d[12]=xt,d[13]=Nt,d[14]=Ft,d[15]=St,d[16]=Pt,d[17]=Ot,d[18]=Rt,0!==u&&(d[19]=u,e.length++),e};function p(t,a,e){return(new y).mulp(t,a,e)}function y(t,a){this.x=t,this.y=a}Math.imul||(m=c),i.prototype.mulTo=function(t,a){var e,r=this.length+t.length;return e=10===this.length&&10===t.length?m(this,t,a):r<63?c(this,t,a):r<1024?function(t,a,e){e.negative=a.negative^t.negative,e.length=t.length+a.length;for(var r=0,o=0,i=0;i<e.length-1;i++){var n=o;o=0;for(var s=67108863&r,d=Math.min(i,a.length-1),u=Math.max(0,i-t.length+1);u<=d;u++){var l=i-u,h=(0|t.words[l])*(0|a.words[u]),f=67108863&h;s=67108863&(f=f+s|0),o+=(n=(n=n+(h/67108864|0)|0)+(f>>>26)|0)>>>26,n&=67108863}e.words[i]=s,r=n,n=o}return 0!==r?e.words[i]=r:e.length--,e.strip()}(this,t,a):p(this,t,a),e},y.prototype.makeRBT=function(t){for(var a=new Array(t),e=i.prototype._countBits(t)-1,r=0;r<t;r++)a[r]=this.revBin(r,e,t);return a},y.prototype.revBin=function(t,a,e){if(0===t||t===e-1)return t;for(var r=0,o=0;o<a;o++)r|=(1&t)<<a-o-1,t>>=1;return r},y.prototype.permute=function(t,a,e,r,o,i){for(var n=0;n<i;n++)r[n]=a[t[n]],o[n]=e[t[n]]},y.prototype.transform=function(t,a,e,r,o,i){this.permute(i,t,a,e,r,o);for(var n=1;n<o;n<<=1)for(var s=n<<1,d=Math.cos(2*Math.PI/s),u=Math.sin(2*Math.PI/s),l=0;l<o;l+=s)for(var h=d,f=u,c=0;c<n;c++){var m=e[l+c],p=r[l+c],y=e[l+c+n],g=r[l+c+n],v=h*y-f*g;g=h*g+f*y,y=v,e[l+c]=m+y,r[l+c]=p+g,e[l+c+n]=m-y,r[l+c+n]=p-g,c!==s&&(v=d*h-u*f,f=d*f+u*h,h=v)}},y.prototype.guessLen13b=function(t,a){var e=1|Math.max(a,t),r=1&e,o=0;for(e=e/2|0;e;e>>>=1)o++;return 1<<o+1+r},y.prototype.conjugate=function(t,a,e){if(!(e<=1))for(var r=0;r<e/2;r++){var o=t[r];t[r]=t[e-r-1],t[e-r-1]=o,o=a[r],a[r]=-a[e-r-1],a[e-r-1]=-o}},y.prototype.normalize13b=function(t,a){for(var e=0,r=0;r<a/2;r++){var o=8192*Math.round(t[2*r+1]/a)+Math.round(t[2*r]/a)+e;t[r]=67108863&o,e=o<67108864?0:o/67108864|0}return t},y.prototype.convert13b=function(t,a,e,o){for(var i=0,n=0;n<a;n++)i+=0|t[n],e[2*n]=8191&i,i>>>=13,e[2*n+1]=8191&i,i>>>=13;for(n=2*a;n<o;++n)e[n]=0;r(0===i),r(0==(-8192&i))},y.prototype.stub=function(t){for(var a=new Array(t),e=0;e<t;e++)a[e]=0;return a},y.prototype.mulp=function(t,a,e){var r=2*this.guessLen13b(t.length,a.length),o=this.makeRBT(r),i=this.stub(r),n=new Array(r),s=new Array(r),d=new Array(r),u=new Array(r),l=new Array(r),h=new Array(r),f=e.words;f.length=r,this.convert13b(t.words,t.length,n,r),this.convert13b(a.words,a.length,u,r),this.transform(n,i,s,d,r,o),this.transform(u,i,l,h,r,o);for(var c=0;c<r;c++){var m=s[c]*l[c]-d[c]*h[c];d[c]=s[c]*h[c]+d[c]*l[c],s[c]=m}return this.conjugate(s,d,r),this.transform(s,d,f,i,r,o),this.conjugate(f,i,r),this.normalize13b(f,r),e.negative=t.negative^a.negative,e.length=t.length+a.length,e.strip()},i.prototype.mul=function(t){var a=new i(null);return a.words=new Array(this.length+t.length),this.mulTo(t,a)},i.prototype.mulf=function(t){var a=new i(null);return a.words=new Array(this.length+t.length),p(this,t,a)},i.prototype.imul=function(t){return this.clone().mulTo(t,this)},i.prototype.imuln=function(t){r("number"==typeof t),r(t<67108864);for(var a=0,e=0;e<this.length;e++){var o=(0|this.words[e])*t,i=(67108863&o)+(67108863&a);a>>=26,a+=o/67108864|0,a+=i>>>26,this.words[e]=67108863&i}return 0!==a&&(this.words[e]=a,this.length++),this},i.prototype.muln=function(t){return this.clone().imuln(t)},i.prototype.sqr=function(){return this.mul(this)},i.prototype.isqr=function(){return this.imul(this.clone())},i.prototype.pow=function(t){var a=function(t){for(var a=new Array(t.bitLength()),e=0;e<a.length;e++){var r=e/26|0,o=e%26;a[e]=(t.words[r]&1<<o)>>>o}return a}(t);if(0===a.length)return new i(1);for(var e=this,r=0;r<a.length&&0===a[r];r++,e=e.sqr());if(++r<a.length)for(var o=e.sqr();r<a.length;r++,o=o.sqr())0!==a[r]&&(e=e.mul(o));return e},i.prototype.iushln=function(t){r("number"==typeof t&&t>=0);var a,e=t%26,o=(t-e)/26,i=67108863>>>26-e<<26-e;if(0!==e){var n=0;for(a=0;a<this.length;a++){var s=this.words[a]&i,d=(0|this.words[a])-s<<e;this.words[a]=d|n,n=s>>>26-e}n&&(this.words[a]=n,this.length++)}if(0!==o){for(a=this.length-1;a>=0;a--)this.words[a+o]=this.words[a];for(a=0;a<o;a++)this.words[a]=0;this.length+=o}return this.strip()},i.prototype.ishln=function(t){return r(0===this.negative),this.iushln(t)},i.prototype.iushrn=function(t,a,e){var o;r("number"==typeof t&&t>=0),o=a?(a-a%26)/26:0;var i=t%26,n=Math.min((t-i)/26,this.length),s=67108863^67108863>>>i<<i,d=e;if(o-=n,o=Math.max(0,o),d){for(var u=0;u<n;u++)d.words[u]=this.words[u];d.length=n}if(0===n);else if(this.length>n)for(this.length-=n,u=0;u<this.length;u++)this.words[u]=this.words[u+n];else this.words[0]=0,this.length=1;var l=0;for(u=this.length-1;u>=0&&(0!==l||u>=o);u--){var h=0|this.words[u];this.words[u]=l<<26-i|h>>>i,l=h&s}return d&&0!==l&&(d.words[d.length++]=l),0===this.length&&(this.words[0]=0,this.length=1),this.strip()},i.prototype.ishrn=function(t,a,e){return r(0===this.negative),this.iushrn(t,a,e)},i.prototype.shln=function(t){return this.clone().ishln(t)},i.prototype.ushln=function(t){return this.clone().iushln(t)},i.prototype.shrn=function(t){return this.clone().ishrn(t)},i.prototype.ushrn=function(t){return this.clone().iushrn(t)},i.prototype.testn=function(t){r("number"==typeof t&&t>=0);var a=t%26,e=(t-a)/26,o=1<<a;return!(this.length<=e||!(this.words[e]&o))},i.prototype.imaskn=function(t){r("number"==typeof t&&t>=0);var a=t%26,e=(t-a)/26;if(r(0===this.negative,"imaskn works only with positive numbers"),this.length<=e)return this;if(0!==a&&e++,this.length=Math.min(e,this.length),0!==a){var o=67108863^67108863>>>a<<a;this.words[this.length-1]&=o}return this.strip()},i.prototype.maskn=function(t){return this.clone().imaskn(t)},i.prototype.iaddn=function(t){return r("number"==typeof t),r(t<67108864),t<0?this.isubn(-t):0!==this.negative?1===this.length&&(0|this.words[0])<t?(this.words[0]=t-(0|this.words[0]),this.negative=0,this):(this.negative=0,this.isubn(t),this.negative=1,this):this._iaddn(t)},i.prototype._iaddn=function(t){this.words[0]+=t;for(var a=0;a<this.length&&this.words[a]>=67108864;a++)this.words[a]-=67108864,a===this.length-1?this.words[a+1]=1:this.words[a+1]++;return this.length=Math.max(this.length,a+1),this},i.prototype.isubn=function(t){if(r("number"==typeof t),r(t<67108864),t<0)return this.iaddn(-t);if(0!==this.negative)return this.negative=0,this.iaddn(t),this.negative=1,this;if(this.words[0]-=t,1===this.length&&this.words[0]<0)this.words[0]=-this.words[0],this.negative=1;else for(var a=0;a<this.length&&this.words[a]<0;a++)this.words[a]+=67108864,this.words[a+1]-=1;return this.strip()},i.prototype.addn=function(t){return this.clone().iaddn(t)},i.prototype.subn=function(t){return this.clone().isubn(t)},i.prototype.iabs=function(){return this.negative=0,this},i.prototype.abs=function(){return this.clone().iabs()},i.prototype._ishlnsubmul=function(t,a,e){var o,i,n=t.length+e;this._expand(n);var s=0;for(o=0;o<t.length;o++){i=(0|this.words[o+e])+s;var d=(0|t.words[o])*a;s=((i-=67108863&d)>>26)-(d/67108864|0),this.words[o+e]=67108863&i}for(;o<this.length-e;o++)s=(i=(0|this.words[o+e])+s)>>26,this.words[o+e]=67108863&i;if(0===s)return this.strip();for(r(-1===s),s=0,o=0;o<this.length;o++)s=(i=-(0|this.words[o])+s)>>26,this.words[o]=67108863&i;return this.negative=1,this.strip()},i.prototype._wordDiv=function(t,a){var e=(this.length,t.length),r=this.clone(),o=t,n=0|o.words[o.length-1];0!=(e=26-this._countBits(n))&&(o=o.ushln(e),r.iushln(e),n=0|o.words[o.length-1]);var s,d=r.length-o.length;if("mod"!==a){(s=new i(null)).length=d+1,s.words=new Array(s.length);for(var u=0;u<s.length;u++)s.words[u]=0}var l=r.clone()._ishlnsubmul(o,1,d);0===l.negative&&(r=l,s&&(s.words[d]=1));for(var h=d-1;h>=0;h--){var f=67108864*(0|r.words[o.length+h])+(0|r.words[o.length+h-1]);for(f=Math.min(f/n|0,67108863),r._ishlnsubmul(o,f,h);0!==r.negative;)f--,r.negative=0,r._ishlnsubmul(o,1,h),r.isZero()||(r.negative^=1);s&&(s.words[h]=f)}return s&&s.strip(),r.strip(),"div"!==a&&0!==e&&r.iushrn(e),{div:s||null,mod:r}},i.prototype.divmod=function(t,a,e){return r(!t.isZero()),this.isZero()?{div:new i(0),mod:new i(0)}:0!==this.negative&&0===t.negative?(s=this.neg().divmod(t,a),"mod"!==a&&(o=s.div.neg()),"div"!==a&&(n=s.mod.neg(),e&&0!==n.negative&&n.iadd(t)),{div:o,mod:n}):0===this.negative&&0!==t.negative?(s=this.divmod(t.neg(),a),"mod"!==a&&(o=s.div.neg()),{div:o,mod:s.mod}):0!=(this.negative&t.negative)?(s=this.neg().divmod(t.neg(),a),"div"!==a&&(n=s.mod.neg(),e&&0!==n.negative&&n.isub(t)),{div:s.div,mod:n}):t.length>this.length||this.cmp(t)<0?{div:new i(0),mod:this}:1===t.length?"div"===a?{div:this.divn(t.words[0]),mod:null}:"mod"===a?{div:null,mod:new i(this.modn(t.words[0]))}:{div:this.divn(t.words[0]),mod:new i(this.modn(t.words[0]))}:this._wordDiv(t,a);var o,n,s},i.prototype.div=function(t){return this.divmod(t,"div",!1).div},i.prototype.mod=function(t){return this.divmod(t,"mod",!1).mod},i.prototype.umod=function(t){return this.divmod(t,"mod",!0).mod},i.prototype.divRound=function(t){var a=this.divmod(t);if(a.mod.isZero())return a.div;var e=0!==a.div.negative?a.mod.isub(t):a.mod,r=t.ushrn(1),o=t.andln(1),i=e.cmp(r);return i<0||1===o&&0===i?a.div:0!==a.div.negative?a.div.isubn(1):a.div.iaddn(1)},i.prototype.modn=function(t){r(t<=67108863);for(var a=(1<<26)%t,e=0,o=this.length-1;o>=0;o--)e=(a*e+(0|this.words[o]))%t;return e},i.prototype.idivn=function(t){r(t<=67108863);for(var a=0,e=this.length-1;e>=0;e--){var o=(0|this.words[e])+67108864*a;this.words[e]=o/t|0,a=o%t}return this.strip()},i.prototype.divn=function(t){return this.clone().idivn(t)},i.prototype.egcd=function(t){r(0===t.negative),r(!t.isZero());var a=this,e=t.clone();a=0!==a.negative?a.umod(t):a.clone();for(var o=new i(1),n=new i(0),s=new i(0),d=new i(1),u=0;a.isEven()&&e.isEven();)a.iushrn(1),e.iushrn(1),++u;for(var l=e.clone(),h=a.clone();!a.isZero();){for(var f=0,c=1;0==(a.words[0]&c)&&f<26;++f,c<<=1);if(f>0)for(a.iushrn(f);f-- >0;)(o.isOdd()||n.isOdd())&&(o.iadd(l),n.isub(h)),o.iushrn(1),n.iushrn(1);for(var m=0,p=1;0==(e.words[0]&p)&&m<26;++m,p<<=1);if(m>0)for(e.iushrn(m);m-- >0;)(s.isOdd()||d.isOdd())&&(s.iadd(l),d.isub(h)),s.iushrn(1),d.iushrn(1);a.cmp(e)>=0?(a.isub(e),o.isub(s),n.isub(d)):(e.isub(a),s.isub(o),d.isub(n))}return{a:s,b:d,gcd:e.iushln(u)}},i.prototype._invmp=function(t){r(0===t.negative),r(!t.isZero());var a=this,e=t.clone();a=0!==a.negative?a.umod(t):a.clone();for(var o,n=new i(1),s=new i(0),d=e.clone();a.cmpn(1)>0&&e.cmpn(1)>0;){for(var u=0,l=1;0==(a.words[0]&l)&&u<26;++u,l<<=1);if(u>0)for(a.iushrn(u);u-- >0;)n.isOdd()&&n.iadd(d),n.iushrn(1);for(var h=0,f=1;0==(e.words[0]&f)&&h<26;++h,f<<=1);if(h>0)for(e.iushrn(h);h-- >0;)s.isOdd()&&s.iadd(d),s.iushrn(1);a.cmp(e)>=0?(a.isub(e),n.isub(s)):(e.isub(a),s.isub(n))}return(o=0===a.cmpn(1)?n:s).cmpn(0)<0&&o.iadd(t),o},i.prototype.gcd=function(t){if(this.isZero())return t.abs();if(t.isZero())return this.abs();var a=this.clone(),e=t.clone();a.negative=0,e.negative=0;for(var r=0;a.isEven()&&e.isEven();r++)a.iushrn(1),e.iushrn(1);for(;;){for(;a.isEven();)a.iushrn(1);for(;e.isEven();)e.iushrn(1);var o=a.cmp(e);if(o<0){var i=a;a=e,e=i}else if(0===o||0===e.cmpn(1))break;a.isub(e)}return e.iushln(r)},i.prototype.invm=function(t){return this.egcd(t).a.umod(t)},i.prototype.isEven=function(){return 0==(1&this.words[0])},i.prototype.isOdd=function(){return 1==(1&this.words[0])},i.prototype.andln=function(t){return this.words[0]&t},i.prototype.bincn=function(t){r("number"==typeof t);var a=t%26,e=(t-a)/26,o=1<<a;if(this.length<=e)return this._expand(e+1),this.words[e]|=o,this;for(var i=o,n=e;0!==i&&n<this.length;n++){var s=0|this.words[n];i=(s+=i)>>>26,s&=67108863,this.words[n]=s}return 0!==i&&(this.words[n]=i,this.length++),this},i.prototype.isZero=function(){return 1===this.length&&0===this.words[0]},i.prototype.cmpn=function(t){var a,e=t<0;if(0!==this.negative&&!e)return-1;if(0===this.negative&&e)return 1;if(this.strip(),this.length>1)a=1;else{e&&(t=-t),r(t<=67108863,"Number is too big");var o=0|this.words[0];a=o===t?0:o<t?-1:1}return 0!==this.negative?0|-a:a},i.prototype.cmp=function(t){if(0!==this.negative&&0===t.negative)return-1;if(0===this.negative&&0!==t.negative)return 1;var a=this.ucmp(t);return 0!==this.negative?0|-a:a},i.prototype.ucmp=function(t){if(this.length>t.length)return 1;if(this.length<t.length)return-1;for(var a=0,e=this.length-1;e>=0;e--){var r=0|this.words[e],o=0|t.words[e];if(r!==o){r<o?a=-1:r>o&&(a=1);break}}return a},i.prototype.gtn=function(t){return 1===this.cmpn(t)},i.prototype.gt=function(t){return 1===this.cmp(t)},i.prototype.gten=function(t){return this.cmpn(t)>=0},i.prototype.gte=function(t){return this.cmp(t)>=0},i.prototype.ltn=function(t){return-1===this.cmpn(t)},i.prototype.lt=function(t){return-1===this.cmp(t)},i.prototype.lten=function(t){return this.cmpn(t)<=0},i.prototype.lte=function(t){return this.cmp(t)<=0},i.prototype.eqn=function(t){return 0===this.cmpn(t)},i.prototype.eq=function(t){return 0===this.cmp(t)},i.red=function(t){return new _(t)},i.prototype.toRed=function(t){return r(!this.red,"Already a number in reduction context"),r(0===this.negative,"red works only with positives"),t.convertTo(this)._forceRed(t)},i.prototype.fromRed=function(){return r(this.red,"fromRed works only with numbers in reduction context"),this.red.convertFrom(this)},i.prototype._forceRed=function(t){return this.red=t,this},i.prototype.forceRed=function(t){return r(!this.red,"Already a number in reduction context"),this._forceRed(t)},i.prototype.redAdd=function(t){return r(this.red,"redAdd works only with red numbers"),this.red.add(this,t)},i.prototype.redIAdd=function(t){return r(this.red,"redIAdd works only with red numbers"),this.red.iadd(this,t)},i.prototype.redSub=function(t){return r(this.red,"redSub works only with red numbers"),this.red.sub(this,t)},i.prototype.redISub=function(t){return r(this.red,"redISub works only with red numbers"),this.red.isub(this,t)},i.prototype.redShl=function(t){return r(this.red,"redShl works only with red numbers"),this.red.shl(this,t)},i.prototype.redMul=function(t){return r(this.red,"redMul works only with red numbers"),this.red._verify2(this,t),this.red.mul(this,t)},i.prototype.redIMul=function(t){return r(this.red,"redMul works only with red numbers"),this.red._verify2(this,t),this.red.imul(this,t)},i.prototype.redSqr=function(){return r(this.red,"redSqr works only with red numbers"),this.red._verify1(this),this.red.sqr(this)},i.prototype.redISqr=function(){return r(this.red,"redISqr works only with red numbers"),this.red._verify1(this),this.red.isqr(this)},i.prototype.redSqrt=function(){return r(this.red,"redSqrt works only with red numbers"),this.red._verify1(this),this.red.sqrt(this)},i.prototype.redInvm=function(){return r(this.red,"redInvm works only with red numbers"),this.red._verify1(this),this.red.invm(this)},i.prototype.redNeg=function(){return r(this.red,"redNeg works only with red numbers"),this.red._verify1(this),this.red.neg(this)},i.prototype.redPow=function(t){return r(this.red&&!t.red,"redPow(normalNum)"),this.red._verify1(this),this.red.pow(this,t)};var g={k256:null,p224:null,p192:null,p25519:null};function v(t,a){this.name=t,this.p=new i(a,16),this.n=this.p.bitLength(),this.k=new i(1).iushln(this.n).isub(this.p),this.tmp=this._tmp()}function b(){v.call(this,"k256","ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f")}function A(){v.call(this,"p224","ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001")}function w(){v.call(this,"p192","ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff")}function M(){v.call(this,"25519","7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed")}function _(t){if("string"==typeof t){var a=i._prime(t);this.m=a.p,this.prime=a}else r(t.gtn(1),"modulus must be greater than 1"),this.m=t,this.prime=null}function k(t){_.call(this,t),this.shift=this.m.bitLength(),this.shift%26!=0&&(this.shift+=26-this.shift%26),this.r=new i(1).iushln(this.shift),this.r2=this.imod(this.r.sqr()),this.rinv=this.r._invmp(this.m),this.minv=this.rinv.mul(this.r).isubn(1).div(this.m),this.minv=this.minv.umod(this.r),this.minv=this.r.sub(this.minv)}v.prototype._tmp=function(){var t=new i(null);return t.words=new Array(Math.ceil(this.n/13)),t},v.prototype.ireduce=function(t){var a,e=t;do{this.split(e,this.tmp),a=(e=(e=this.imulK(e)).iadd(this.tmp)).bitLength()}while(a>this.n);var r=a<this.n?-1:e.ucmp(this.p);return 0===r?(e.words[0]=0,e.length=1):r>0?e.isub(this.p):void 0!==e.strip?e.strip():e._strip(),e},v.prototype.split=function(t,a){t.iushrn(this.n,0,a)},v.prototype.imulK=function(t){return t.imul(this.k)},o(b,v),b.prototype.split=function(t,a){for(var e=4194303,r=Math.min(t.length,9),o=0;o<r;o++)a.words[o]=t.words[o];if(a.length=r,t.length<=9)return t.words[0]=0,void(t.length=1);var i=t.words[9];for(a.words[a.length++]=i&e,o=10;o<t.length;o++){var n=0|t.words[o];t.words[o-10]=(n&e)<<4|i>>>22,i=n}i>>>=22,t.words[o-10]=i,0===i&&t.length>10?t.length-=10:t.length-=9},b.prototype.imulK=function(t){t.words[t.length]=0,t.words[t.length+1]=0,t.length+=2;for(var a=0,e=0;e<t.length;e++){var r=0|t.words[e];a+=977*r,t.words[e]=67108863&a,a=64*r+(a/67108864|0)}return 0===t.words[t.length-1]&&(t.length--,0===t.words[t.length-1]&&t.length--),t},o(A,v),o(w,v),o(M,v),M.prototype.imulK=function(t){for(var a=0,e=0;e<t.length;e++){var r=19*(0|t.words[e])+a,o=67108863&r;r>>>=26,t.words[e]=o,a=r}return 0!==a&&(t.words[t.length++]=a),t},i._prime=function(t){if(g[t])return g[t];var a;if("k256"===t)a=new b;else if("p224"===t)a=new A;else if("p192"===t)a=new w;else{if("p25519"!==t)throw new Error("Unknown prime "+t);a=new M}return g[t]=a,a},_.prototype._verify1=function(t){r(0===t.negative,"red works only with positives"),r(t.red,"red works only with red numbers")},_.prototype._verify2=function(t,a){r(0==(t.negative|a.negative),"red works only with positives"),r(t.red&&t.red===a.red,"red works only with red numbers")},_.prototype.imod=function(t){return this.prime?this.prime.ireduce(t)._forceRed(this):t.umod(this.m)._forceRed(this)},_.prototype.neg=function(t){return t.isZero()?t.clone():this.m.sub(t)._forceRed(this)},_.prototype.add=function(t,a){this._verify2(t,a);var e=t.add(a);return e.cmp(this.m)>=0&&e.isub(this.m),e._forceRed(this)},_.prototype.iadd=function(t,a){this._verify2(t,a);var e=t.iadd(a);return e.cmp(this.m)>=0&&e.isub(this.m),e},_.prototype.sub=function(t,a){this._verify2(t,a);var e=t.sub(a);return e.cmpn(0)<0&&e.iadd(this.m),e._forceRed(this)},_.prototype.isub=function(t,a){this._verify2(t,a);var e=t.isub(a);return e.cmpn(0)<0&&e.iadd(this.m),e},_.prototype.shl=function(t,a){return this._verify1(t),this.imod(t.ushln(a))},_.prototype.imul=function(t,a){return this._verify2(t,a),this.imod(t.imul(a))},_.prototype.mul=function(t,a){return this._verify2(t,a),this.imod(t.mul(a))},_.prototype.isqr=function(t){return this.imul(t,t.clone())},_.prototype.sqr=function(t){return this.mul(t,t)},_.prototype.sqrt=function(t){if(t.isZero())return t.clone();var a=this.m.andln(3);if(r(a%2==1),3===a){var e=this.m.add(new i(1)).iushrn(2);return this.pow(t,e)}for(var o=this.m.subn(1),n=0;!o.isZero()&&0===o.andln(1);)n++,o.iushrn(1);r(!o.isZero());var s=new i(1).toRed(this),d=s.redNeg(),u=this.m.subn(1).iushrn(1),l=this.m.bitLength();for(l=new i(2*l*l).toRed(this);0!==this.pow(l,u).cmp(d);)l.redIAdd(d);for(var h=this.pow(l,o),f=this.pow(t,o.addn(1).iushrn(1)),c=this.pow(t,o),m=n;0!==c.cmp(s);){for(var p=c,y=0;0!==p.cmp(s);y++)p=p.redSqr();r(y<m);var g=this.pow(h,new i(1).iushln(m-y-1));f=f.redMul(g),h=g.redSqr(),c=c.redMul(h),m=y}return f},_.prototype.invm=function(t){var a=t._invmp(this.m);return 0!==a.negative?(a.negative=0,this.imod(a).redNeg()):this.imod(a)},_.prototype.pow=function(t,a){if(a.isZero())return new i(1).toRed(this);if(0===a.cmpn(1))return t.clone();var e=new Array(16);e[0]=new i(1).toRed(this),e[1]=t;for(var r=2;r<e.length;r++)e[r]=this.mul(e[r-1],t);var o=e[0],n=0,s=0,d=a.bitLength()%26;for(0===d&&(d=26),r=a.length-1;r>=0;r--){for(var u=a.words[r],l=d-1;l>=0;l--){var h=u>>l&1;o!==e[0]&&(o=this.sqr(o)),0!==h||0!==n?(n<<=1,n|=h,(4==++s||0===r&&0===l)&&(o=this.mul(o,e[n]),s=0,n=0)):s=0}d=26}return o},_.prototype.convertTo=function(t){var a=t.umod(this.m);return a===t?a.clone():a},_.prototype.convertFrom=function(t){var a=t.clone();return a.red=null,a},i.mont=function(t){return new k(t)},o(k,_),k.prototype.convertTo=function(t){return this.imod(t.ushln(this.shift))},k.prototype.convertFrom=function(t){var a=this.imod(t.mul(this.rinv));return a.red=null,a},k.prototype.imul=function(t,a){if(t.isZero()||a.isZero())return t.words[0]=0,t.length=1,t;var e=t.imul(a),r=e.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m),o=e.isub(r).iushrn(this.shift),i=o;return o.cmp(this.m)>=0?i=o.isub(this.m):o.cmpn(0)<0&&(i=o.iadd(this.m)),i._forceRed(this)},k.prototype.mul=function(t,a){if(t.isZero()||a.isZero())return new i(0)._forceRed(this);var e=t.mul(a),r=e.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m),o=e.isub(r).iushrn(this.shift),n=o;return o.cmp(this.m)>=0?n=o.isub(this.m):o.cmpn(0)<0&&(n=o.iadd(this.m)),n._forceRed(this)},k.prototype.invm=function(t){return this.imod(t._invmp(this.m).mul(this.r2))._forceRed(this)}}(t=e.nmd(t),this)},7616:(t,a,e)=>{"use strict";e.d(a,{dF:()=>M,fi:()=>_});var r=e(3286),o=e(711),i=e(8794),n=e(2593);const s=new o.Yd(i.i),d={},u=n.O$.from(0),l=n.O$.from(-1);function h(t,a,e,r){const i={fault:a,operation:e};return void 0!==r&&(i.value=r),s.throwError(t,o.Yd.errors.NUMERIC_FAULT,i)}let f="0";for(;f.length<256;)f+=f;function c(t){if("number"!=typeof t)try{t=n.O$.from(t).toNumber()}catch(t){}return"number"==typeof t&&t>=0&&t<=256&&!(t%1)?"1"+f.substring(0,t):s.throwArgumentError("invalid decimal size","decimals",t)}function m(t,a){null==a&&(a=0);const e=c(a),r=(t=n.O$.from(t)).lt(u);r&&(t=t.mul(l));let o=t.mod(e).toString();for(;o.length<e.length-1;)o="0"+o;o=o.match(/^([0-9]*[1-9]|0)(0*)/)[1];const i=t.div(e).toString();return t=1===e.length?i:i+"."+o,r&&(t="-"+t),t}function p(t,a){null==a&&(a=0);const e=c(a);"string"==typeof t&&t.match(/^-?[0-9.,]+$/)||s.throwArgumentError("invalid decimal value","value",t);const r="-"===t.substring(0,1);r&&(t=t.substring(1)),"."===t&&s.throwArgumentError("missing value","value",t);const o=t.split(".");o.length>2&&s.throwArgumentError("too many decimal points","value",t);let i=o[0],d=o[1];for(i||(i="0"),d||(d="0");"0"===d[d.length-1];)d=d.substring(0,d.length-1);for(d.length>e.length-1&&h("fractional component exceeds decimals","underflow","parseFixed"),""===d&&(d="0");d.length<e.length-1;)d+="0";const u=n.O$.from(i),f=n.O$.from(d);let m=u.mul(e).add(f);return r&&(m=m.mul(l)),m}class y{constructor(t,a,e,r){t!==d&&s.throwError("cannot use FixedFormat constructor; use FixedFormat.from",o.Yd.errors.UNSUPPORTED_OPERATION,{operation:"new FixedFormat"}),this.signed=a,this.width=e,this.decimals=r,this.name=(a?"":"u")+"fixed"+String(e)+"x"+String(r),this._multiplier=c(r),Object.freeze(this)}static from(t){if(t instanceof y)return t;"number"==typeof t&&(t=`fixed128x${t}`);let a=!0,e=128,r=18;if("string"==typeof t)if("fixed"===t);else if("ufixed"===t)a=!1;else{const o=t.match(/^(u?)fixed([0-9]+)x([0-9]+)$/);o||s.throwArgumentError("invalid fixed format","format",t),a="u"!==o[1],e=parseInt(o[2]),r=parseInt(o[3])}else if(t){const o=(a,e,r)=>null==t[a]?r:(typeof t[a]!==e&&s.throwArgumentError("invalid fixed format ("+a+" not "+e+")","format."+a,t[a]),t[a]);a=o("signed","boolean",a),e=o("width","number",e),r=o("decimals","number",r)}return e%8&&s.throwArgumentError("invalid fixed format width (not byte aligned)","format.width",e),r>80&&s.throwArgumentError("invalid fixed format (decimals too large)","format.decimals",r),new y(d,a,e,r)}}class g{constructor(t,a,e,r){s.checkNew(new.target,g),t!==d&&s.throwError("cannot use FixedNumber constructor; use FixedNumber.from",o.Yd.errors.UNSUPPORTED_OPERATION,{operation:"new FixedFormat"}),this.format=r,this._hex=a,this._value=e,this._isFixedNumber=!0,Object.freeze(this)}_checkFormat(t){this.format.name!==t.format.name&&s.throwArgumentError("incompatible format; use fixedNumber.toFormat","other",t)}addUnsafe(t){this._checkFormat(t);const a=p(this._value,this.format.decimals),e=p(t._value,t.format.decimals);return g.fromValue(a.add(e),this.format.decimals,this.format)}subUnsafe(t){this._checkFormat(t);const a=p(this._value,this.format.decimals),e=p(t._value,t.format.decimals);return g.fromValue(a.sub(e),this.format.decimals,this.format)}mulUnsafe(t){this._checkFormat(t);const a=p(this._value,this.format.decimals),e=p(t._value,t.format.decimals);return g.fromValue(a.mul(e).div(this.format._multiplier),this.format.decimals,this.format)}divUnsafe(t){this._checkFormat(t);const a=p(this._value,this.format.decimals),e=p(t._value,t.format.decimals);return g.fromValue(a.mul(this.format._multiplier).div(e),this.format.decimals,this.format)}floor(){const t=this.toString().split(".");1===t.length&&t.push("0");let a=g.from(t[0],this.format);const e=!t[1].match(/^(0*)$/);return this.isNegative()&&e&&(a=a.subUnsafe(v.toFormat(a.format))),a}ceiling(){const t=this.toString().split(".");1===t.length&&t.push("0");let a=g.from(t[0],this.format);const e=!t[1].match(/^(0*)$/);return!this.isNegative()&&e&&(a=a.addUnsafe(v.toFormat(a.format))),a}round(t){null==t&&(t=0);const a=this.toString().split(".");if(1===a.length&&a.push("0"),(t<0||t>80||t%1)&&s.throwArgumentError("invalid decimal count","decimals",t),a[1].length<=t)return this;const e=g.from("1"+f.substring(0,t),this.format),r=b.toFormat(this.format);return this.mulUnsafe(e).addUnsafe(r).floor().divUnsafe(e)}isZero(){return"0.0"===this._value||"0"===this._value}isNegative(){return"-"===this._value[0]}toString(){return this._value}toHexString(t){if(null==t)return this._hex;t%8&&s.throwArgumentError("invalid byte width","width",t);const a=n.O$.from(this._hex).fromTwos(this.format.width).toTwos(t).toHexString();return(0,r.$m)(a,t/8)}toUnsafeFloat(){return parseFloat(this.toString())}toFormat(t){return g.fromString(this._value,t)}static fromValue(t,a,e){return null!=e||null==a||(0,n.Zm)(a)||(e=a,a=null),null==a&&(a=0),null==e&&(e="fixed"),g.fromString(m(t,a),y.from(e))}static fromString(t,a){null==a&&(a="fixed");const e=y.from(a),o=p(t,e.decimals);!e.signed&&o.lt(u)&&h("unsigned value cannot be negative","overflow","value",t);let i=null;e.signed?i=o.toTwos(e.width).toHexString():(i=o.toHexString(),i=(0,r.$m)(i,e.width/8));const n=m(o,e.decimals);return new g(d,i,n,e)}static fromBytes(t,a){null==a&&(a="fixed");const e=y.from(a);if((0,r.lE)(t).length>e.width/8)throw new Error("overflow");let o=n.O$.from(t);e.signed&&(o=o.fromTwos(e.width));const i=o.toTwos((e.signed?0:1)+e.width).toHexString(),s=m(o,e.decimals);return new g(d,i,s,e)}static from(t,a){if("string"==typeof t)return g.fromString(t,a);if((0,r._t)(t))return g.fromBytes(t,a);try{return g.fromValue(t,0,a)}catch(t){if(t.code!==o.Yd.errors.INVALID_ARGUMENT)throw t}return s.throwArgumentError("invalid FixedNumber value","value",t)}static isFixedNumber(t){return!(!t||!t._isFixedNumber)}}const v=g.from(1),b=g.from("0.5"),A=new o.Yd("units/5.4.0"),w=["wei","kwei","mwei","gwei","szabo","finney","ether"];function M(t){return function(t,a){if("string"==typeof a){const t=w.indexOf(a);-1!==t&&(a=3*t)}return m(t,null!=a?a:18)}(t,18)}function _(t){return function(t,a){if("string"!=typeof t&&A.throwArgumentError("value must be a string","value",t),"string"==typeof a){const t=w.indexOf(a);-1!==t&&(a=3*t)}return p(t,null!=a?a:18)}(t,18)}},8054:(t,a,e)=>{"use strict";e.d(a,{Z:()=>c});var r=e(1206),o=e.n(r);var i="INSTALLED",n="NOT_INSTALLED",s="REGISTERED",d="REGISTERING",u="RELOADING",l={CHROME:"https://chrome.google.com/webstore/detail/metamask/nkbihfbeogaeaoehlefnkodbefgpgknn",FIREFOX:"https://addons.mozilla.org/firefox/addon/ether-metamask/",DEFAULT:"https://metamask.io"},h="REGISTRATION_IN_PROGRESS",f="FORWARDER_ID";const c=function(){function t(a){var e=void 0===a?{}:a,r=e.forwarderOrigin,o=void 0===r?"https://fwd.metamask.io":r,s=e.forwarderMode,d=void 0===s?t.FORWARDER_MODE.INJECT:s;this.forwarderOrigin=o,this.forwarderMode=d,this.state=t.isMetaMaskInstalled()?i:n;var u=t._detectBrowser();this.downloadUrl=u?l[u]:l.DEFAULT,this._onMessage=this._onMessage.bind(this),this._onMessageFromForwarder=this._onMessageFromForwarder.bind(this),this._openForwarder=this._openForwarder.bind(this),this._openDownloadPage=this._openDownloadPage.bind(this),this.startOnboarding=this.startOnboarding.bind(this),this.stopOnboarding=this.stopOnboarding.bind(this),window.addEventListener("message",this._onMessage),d===t.FORWARDER_MODE.INJECT&&"true"===sessionStorage.getItem(h)&&t._injectForwarder(this.forwarderOrigin)}return t.prototype._onMessage=function(t){if(t.origin===this.forwarderOrigin)return"metamask:reload"===t.data.type?this._onMessageFromForwarder(t):void console.debug("Unknown message from '"+t.origin+"' with data "+JSON.stringify(t.data))},t.prototype._onMessageUnknownStateError=function(t){throw new Error("Unknown state: '"+t+"'")},t.prototype._onMessageFromForwarder=function(a){return e=this,r=void 0,l=function(){return function(t,a){var e,r,o,i,n={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(e)throw new TypeError("Generator is already executing.");for(;n;)try{if(e=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return n.label++,{value:i[1],done:!1};case 5:n.label++,r=i[1],i=[0];continue;case 7:i=n.ops.pop(),n.trys.pop();continue;default:if(!((o=(o=n.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){n=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){n.label=i[1];break}if(6===i[0]&&n.label<o[1]){n.label=o[1],o=i;break}if(o&&n.label<o[2]){n.label=o[2],n.ops.push(i);break}o[2]&&n.ops.pop(),n.trys.pop();continue}i=a.call(t,n)}catch(t){i=[6,t],r=0}finally{e=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}}(this,(function(e){switch(e.label){case 0:switch(this.state){case u:return[3,1];case n:return[3,2];case i:return[3,3];case d:return[3,5];case s:return[3,6]}return[3,7];case 1:return console.debug("Ignoring message while reloading"),[3,8];case 2:return console.debug("Reloading now to register with MetaMask"),this.state=u,location.reload(),[3,8];case 3:return console.debug("Registering with MetaMask"),this.state=d,[4,t._register()];case 4:return e.sent(),this.state=s,a.source.postMessage({type:"metamask:registrationCompleted"},a.origin),this.stopOnboarding(),[3,8];case 5:return console.debug("Already registering - ignoring reload message"),[3,8];case 6:return console.debug("Already registered - ignoring reload message"),[3,8];case 7:this._onMessageUnknownStateError(this.state),e.label=8;case 8:return[2]}}))},new((o=void 0)||(o=Promise))((function(t,a){function i(t){try{s(l.next(t))}catch(t){a(t)}}function n(t){try{s(l.throw(t))}catch(t){a(t)}}function s(a){var e;a.done?t(a.value):(e=a.value,e instanceof o?e:new o((function(t){t(e)}))).then(i,n)}s((l=l.apply(e,r||[])).next())}));var e,r,o,l},t.prototype.startOnboarding=function(){sessionStorage.setItem(h,"true"),this._openDownloadPage(),this._openForwarder()},t.prototype.stopOnboarding=function(){"true"===sessionStorage.getItem(h)&&(this.forwarderMode===t.FORWARDER_MODE.INJECT&&(console.debug("Removing forwarder"),t._removeForwarder()),sessionStorage.setItem(h,"false"))},t.prototype._openForwarder=function(){this.forwarderMode===t.FORWARDER_MODE.OPEN_TAB?window.open(this.forwarderOrigin,"_blank"):t._injectForwarder(this.forwarderOrigin)},t.prototype._openDownloadPage=function(){window.open(this.downloadUrl,"_blank")},t.isMetaMaskInstalled=function(){return Boolean(window.ethereum&&window.ethereum.isMetaMask)},t._register=function(){return window.ethereum.request({method:"wallet_registerOnboarding"})},t._injectForwarder=function(t){var a=document.body,e=document.createElement("iframe");e.setAttribute("height","0"),e.setAttribute("width","0"),e.setAttribute("style","display: none;"),e.setAttribute("src",t),e.setAttribute("id",f),a.insertBefore(e,a.children[0])},t._removeForwarder=function(){var t;null===(t=document.getElementById(f))||void 0===t||t.remove()},t._detectBrowser=function(){var t=o().parse(window.navigator.userAgent);return"Firefox"===t.browser.name?"FIREFOX":["Chrome","Chromium"].includes(t.browser.name||"")?"CHROME":null},t.FORWARDER_MODE={INJECT:"INJECT",OPEN_TAB:"OPEN_TAB"},t}()},2711:function(t){t.exports=function(t){function a(r){if(e[r])return e[r].exports;var o=e[r]={exports:{},id:r,loaded:!1};return t[r].call(o.exports,o,o.exports,a),o.loaded=!0,o.exports}var e={};return a.m=t,a.c=e,a.p="dist/",a(0)}([function(t,a,e){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}var o=Object.assign||function(t){for(var a=1;a<arguments.length;a++){var e=arguments[a];for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])}return t},i=(r(e(1)),e(6)),n=r(i),s=r(e(7)),d=r(e(8)),u=r(e(9)),l=r(e(10)),h=r(e(11)),f=r(e(14)),c=[],m=!1,p={offset:120,delay:0,easing:"ease",duration:400,disable:!1,once:!1,startEvent:"DOMContentLoaded",throttleDelay:99,debounceDelay:50,disableMutationObserver:!1},y=function(){if(arguments.length>0&&void 0!==arguments[0]&&arguments[0]&&(m=!0),m)return c=(0,h.default)(c,p),(0,l.default)(c,p.once),c},g=function(){c=(0,f.default)(),y()};t.exports={init:function(t){p=o(p,t),c=(0,f.default)();var a=document.all&&!window.atob;return function(t){return!0===t||"mobile"===t&&u.default.mobile()||"phone"===t&&u.default.phone()||"tablet"===t&&u.default.tablet()||"function"==typeof t&&!0===t()}(p.disable)||a?void c.forEach((function(t,a){t.node.removeAttribute("data-aos"),t.node.removeAttribute("data-aos-easing"),t.node.removeAttribute("data-aos-duration"),t.node.removeAttribute("data-aos-delay")})):(p.disableMutationObserver||d.default.isSupported()||(console.info('\n      aos: MutationObserver is not supported on this browser,\n      code mutations observing has been disabled.\n      You may have to call "refreshHard()" by yourself.\n    '),p.disableMutationObserver=!0),document.querySelector("body").setAttribute("data-aos-easing",p.easing),document.querySelector("body").setAttribute("data-aos-duration",p.duration),document.querySelector("body").setAttribute("data-aos-delay",p.delay),"DOMContentLoaded"===p.startEvent&&["complete","interactive"].indexOf(document.readyState)>-1?y(!0):"load"===p.startEvent?window.addEventListener(p.startEvent,(function(){y(!0)})):document.addEventListener(p.startEvent,(function(){y(!0)})),window.addEventListener("resize",(0,s.default)(y,p.debounceDelay,!0)),window.addEventListener("orientationchange",(0,s.default)(y,p.debounceDelay,!0)),window.addEventListener("scroll",(0,n.default)((function(){(0,l.default)(c,p.once)}),p.throttleDelay)),p.disableMutationObserver||d.default.ready("[data-aos]",g),c)},refresh:y,refreshHard:g}},function(t,a){},,,,,function(t,a){(function(a){"use strict";function e(t,a,e){function o(a){var e=f,r=c;return f=c=void 0,v=a,p=t.apply(r,e)}function n(t){return v=t,y=setTimeout(u,a),M?o(t):p}function d(t){var e=t-g;return void 0===g||e>=a||e<0||_&&t-v>=m}function u(){var t=w();return d(t)?l(t):void(y=setTimeout(u,function(t){var e=a-(t-g);return _?A(e,m-(t-v)):e}(t)))}function l(t){return y=void 0,k&&f?o(t):(f=c=void 0,p)}function h(){var t=w(),e=d(t);if(f=arguments,c=this,g=t,e){if(void 0===y)return n(g);if(_)return y=setTimeout(u,a),o(g)}return void 0===y&&(y=setTimeout(u,a)),p}var f,c,m,p,y,g,v=0,M=!1,_=!1,k=!0;if("function"!=typeof t)throw new TypeError(s);return a=i(a)||0,r(e)&&(M=!!e.leading,m=(_="maxWait"in e)?b(i(e.maxWait)||0,a):m,k="trailing"in e?!!e.trailing:k),h.cancel=function(){void 0!==y&&clearTimeout(y),v=0,f=g=c=y=void 0},h.flush=function(){return void 0===y?p:l(w())},h}function r(t){var a=void 0===t?"undefined":n(t);return!!t&&("object"==a||"function"==a)}function o(t){return"symbol"==(void 0===t?"undefined":n(t))||function(t){return!!t&&"object"==(void 0===t?"undefined":n(t))}(t)&&v.call(t)==u}function i(t){if("number"==typeof t)return t;if(o(t))return d;if(r(t)){var a="function"==typeof t.valueOf?t.valueOf():t;t=r(a)?a+"":a}if("string"!=typeof t)return 0===t?t:+t;t=t.replace(l,"");var e=f.test(t);return e||c.test(t)?m(t.slice(2),e?2:8):h.test(t)?d:+t}var n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},s="Expected a function",d=NaN,u="[object Symbol]",l=/^\s+|\s+$/g,h=/^[-+]0x[0-9a-f]+$/i,f=/^0b[01]+$/i,c=/^0o[0-7]+$/i,m=parseInt,p="object"==(void 0===a?"undefined":n(a))&&a&&a.Object===Object&&a,y="object"==("undefined"==typeof self?"undefined":n(self))&&self&&self.Object===Object&&self,g=p||y||Function("return this")(),v=Object.prototype.toString,b=Math.max,A=Math.min,w=function(){return g.Date.now()};t.exports=function(t,a,o){var i=!0,n=!0;if("function"!=typeof t)throw new TypeError(s);return r(o)&&(i="leading"in o?!!o.leading:i,n="trailing"in o?!!o.trailing:n),e(t,a,{leading:i,maxWait:a,trailing:n})}}).call(a,function(){return this}())},function(t,a){(function(a){"use strict";function e(t){var a=void 0===t?"undefined":i(t);return!!t&&("object"==a||"function"==a)}function r(t){return"symbol"==(void 0===t?"undefined":i(t))||function(t){return!!t&&"object"==(void 0===t?"undefined":i(t))}(t)&&g.call(t)==d}function o(t){if("number"==typeof t)return t;if(r(t))return s;if(e(t)){var a="function"==typeof t.valueOf?t.valueOf():t;t=e(a)?a+"":a}if("string"!=typeof t)return 0===t?t:+t;t=t.replace(u,"");var o=h.test(t);return o||f.test(t)?c(t.slice(2),o?2:8):l.test(t)?s:+t}var i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},n="Expected a function",s=NaN,d="[object Symbol]",u=/^\s+|\s+$/g,l=/^[-+]0x[0-9a-f]+$/i,h=/^0b[01]+$/i,f=/^0o[0-7]+$/i,c=parseInt,m="object"==(void 0===a?"undefined":i(a))&&a&&a.Object===Object&&a,p="object"==("undefined"==typeof self?"undefined":i(self))&&self&&self.Object===Object&&self,y=m||p||Function("return this")(),g=Object.prototype.toString,v=Math.max,b=Math.min,A=function(){return y.Date.now()};t.exports=function(t,a,r){function i(a){var e=f,r=c;return f=c=void 0,w=a,p=t.apply(r,e)}function s(t){return w=t,y=setTimeout(u,a),M?i(t):p}function d(t){var e=t-g;return void 0===g||e>=a||e<0||_&&t-w>=m}function u(){var t=A();return d(t)?l(t):void(y=setTimeout(u,function(t){var e=a-(t-g);return _?b(e,m-(t-w)):e}(t)))}function l(t){return y=void 0,k&&f?i(t):(f=c=void 0,p)}function h(){var t=A(),e=d(t);if(f=arguments,c=this,g=t,e){if(void 0===y)return s(g);if(_)return y=setTimeout(u,a),i(g)}return void 0===y&&(y=setTimeout(u,a)),p}var f,c,m,p,y,g,w=0,M=!1,_=!1,k=!0;if("function"!=typeof t)throw new TypeError(n);return a=o(a)||0,e(r)&&(M=!!r.leading,m=(_="maxWait"in r)?v(o(r.maxWait)||0,a):m,k="trailing"in r?!!r.trailing:k),h.cancel=function(){void 0!==y&&clearTimeout(y),w=0,f=g=c=y=void 0},h.flush=function(){return void 0===y?p:l(A())},h}}).call(a,function(){return this}())},function(t,a){"use strict";function e(t){var a=void 0,r=void 0;for(a=0;a<t.length;a+=1){if((r=t[a]).dataset&&r.dataset.aos)return!0;if(r.children&&e(r.children))return!0}return!1}function r(){return window.MutationObserver||window.WebKitMutationObserver||window.MozMutationObserver}function o(t){t&&t.forEach((function(t){var a=Array.prototype.slice.call(t.addedNodes),r=Array.prototype.slice.call(t.removedNodes);if(e(a.concat(r)))return i()}))}Object.defineProperty(a,"__esModule",{value:!0});var i=function(){};a.default={isSupported:function(){return!!r()},ready:function(t,a){var e=window.document,n=new(r())(o);i=a,n.observe(e.documentElement,{childList:!0,subtree:!0,removedNodes:!0})}}},function(t,a){"use strict";function e(){return navigator.userAgent||navigator.vendor||window.opera||""}Object.defineProperty(a,"__esModule",{value:!0});var r=function(){function t(t,a){for(var e=0;e<a.length;e++){var r=a[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(a,e,r){return e&&t(a.prototype,e),r&&t(a,r),a}}(),o=/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i,i=/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i,n=/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i,s=/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i,d=function(){function t(){!function(t,a){if(!(t instanceof a))throw new TypeError("Cannot call a class as a function")}(this,t)}return r(t,[{key:"phone",value:function(){var t=e();return!(!o.test(t)&&!i.test(t.substr(0,4)))}},{key:"mobile",value:function(){var t=e();return!(!n.test(t)&&!s.test(t.substr(0,4)))}},{key:"tablet",value:function(){return this.mobile()&&!this.phone()}}]),t}();a.default=new d},function(t,a){"use strict";Object.defineProperty(a,"__esModule",{value:!0});a.default=function(t,a){var e=window.pageYOffset,r=window.innerHeight;t.forEach((function(t,o){!function(t,a,e){var r=t.node.getAttribute("data-aos-once");a>t.position?t.node.classList.add("aos-animate"):void 0!==r&&("false"===r||!e&&"true"!==r)&&t.node.classList.remove("aos-animate")}(t,r+e,a)}))}},function(t,a,e){"use strict";Object.defineProperty(a,"__esModule",{value:!0});var r=function(t){return t&&t.__esModule?t:{default:t}}(e(12));a.default=function(t,a){return t.forEach((function(t,e){t.node.classList.add("aos-init"),t.position=(0,r.default)(t.node,a.offset)})),t}},function(t,a,e){"use strict";Object.defineProperty(a,"__esModule",{value:!0});var r=function(t){return t&&t.__esModule?t:{default:t}}(e(13));a.default=function(t,a){var e=0,o=0,i=window.innerHeight,n={offset:t.getAttribute("data-aos-offset"),anchor:t.getAttribute("data-aos-anchor"),anchorPlacement:t.getAttribute("data-aos-anchor-placement")};switch(n.offset&&!isNaN(n.offset)&&(o=parseInt(n.offset)),n.anchor&&document.querySelectorAll(n.anchor)&&(t=document.querySelectorAll(n.anchor)[0]),e=(0,r.default)(t).top,n.anchorPlacement){case"top-bottom":break;case"center-bottom":e+=t.offsetHeight/2;break;case"bottom-bottom":e+=t.offsetHeight;break;case"top-center":e+=i/2;break;case"bottom-center":e+=i/2+t.offsetHeight;break;case"center-center":e+=i/2+t.offsetHeight/2;break;case"top-top":e+=i;break;case"bottom-top":e+=t.offsetHeight+i;break;case"center-top":e+=t.offsetHeight/2+i}return n.anchorPlacement||n.offset||isNaN(a)||(o=a),e+o}},function(t,a){"use strict";Object.defineProperty(a,"__esModule",{value:!0});a.default=function(t){for(var a=0,e=0;t&&!isNaN(t.offsetLeft)&&!isNaN(t.offsetTop);)a+=t.offsetLeft-("BODY"!=t.tagName?t.scrollLeft:0),e+=t.offsetTop-("BODY"!=t.tagName?t.scrollTop:0),t=t.offsetParent;return{top:e,left:a}}},function(t,a){"use strict";Object.defineProperty(a,"__esModule",{value:!0});a.default=function(t){return t=t||document.querySelectorAll("[data-aos]"),Array.prototype.map.call(t,(function(t){return{node:t}}))}}])},2882:t=>{"use strict";for(var a="qpzry9x8gf2tvdw0s3jn54khce6mua7l",e={},r=0;r<a.length;r++){var o=a.charAt(r);if(void 0!==e[o])throw new TypeError(o+" is ambiguous");e[o]=r}function i(t){var a=t>>25;return(33554431&t)<<5^996825010&-(a>>0&1)^642813549&-(a>>1&1)^513874426&-(a>>2&1)^1027748829&-(a>>3&1)^705979059&-(a>>4&1)}function n(t){for(var a=1,e=0;e<t.length;++e){var r=t.charCodeAt(e);if(r<33||r>126)return"Invalid prefix ("+t+")";a=i(a)^r>>5}for(a=i(a),e=0;e<t.length;++e){var o=t.charCodeAt(e);a=i(a)^31&o}return a}function s(t,a){if(a=a||90,t.length<8)return t+" too short";if(t.length>a)return"Exceeds length limit";var r=t.toLowerCase(),o=t.toUpperCase();if(t!==r&&t!==o)return"Mixed-case string "+t;var s=(t=r).lastIndexOf("1");if(-1===s)return"No separator character for "+t;if(0===s)return"Missing prefix for "+t;var d=t.slice(0,s),u=t.slice(s+1);if(u.length<6)return"Data too short";var l=n(d);if("string"==typeof l)return l;for(var h=[],f=0;f<u.length;++f){var c=u.charAt(f),m=e[c];if(void 0===m)return"Unknown character "+c;l=i(l)^m,f+6>=u.length||h.push(m)}return 1!==l?"Invalid checksum for "+t:{prefix:d,words:h}}function d(t,a,e,r){for(var o=0,i=0,n=(1<<e)-1,s=[],d=0;d<t.length;++d)for(o=o<<a|t[d],i+=a;i>=e;)i-=e,s.push(o>>i&n);if(r)i>0&&s.push(o<<e-i&n);else{if(i>=a)return"Excess padding";if(o<<e-i&n)return"Non-zero padding"}return s}t.exports={decodeUnsafe:function(){var t=s.apply(null,arguments);if("object"==typeof t)return t},decode:function(t){var a=s.apply(null,arguments);if("object"==typeof a)return a;throw new Error(a)},encode:function(t,e,r){if(r=r||90,t.length+7+e.length>r)throw new TypeError("Exceeds length limit");var o=n(t=t.toLowerCase());if("string"==typeof o)throw new Error(o);for(var s=t+"1",d=0;d<e.length;++d){var u=e[d];if(u>>5!=0)throw new Error("Non 5-bit word");o=i(o)^u,s+=a.charAt(u)}for(d=0;d<6;++d)o=i(o);for(o^=1,d=0;d<6;++d)s+=a.charAt(o>>5*(5-d)&31);return s},toWordsUnsafe:function(t){var a=d(t,8,5,!0);if(Array.isArray(a))return a},toWords:function(t){var a=d(t,8,5,!0);if(Array.isArray(a))return a;throw new Error(a)},fromWordsUnsafe:function(t){var a=d(t,5,8,!1);if(Array.isArray(a))return a},fromWords:function(t){var a=d(t,5,8,!1);if(Array.isArray(a))return a;throw new Error(a)}}},1206:function(t){t.exports=function(t){var a={};function e(r){if(a[r])return a[r].exports;var o=a[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,e),o.l=!0,o.exports}return e.m=t,e.c=a,e.d=function(t,a,r){e.o(t,a)||Object.defineProperty(t,a,{enumerable:!0,get:r})},e.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e.t=function(t,a){if(1&a&&(t=e(t)),8&a)return t;if(4&a&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(e.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&a&&"string"!=typeof t)for(var o in t)e.d(r,o,function(a){return t[a]}.bind(null,o));return r},e.n=function(t){var a=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(a,"a",a),a},e.o=function(t,a){return Object.prototype.hasOwnProperty.call(t,a)},e.p="",e(e.s=90)}({17:function(t,a,e){"use strict";a.__esModule=!0,a.default=void 0;var r=e(18),o=function(){function t(){}return t.getFirstMatch=function(t,a){var e=a.match(t);return e&&e.length>0&&e[1]||""},t.getSecondMatch=function(t,a){var e=a.match(t);return e&&e.length>1&&e[2]||""},t.matchAndReturnConst=function(t,a,e){if(t.test(a))return e},t.getWindowsVersionName=function(t){switch(t){case"NT":return"NT";case"XP":case"NT 5.1":return"XP";case"NT 5.0":return"2000";case"NT 5.2":return"2003";case"NT 6.0":return"Vista";case"NT 6.1":return"7";case"NT 6.2":return"8";case"NT 6.3":return"8.1";case"NT 10.0":return"10";default:return}},t.getMacOSVersionName=function(t){var a=t.split(".").splice(0,2).map((function(t){return parseInt(t,10)||0}));if(a.push(0),10===a[0])switch(a[1]){case 5:return"Leopard";case 6:return"Snow Leopard";case 7:return"Lion";case 8:return"Mountain Lion";case 9:return"Mavericks";case 10:return"Yosemite";case 11:return"El Capitan";case 12:return"Sierra";case 13:return"High Sierra";case 14:return"Mojave";case 15:return"Catalina";default:return}},t.getAndroidVersionName=function(t){var a=t.split(".").splice(0,2).map((function(t){return parseInt(t,10)||0}));if(a.push(0),!(1===a[0]&&a[1]<5))return 1===a[0]&&a[1]<6?"Cupcake":1===a[0]&&a[1]>=6?"Donut":2===a[0]&&a[1]<2?"Eclair":2===a[0]&&2===a[1]?"Froyo":2===a[0]&&a[1]>2?"Gingerbread":3===a[0]?"Honeycomb":4===a[0]&&a[1]<1?"Ice Cream Sandwich":4===a[0]&&a[1]<4?"Jelly Bean":4===a[0]&&a[1]>=4?"KitKat":5===a[0]?"Lollipop":6===a[0]?"Marshmallow":7===a[0]?"Nougat":8===a[0]?"Oreo":9===a[0]?"Pie":void 0},t.getVersionPrecision=function(t){return t.split(".").length},t.compareVersions=function(a,e,r){void 0===r&&(r=!1);var o=t.getVersionPrecision(a),i=t.getVersionPrecision(e),n=Math.max(o,i),s=0,d=t.map([a,e],(function(a){var e=n-t.getVersionPrecision(a),r=a+new Array(e+1).join(".0");return t.map(r.split("."),(function(t){return new Array(20-t.length).join("0")+t})).reverse()}));for(r&&(s=n-Math.min(o,i)),n-=1;n>=s;){if(d[0][n]>d[1][n])return 1;if(d[0][n]===d[1][n]){if(n===s)return 0;n-=1}else if(d[0][n]<d[1][n])return-1}},t.map=function(t,a){var e,r=[];if(Array.prototype.map)return Array.prototype.map.call(t,a);for(e=0;e<t.length;e+=1)r.push(a(t[e]));return r},t.find=function(t,a){var e,r;if(Array.prototype.find)return Array.prototype.find.call(t,a);for(e=0,r=t.length;e<r;e+=1){var o=t[e];if(a(o,e))return o}},t.assign=function(t){for(var a,e,r=t,o=arguments.length,i=new Array(o>1?o-1:0),n=1;n<o;n++)i[n-1]=arguments[n];if(Object.assign)return Object.assign.apply(Object,[t].concat(i));var s=function(){var t=i[a];"object"==typeof t&&null!==t&&Object.keys(t).forEach((function(a){r[a]=t[a]}))};for(a=0,e=i.length;a<e;a+=1)s();return t},t.getBrowserAlias=function(t){return r.BROWSER_ALIASES_MAP[t]},t.getBrowserTypeByAlias=function(t){return r.BROWSER_MAP[t]||""},t}();a.default=o,t.exports=a.default},18:function(t,a,e){"use strict";a.__esModule=!0,a.ENGINE_MAP=a.OS_MAP=a.PLATFORMS_MAP=a.BROWSER_MAP=a.BROWSER_ALIASES_MAP=void 0,a.BROWSER_ALIASES_MAP={"Amazon Silk":"amazon_silk","Android Browser":"android",Bada:"bada",BlackBerry:"blackberry",Chrome:"chrome",Chromium:"chromium",Electron:"electron",Epiphany:"epiphany",Firefox:"firefox",Focus:"focus",Generic:"generic","Google Search":"google_search",Googlebot:"googlebot","Internet Explorer":"ie","K-Meleon":"k_meleon",Maxthon:"maxthon","Microsoft Edge":"edge","MZ Browser":"mz","NAVER Whale Browser":"naver",Opera:"opera","Opera Coast":"opera_coast",PhantomJS:"phantomjs",Puffin:"puffin",QupZilla:"qupzilla",QQ:"qq",QQLite:"qqlite",Safari:"safari",Sailfish:"sailfish","Samsung Internet for Android":"samsung_internet",SeaMonkey:"seamonkey",Sleipnir:"sleipnir",Swing:"swing",Tizen:"tizen","UC Browser":"uc",Vivaldi:"vivaldi","WebOS Browser":"webos",WeChat:"wechat","Yandex Browser":"yandex",Roku:"roku"},a.BROWSER_MAP={amazon_silk:"Amazon Silk",android:"Android Browser",bada:"Bada",blackberry:"BlackBerry",chrome:"Chrome",chromium:"Chromium",electron:"Electron",epiphany:"Epiphany",firefox:"Firefox",focus:"Focus",generic:"Generic",googlebot:"Googlebot",google_search:"Google Search",ie:"Internet Explorer",k_meleon:"K-Meleon",maxthon:"Maxthon",edge:"Microsoft Edge",mz:"MZ Browser",naver:"NAVER Whale Browser",opera:"Opera",opera_coast:"Opera Coast",phantomjs:"PhantomJS",puffin:"Puffin",qupzilla:"QupZilla",qq:"QQ Browser",qqlite:"QQ Browser Lite",safari:"Safari",sailfish:"Sailfish",samsung_internet:"Samsung Internet for Android",seamonkey:"SeaMonkey",sleipnir:"Sleipnir",swing:"Swing",tizen:"Tizen",uc:"UC Browser",vivaldi:"Vivaldi",webos:"WebOS Browser",wechat:"WeChat",yandex:"Yandex Browser"},a.PLATFORMS_MAP={tablet:"tablet",mobile:"mobile",desktop:"desktop",tv:"tv"},a.OS_MAP={WindowsPhone:"Windows Phone",Windows:"Windows",MacOS:"macOS",iOS:"iOS",Android:"Android",WebOS:"WebOS",BlackBerry:"BlackBerry",Bada:"Bada",Tizen:"Tizen",Linux:"Linux",ChromeOS:"Chrome OS",PlayStation4:"PlayStation 4",Roku:"Roku"},a.ENGINE_MAP={EdgeHTML:"EdgeHTML",Blink:"Blink",Trident:"Trident",Presto:"Presto",Gecko:"Gecko",WebKit:"WebKit"}},90:function(t,a,e){"use strict";a.__esModule=!0,a.default=void 0;var r,o=(r=e(91))&&r.__esModule?r:{default:r},i=e(18);function n(t,a){for(var e=0;e<a.length;e++){var r=a[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var s=function(){function t(){}var a,e;return t.getParser=function(t,a){if(void 0===a&&(a=!1),"string"!=typeof t)throw new Error("UserAgent should be a string");return new o.default(t,a)},t.parse=function(t){return new o.default(t).getResult()},a=t,e=[{key:"BROWSER_MAP",get:function(){return i.BROWSER_MAP}},{key:"ENGINE_MAP",get:function(){return i.ENGINE_MAP}},{key:"OS_MAP",get:function(){return i.OS_MAP}},{key:"PLATFORMS_MAP",get:function(){return i.PLATFORMS_MAP}}],null&&n(a.prototype,null),e&&n(a,e),t}();a.default=s,t.exports=a.default},91:function(t,a,e){"use strict";a.__esModule=!0,a.default=void 0;var r=d(e(92)),o=d(e(93)),i=d(e(94)),n=d(e(95)),s=d(e(17));function d(t){return t&&t.__esModule?t:{default:t}}var u=function(){function t(t,a){if(void 0===a&&(a=!1),null==t||""===t)throw new Error("UserAgent parameter can't be empty");this._ua=t,this.parsedResult={},!0!==a&&this.parse()}var a=t.prototype;return a.getUA=function(){return this._ua},a.test=function(t){return t.test(this._ua)},a.parseBrowser=function(){var t=this;this.parsedResult.browser={};var a=s.default.find(r.default,(function(a){if("function"==typeof a.test)return a.test(t);if(a.test instanceof Array)return a.test.some((function(a){return t.test(a)}));throw new Error("Browser's test function is not valid")}));return a&&(this.parsedResult.browser=a.describe(this.getUA())),this.parsedResult.browser},a.getBrowser=function(){return this.parsedResult.browser?this.parsedResult.browser:this.parseBrowser()},a.getBrowserName=function(t){return t?String(this.getBrowser().name).toLowerCase()||"":this.getBrowser().name||""},a.getBrowserVersion=function(){return this.getBrowser().version},a.getOS=function(){return this.parsedResult.os?this.parsedResult.os:this.parseOS()},a.parseOS=function(){var t=this;this.parsedResult.os={};var a=s.default.find(o.default,(function(a){if("function"==typeof a.test)return a.test(t);if(a.test instanceof Array)return a.test.some((function(a){return t.test(a)}));throw new Error("Browser's test function is not valid")}));return a&&(this.parsedResult.os=a.describe(this.getUA())),this.parsedResult.os},a.getOSName=function(t){var a=this.getOS().name;return t?String(a).toLowerCase()||"":a||""},a.getOSVersion=function(){return this.getOS().version},a.getPlatform=function(){return this.parsedResult.platform?this.parsedResult.platform:this.parsePlatform()},a.getPlatformType=function(t){void 0===t&&(t=!1);var a=this.getPlatform().type;return t?String(a).toLowerCase()||"":a||""},a.parsePlatform=function(){var t=this;this.parsedResult.platform={};var a=s.default.find(i.default,(function(a){if("function"==typeof a.test)return a.test(t);if(a.test instanceof Array)return a.test.some((function(a){return t.test(a)}));throw new Error("Browser's test function is not valid")}));return a&&(this.parsedResult.platform=a.describe(this.getUA())),this.parsedResult.platform},a.getEngine=function(){return this.parsedResult.engine?this.parsedResult.engine:this.parseEngine()},a.getEngineName=function(t){return t?String(this.getEngine().name).toLowerCase()||"":this.getEngine().name||""},a.parseEngine=function(){var t=this;this.parsedResult.engine={};var a=s.default.find(n.default,(function(a){if("function"==typeof a.test)return a.test(t);if(a.test instanceof Array)return a.test.some((function(a){return t.test(a)}));throw new Error("Browser's test function is not valid")}));return a&&(this.parsedResult.engine=a.describe(this.getUA())),this.parsedResult.engine},a.parse=function(){return this.parseBrowser(),this.parseOS(),this.parsePlatform(),this.parseEngine(),this},a.getResult=function(){return s.default.assign({},this.parsedResult)},a.satisfies=function(t){var a=this,e={},r=0,o={},i=0;if(Object.keys(t).forEach((function(a){var n=t[a];"string"==typeof n?(o[a]=n,i+=1):"object"==typeof n&&(e[a]=n,r+=1)})),r>0){var n=Object.keys(e),d=s.default.find(n,(function(t){return a.isOS(t)}));if(d){var u=this.satisfies(e[d]);if(void 0!==u)return u}var l=s.default.find(n,(function(t){return a.isPlatform(t)}));if(l){var h=this.satisfies(e[l]);if(void 0!==h)return h}}if(i>0){var f=Object.keys(o),c=s.default.find(f,(function(t){return a.isBrowser(t,!0)}));if(void 0!==c)return this.compareVersion(o[c])}},a.isBrowser=function(t,a){void 0===a&&(a=!1);var e=this.getBrowserName().toLowerCase(),r=t.toLowerCase(),o=s.default.getBrowserTypeByAlias(r);return a&&o&&(r=o.toLowerCase()),r===e},a.compareVersion=function(t){var a=[0],e=t,r=!1,o=this.getBrowserVersion();if("string"==typeof o)return">"===t[0]||"<"===t[0]?(e=t.substr(1),"="===t[1]?(r=!0,e=t.substr(2)):a=[],">"===t[0]?a.push(1):a.push(-1)):"="===t[0]?e=t.substr(1):"~"===t[0]&&(r=!0,e=t.substr(1)),a.indexOf(s.default.compareVersions(o,e,r))>-1},a.isOS=function(t){return this.getOSName(!0)===String(t).toLowerCase()},a.isPlatform=function(t){return this.getPlatformType(!0)===String(t).toLowerCase()},a.isEngine=function(t){return this.getEngineName(!0)===String(t).toLowerCase()},a.is=function(t,a){return void 0===a&&(a=!1),this.isBrowser(t,a)||this.isOS(t)||this.isPlatform(t)},a.some=function(t){var a=this;return void 0===t&&(t=[]),t.some((function(t){return a.is(t)}))},t}();a.default=u,t.exports=a.default},92:function(t,a,e){"use strict";a.__esModule=!0,a.default=void 0;var r,o=(r=e(17))&&r.__esModule?r:{default:r},i=/version\/(\d+(\.?_?\d+)+)/i,n=[{test:[/googlebot/i],describe:function(t){var a={name:"Googlebot"},e=o.default.getFirstMatch(/googlebot\/(\d+(\.\d+))/i,t)||o.default.getFirstMatch(i,t);return e&&(a.version=e),a}},{test:[/opera/i],describe:function(t){var a={name:"Opera"},e=o.default.getFirstMatch(i,t)||o.default.getFirstMatch(/(?:opera)[\s/](\d+(\.?_?\d+)+)/i,t);return e&&(a.version=e),a}},{test:[/opr\/|opios/i],describe:function(t){var a={name:"Opera"},e=o.default.getFirstMatch(/(?:opr|opios)[\s/](\S+)/i,t)||o.default.getFirstMatch(i,t);return e&&(a.version=e),a}},{test:[/SamsungBrowser/i],describe:function(t){var a={name:"Samsung Internet for Android"},e=o.default.getFirstMatch(i,t)||o.default.getFirstMatch(/(?:SamsungBrowser)[\s/](\d+(\.?_?\d+)+)/i,t);return e&&(a.version=e),a}},{test:[/Whale/i],describe:function(t){var a={name:"NAVER Whale Browser"},e=o.default.getFirstMatch(i,t)||o.default.getFirstMatch(/(?:whale)[\s/](\d+(?:\.\d+)+)/i,t);return e&&(a.version=e),a}},{test:[/MZBrowser/i],describe:function(t){var a={name:"MZ Browser"},e=o.default.getFirstMatch(/(?:MZBrowser)[\s/](\d+(?:\.\d+)+)/i,t)||o.default.getFirstMatch(i,t);return e&&(a.version=e),a}},{test:[/focus/i],describe:function(t){var a={name:"Focus"},e=o.default.getFirstMatch(/(?:focus)[\s/](\d+(?:\.\d+)+)/i,t)||o.default.getFirstMatch(i,t);return e&&(a.version=e),a}},{test:[/swing/i],describe:function(t){var a={name:"Swing"},e=o.default.getFirstMatch(/(?:swing)[\s/](\d+(?:\.\d+)+)/i,t)||o.default.getFirstMatch(i,t);return e&&(a.version=e),a}},{test:[/coast/i],describe:function(t){var a={name:"Opera Coast"},e=o.default.getFirstMatch(i,t)||o.default.getFirstMatch(/(?:coast)[\s/](\d+(\.?_?\d+)+)/i,t);return e&&(a.version=e),a}},{test:[/opt\/\d+(?:.?_?\d+)+/i],describe:function(t){var a={name:"Opera Touch"},e=o.default.getFirstMatch(/(?:opt)[\s/](\d+(\.?_?\d+)+)/i,t)||o.default.getFirstMatch(i,t);return e&&(a.version=e),a}},{test:[/yabrowser/i],describe:function(t){var a={name:"Yandex Browser"},e=o.default.getFirstMatch(/(?:yabrowser)[\s/](\d+(\.?_?\d+)+)/i,t)||o.default.getFirstMatch(i,t);return e&&(a.version=e),a}},{test:[/ucbrowser/i],describe:function(t){var a={name:"UC Browser"},e=o.default.getFirstMatch(i,t)||o.default.getFirstMatch(/(?:ucbrowser)[\s/](\d+(\.?_?\d+)+)/i,t);return e&&(a.version=e),a}},{test:[/Maxthon|mxios/i],describe:function(t){var a={name:"Maxthon"},e=o.default.getFirstMatch(i,t)||o.default.getFirstMatch(/(?:Maxthon|mxios)[\s/](\d+(\.?_?\d+)+)/i,t);return e&&(a.version=e),a}},{test:[/epiphany/i],describe:function(t){var a={name:"Epiphany"},e=o.default.getFirstMatch(i,t)||o.default.getFirstMatch(/(?:epiphany)[\s/](\d+(\.?_?\d+)+)/i,t);return e&&(a.version=e),a}},{test:[/puffin/i],describe:function(t){var a={name:"Puffin"},e=o.default.getFirstMatch(i,t)||o.default.getFirstMatch(/(?:puffin)[\s/](\d+(\.?_?\d+)+)/i,t);return e&&(a.version=e),a}},{test:[/sleipnir/i],describe:function(t){var a={name:"Sleipnir"},e=o.default.getFirstMatch(i,t)||o.default.getFirstMatch(/(?:sleipnir)[\s/](\d+(\.?_?\d+)+)/i,t);return e&&(a.version=e),a}},{test:[/k-meleon/i],describe:function(t){var a={name:"K-Meleon"},e=o.default.getFirstMatch(i,t)||o.default.getFirstMatch(/(?:k-meleon)[\s/](\d+(\.?_?\d+)+)/i,t);return e&&(a.version=e),a}},{test:[/micromessenger/i],describe:function(t){var a={name:"WeChat"},e=o.default.getFirstMatch(/(?:micromessenger)[\s/](\d+(\.?_?\d+)+)/i,t)||o.default.getFirstMatch(i,t);return e&&(a.version=e),a}},{test:[/qqbrowser/i],describe:function(t){var a={name:/qqbrowserlite/i.test(t)?"QQ Browser Lite":"QQ Browser"},e=o.default.getFirstMatch(/(?:qqbrowserlite|qqbrowser)[/](\d+(\.?_?\d+)+)/i,t)||o.default.getFirstMatch(i,t);return e&&(a.version=e),a}},{test:[/msie|trident/i],describe:function(t){var a={name:"Internet Explorer"},e=o.default.getFirstMatch(/(?:msie |rv:)(\d+(\.?_?\d+)+)/i,t);return e&&(a.version=e),a}},{test:[/\sedg\//i],describe:function(t){var a={name:"Microsoft Edge"},e=o.default.getFirstMatch(/\sedg\/(\d+(\.?_?\d+)+)/i,t);return e&&(a.version=e),a}},{test:[/edg([ea]|ios)/i],describe:function(t){var a={name:"Microsoft Edge"},e=o.default.getSecondMatch(/edg([ea]|ios)\/(\d+(\.?_?\d+)+)/i,t);return e&&(a.version=e),a}},{test:[/vivaldi/i],describe:function(t){var a={name:"Vivaldi"},e=o.default.getFirstMatch(/vivaldi\/(\d+(\.?_?\d+)+)/i,t);return e&&(a.version=e),a}},{test:[/seamonkey/i],describe:function(t){var a={name:"SeaMonkey"},e=o.default.getFirstMatch(/seamonkey\/(\d+(\.?_?\d+)+)/i,t);return e&&(a.version=e),a}},{test:[/sailfish/i],describe:function(t){var a={name:"Sailfish"},e=o.default.getFirstMatch(/sailfish\s?browser\/(\d+(\.\d+)?)/i,t);return e&&(a.version=e),a}},{test:[/silk/i],describe:function(t){var a={name:"Amazon Silk"},e=o.default.getFirstMatch(/silk\/(\d+(\.?_?\d+)+)/i,t);return e&&(a.version=e),a}},{test:[/phantom/i],describe:function(t){var a={name:"PhantomJS"},e=o.default.getFirstMatch(/phantomjs\/(\d+(\.?_?\d+)+)/i,t);return e&&(a.version=e),a}},{test:[/slimerjs/i],describe:function(t){var a={name:"SlimerJS"},e=o.default.getFirstMatch(/slimerjs\/(\d+(\.?_?\d+)+)/i,t);return e&&(a.version=e),a}},{test:[/blackberry|\bbb\d+/i,/rim\stablet/i],describe:function(t){var a={name:"BlackBerry"},e=o.default.getFirstMatch(i,t)||o.default.getFirstMatch(/blackberry[\d]+\/(\d+(\.?_?\d+)+)/i,t);return e&&(a.version=e),a}},{test:[/(web|hpw)[o0]s/i],describe:function(t){var a={name:"WebOS Browser"},e=o.default.getFirstMatch(i,t)||o.default.getFirstMatch(/w(?:eb)?[o0]sbrowser\/(\d+(\.?_?\d+)+)/i,t);return e&&(a.version=e),a}},{test:[/bada/i],describe:function(t){var a={name:"Bada"},e=o.default.getFirstMatch(/dolfin\/(\d+(\.?_?\d+)+)/i,t);return e&&(a.version=e),a}},{test:[/tizen/i],describe:function(t){var a={name:"Tizen"},e=o.default.getFirstMatch(/(?:tizen\s?)?browser\/(\d+(\.?_?\d+)+)/i,t)||o.default.getFirstMatch(i,t);return e&&(a.version=e),a}},{test:[/qupzilla/i],describe:function(t){var a={name:"QupZilla"},e=o.default.getFirstMatch(/(?:qupzilla)[\s/](\d+(\.?_?\d+)+)/i,t)||o.default.getFirstMatch(i,t);return e&&(a.version=e),a}},{test:[/firefox|iceweasel|fxios/i],describe:function(t){var a={name:"Firefox"},e=o.default.getFirstMatch(/(?:firefox|iceweasel|fxios)[\s/](\d+(\.?_?\d+)+)/i,t);return e&&(a.version=e),a}},{test:[/electron/i],describe:function(t){var a={name:"Electron"},e=o.default.getFirstMatch(/(?:electron)\/(\d+(\.?_?\d+)+)/i,t);return e&&(a.version=e),a}},{test:[/MiuiBrowser/i],describe:function(t){var a={name:"Miui"},e=o.default.getFirstMatch(/(?:MiuiBrowser)[\s/](\d+(\.?_?\d+)+)/i,t);return e&&(a.version=e),a}},{test:[/chromium/i],describe:function(t){var a={name:"Chromium"},e=o.default.getFirstMatch(/(?:chromium)[\s/](\d+(\.?_?\d+)+)/i,t)||o.default.getFirstMatch(i,t);return e&&(a.version=e),a}},{test:[/chrome|crios|crmo/i],describe:function(t){var a={name:"Chrome"},e=o.default.getFirstMatch(/(?:chrome|crios|crmo)\/(\d+(\.?_?\d+)+)/i,t);return e&&(a.version=e),a}},{test:[/GSA/i],describe:function(t){var a={name:"Google Search"},e=o.default.getFirstMatch(/(?:GSA)\/(\d+(\.?_?\d+)+)/i,t);return e&&(a.version=e),a}},{test:function(t){var a=!t.test(/like android/i),e=t.test(/android/i);return a&&e},describe:function(t){var a={name:"Android Browser"},e=o.default.getFirstMatch(i,t);return e&&(a.version=e),a}},{test:[/playstation 4/i],describe:function(t){var a={name:"PlayStation 4"},e=o.default.getFirstMatch(i,t);return e&&(a.version=e),a}},{test:[/safari|applewebkit/i],describe:function(t){var a={name:"Safari"},e=o.default.getFirstMatch(i,t);return e&&(a.version=e),a}},{test:[/.*/i],describe:function(t){var a=-1!==t.search("\\(")?/^(.*)\/(.*)[ \t]\((.*)/:/^(.*)\/(.*) /;return{name:o.default.getFirstMatch(a,t),version:o.default.getSecondMatch(a,t)}}}];a.default=n,t.exports=a.default},93:function(t,a,e){"use strict";a.__esModule=!0,a.default=void 0;var r,o=(r=e(17))&&r.__esModule?r:{default:r},i=e(18),n=[{test:[/Roku\/DVP/],describe:function(t){var a=o.default.getFirstMatch(/Roku\/DVP-(\d+\.\d+)/i,t);return{name:i.OS_MAP.Roku,version:a}}},{test:[/windows phone/i],describe:function(t){var a=o.default.getFirstMatch(/windows phone (?:os)?\s?(\d+(\.\d+)*)/i,t);return{name:i.OS_MAP.WindowsPhone,version:a}}},{test:[/windows /i],describe:function(t){var a=o.default.getFirstMatch(/Windows ((NT|XP)( \d\d?.\d)?)/i,t),e=o.default.getWindowsVersionName(a);return{name:i.OS_MAP.Windows,version:a,versionName:e}}},{test:[/Macintosh(.*?) FxiOS(.*?)\//],describe:function(t){var a={name:i.OS_MAP.iOS},e=o.default.getSecondMatch(/(Version\/)(\d[\d.]+)/,t);return e&&(a.version=e),a}},{test:[/macintosh/i],describe:function(t){var a=o.default.getFirstMatch(/mac os x (\d+(\.?_?\d+)+)/i,t).replace(/[_\s]/g,"."),e=o.default.getMacOSVersionName(a),r={name:i.OS_MAP.MacOS,version:a};return e&&(r.versionName=e),r}},{test:[/(ipod|iphone|ipad)/i],describe:function(t){var a=o.default.getFirstMatch(/os (\d+([_\s]\d+)*) like mac os x/i,t).replace(/[_\s]/g,".");return{name:i.OS_MAP.iOS,version:a}}},{test:function(t){var a=!t.test(/like android/i),e=t.test(/android/i);return a&&e},describe:function(t){var a=o.default.getFirstMatch(/android[\s/-](\d+(\.\d+)*)/i,t),e=o.default.getAndroidVersionName(a),r={name:i.OS_MAP.Android,version:a};return e&&(r.versionName=e),r}},{test:[/(web|hpw)[o0]s/i],describe:function(t){var a=o.default.getFirstMatch(/(?:web|hpw)[o0]s\/(\d+(\.\d+)*)/i,t),e={name:i.OS_MAP.WebOS};return a&&a.length&&(e.version=a),e}},{test:[/blackberry|\bbb\d+/i,/rim\stablet/i],describe:function(t){var a=o.default.getFirstMatch(/rim\stablet\sos\s(\d+(\.\d+)*)/i,t)||o.default.getFirstMatch(/blackberry\d+\/(\d+([_\s]\d+)*)/i,t)||o.default.getFirstMatch(/\bbb(\d+)/i,t);return{name:i.OS_MAP.BlackBerry,version:a}}},{test:[/bada/i],describe:function(t){var a=o.default.getFirstMatch(/bada\/(\d+(\.\d+)*)/i,t);return{name:i.OS_MAP.Bada,version:a}}},{test:[/tizen/i],describe:function(t){var a=o.default.getFirstMatch(/tizen[/\s](\d+(\.\d+)*)/i,t);return{name:i.OS_MAP.Tizen,version:a}}},{test:[/linux/i],describe:function(){return{name:i.OS_MAP.Linux}}},{test:[/CrOS/],describe:function(){return{name:i.OS_MAP.ChromeOS}}},{test:[/PlayStation 4/],describe:function(t){var a=o.default.getFirstMatch(/PlayStation 4[/\s](\d+(\.\d+)*)/i,t);return{name:i.OS_MAP.PlayStation4,version:a}}}];a.default=n,t.exports=a.default},94:function(t,a,e){"use strict";a.__esModule=!0,a.default=void 0;var r,o=(r=e(17))&&r.__esModule?r:{default:r},i=e(18),n=[{test:[/googlebot/i],describe:function(){return{type:"bot",vendor:"Google"}}},{test:[/huawei/i],describe:function(t){var a=o.default.getFirstMatch(/(can-l01)/i,t)&&"Nova",e={type:i.PLATFORMS_MAP.mobile,vendor:"Huawei"};return a&&(e.model=a),e}},{test:[/nexus\s*(?:7|8|9|10).*/i],describe:function(){return{type:i.PLATFORMS_MAP.tablet,vendor:"Nexus"}}},{test:[/ipad/i],describe:function(){return{type:i.PLATFORMS_MAP.tablet,vendor:"Apple",model:"iPad"}}},{test:[/Macintosh(.*?) FxiOS(.*?)\//],describe:function(){return{type:i.PLATFORMS_MAP.tablet,vendor:"Apple",model:"iPad"}}},{test:[/kftt build/i],describe:function(){return{type:i.PLATFORMS_MAP.tablet,vendor:"Amazon",model:"Kindle Fire HD 7"}}},{test:[/silk/i],describe:function(){return{type:i.PLATFORMS_MAP.tablet,vendor:"Amazon"}}},{test:[/tablet(?! pc)/i],describe:function(){return{type:i.PLATFORMS_MAP.tablet}}},{test:function(t){var a=t.test(/ipod|iphone/i),e=t.test(/like (ipod|iphone)/i);return a&&!e},describe:function(t){var a=o.default.getFirstMatch(/(ipod|iphone)/i,t);return{type:i.PLATFORMS_MAP.mobile,vendor:"Apple",model:a}}},{test:[/nexus\s*[0-6].*/i,/galaxy nexus/i],describe:function(){return{type:i.PLATFORMS_MAP.mobile,vendor:"Nexus"}}},{test:[/[^-]mobi/i],describe:function(){return{type:i.PLATFORMS_MAP.mobile}}},{test:function(t){return"blackberry"===t.getBrowserName(!0)},describe:function(){return{type:i.PLATFORMS_MAP.mobile,vendor:"BlackBerry"}}},{test:function(t){return"bada"===t.getBrowserName(!0)},describe:function(){return{type:i.PLATFORMS_MAP.mobile}}},{test:function(t){return"windows phone"===t.getBrowserName()},describe:function(){return{type:i.PLATFORMS_MAP.mobile,vendor:"Microsoft"}}},{test:function(t){var a=Number(String(t.getOSVersion()).split(".")[0]);return"android"===t.getOSName(!0)&&a>=3},describe:function(){return{type:i.PLATFORMS_MAP.tablet}}},{test:function(t){return"android"===t.getOSName(!0)},describe:function(){return{type:i.PLATFORMS_MAP.mobile}}},{test:function(t){return"macos"===t.getOSName(!0)},describe:function(){return{type:i.PLATFORMS_MAP.desktop,vendor:"Apple"}}},{test:function(t){return"windows"===t.getOSName(!0)},describe:function(){return{type:i.PLATFORMS_MAP.desktop}}},{test:function(t){return"linux"===t.getOSName(!0)},describe:function(){return{type:i.PLATFORMS_MAP.desktop}}},{test:function(t){return"playstation 4"===t.getOSName(!0)},describe:function(){return{type:i.PLATFORMS_MAP.tv}}},{test:function(t){return"roku"===t.getOSName(!0)},describe:function(){return{type:i.PLATFORMS_MAP.tv}}}];a.default=n,t.exports=a.default},95:function(t,a,e){"use strict";a.__esModule=!0,a.default=void 0;var r,o=(r=e(17))&&r.__esModule?r:{default:r},i=e(18),n=[{test:function(t){return"microsoft edge"===t.getBrowserName(!0)},describe:function(t){if(/\sedg\//i.test(t))return{name:i.ENGINE_MAP.Blink};var a=o.default.getFirstMatch(/edge\/(\d+(\.?_?\d+)+)/i,t);return{name:i.ENGINE_MAP.EdgeHTML,version:a}}},{test:[/trident/i],describe:function(t){var a={name:i.ENGINE_MAP.Trident},e=o.default.getFirstMatch(/trident\/(\d+(\.?_?\d+)+)/i,t);return e&&(a.version=e),a}},{test:function(t){return t.test(/presto/i)},describe:function(t){var a={name:i.ENGINE_MAP.Presto},e=o.default.getFirstMatch(/presto\/(\d+(\.?_?\d+)+)/i,t);return e&&(a.version=e),a}},{test:function(t){var a=t.test(/gecko/i),e=t.test(/like gecko/i);return a&&!e},describe:function(t){var a={name:i.ENGINE_MAP.Gecko},e=o.default.getFirstMatch(/gecko\/(\d+(\.?_?\d+)+)/i,t);return e&&(a.version=e),a}},{test:[/(apple)?webkit\/537\.36/i],describe:function(){return{name:i.ENGINE_MAP.Blink}}},{test:[/(apple)?webkit/i],describe:function(t){var a={name:i.ENGINE_MAP.WebKit},e=o.default.getFirstMatch(/webkit\/(\d+(\.?_?\d+)+)/i,t);return e&&(a.version=e),a}}];a.default=n,t.exports=a.default}})},4659:(t,a,e)=>{"use strict";e.d(a,{Z:()=>s});var r=e(4015),o=e.n(r),i=e(3645),n=e.n(i)()(o());n.push([t.id,'[data-aos][data-aos][data-aos-duration="50"],body[data-aos-duration="50"] [data-aos]{transition-duration:50ms}[data-aos][data-aos][data-aos-delay="50"],body[data-aos-delay="50"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="50"].aos-animate,body[data-aos-delay="50"] [data-aos].aos-animate{transition-delay:50ms}[data-aos][data-aos][data-aos-duration="100"],body[data-aos-duration="100"] [data-aos]{transition-duration:.1s}[data-aos][data-aos][data-aos-delay="100"],body[data-aos-delay="100"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="100"].aos-animate,body[data-aos-delay="100"] [data-aos].aos-animate{transition-delay:.1s}[data-aos][data-aos][data-aos-duration="150"],body[data-aos-duration="150"] [data-aos]{transition-duration:.15s}[data-aos][data-aos][data-aos-delay="150"],body[data-aos-delay="150"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="150"].aos-animate,body[data-aos-delay="150"] [data-aos].aos-animate{transition-delay:.15s}[data-aos][data-aos][data-aos-duration="200"],body[data-aos-duration="200"] [data-aos]{transition-duration:.2s}[data-aos][data-aos][data-aos-delay="200"],body[data-aos-delay="200"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="200"].aos-animate,body[data-aos-delay="200"] [data-aos].aos-animate{transition-delay:.2s}[data-aos][data-aos][data-aos-duration="250"],body[data-aos-duration="250"] [data-aos]{transition-duration:.25s}[data-aos][data-aos][data-aos-delay="250"],body[data-aos-delay="250"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="250"].aos-animate,body[data-aos-delay="250"] [data-aos].aos-animate{transition-delay:.25s}[data-aos][data-aos][data-aos-duration="300"],body[data-aos-duration="300"] [data-aos]{transition-duration:.3s}[data-aos][data-aos][data-aos-delay="300"],body[data-aos-delay="300"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="300"].aos-animate,body[data-aos-delay="300"] [data-aos].aos-animate{transition-delay:.3s}[data-aos][data-aos][data-aos-duration="350"],body[data-aos-duration="350"] [data-aos]{transition-duration:.35s}[data-aos][data-aos][data-aos-delay="350"],body[data-aos-delay="350"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="350"].aos-animate,body[data-aos-delay="350"] [data-aos].aos-animate{transition-delay:.35s}[data-aos][data-aos][data-aos-duration="400"],body[data-aos-duration="400"] [data-aos]{transition-duration:.4s}[data-aos][data-aos][data-aos-delay="400"],body[data-aos-delay="400"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="400"].aos-animate,body[data-aos-delay="400"] [data-aos].aos-animate{transition-delay:.4s}[data-aos][data-aos][data-aos-duration="450"],body[data-aos-duration="450"] [data-aos]{transition-duration:.45s}[data-aos][data-aos][data-aos-delay="450"],body[data-aos-delay="450"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="450"].aos-animate,body[data-aos-delay="450"] [data-aos].aos-animate{transition-delay:.45s}[data-aos][data-aos][data-aos-duration="500"],body[data-aos-duration="500"] [data-aos]{transition-duration:.5s}[data-aos][data-aos][data-aos-delay="500"],body[data-aos-delay="500"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="500"].aos-animate,body[data-aos-delay="500"] [data-aos].aos-animate{transition-delay:.5s}[data-aos][data-aos][data-aos-duration="550"],body[data-aos-duration="550"] [data-aos]{transition-duration:.55s}[data-aos][data-aos][data-aos-delay="550"],body[data-aos-delay="550"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="550"].aos-animate,body[data-aos-delay="550"] [data-aos].aos-animate{transition-delay:.55s}[data-aos][data-aos][data-aos-duration="600"],body[data-aos-duration="600"] [data-aos]{transition-duration:.6s}[data-aos][data-aos][data-aos-delay="600"],body[data-aos-delay="600"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="600"].aos-animate,body[data-aos-delay="600"] [data-aos].aos-animate{transition-delay:.6s}[data-aos][data-aos][data-aos-duration="650"],body[data-aos-duration="650"] [data-aos]{transition-duration:.65s}[data-aos][data-aos][data-aos-delay="650"],body[data-aos-delay="650"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="650"].aos-animate,body[data-aos-delay="650"] [data-aos].aos-animate{transition-delay:.65s}[data-aos][data-aos][data-aos-duration="700"],body[data-aos-duration="700"] [data-aos]{transition-duration:.7s}[data-aos][data-aos][data-aos-delay="700"],body[data-aos-delay="700"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="700"].aos-animate,body[data-aos-delay="700"] [data-aos].aos-animate{transition-delay:.7s}[data-aos][data-aos][data-aos-duration="750"],body[data-aos-duration="750"] [data-aos]{transition-duration:.75s}[data-aos][data-aos][data-aos-delay="750"],body[data-aos-delay="750"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="750"].aos-animate,body[data-aos-delay="750"] [data-aos].aos-animate{transition-delay:.75s}[data-aos][data-aos][data-aos-duration="800"],body[data-aos-duration="800"] [data-aos]{transition-duration:.8s}[data-aos][data-aos][data-aos-delay="800"],body[data-aos-delay="800"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="800"].aos-animate,body[data-aos-delay="800"] [data-aos].aos-animate{transition-delay:.8s}[data-aos][data-aos][data-aos-duration="850"],body[data-aos-duration="850"] [data-aos]{transition-duration:.85s}[data-aos][data-aos][data-aos-delay="850"],body[data-aos-delay="850"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="850"].aos-animate,body[data-aos-delay="850"] [data-aos].aos-animate{transition-delay:.85s}[data-aos][data-aos][data-aos-duration="900"],body[data-aos-duration="900"] [data-aos]{transition-duration:.9s}[data-aos][data-aos][data-aos-delay="900"],body[data-aos-delay="900"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="900"].aos-animate,body[data-aos-delay="900"] [data-aos].aos-animate{transition-delay:.9s}[data-aos][data-aos][data-aos-duration="950"],body[data-aos-duration="950"] [data-aos]{transition-duration:.95s}[data-aos][data-aos][data-aos-delay="950"],body[data-aos-delay="950"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="950"].aos-animate,body[data-aos-delay="950"] [data-aos].aos-animate{transition-delay:.95s}[data-aos][data-aos][data-aos-duration="1000"],body[data-aos-duration="1000"] [data-aos]{transition-duration:1s}[data-aos][data-aos][data-aos-delay="1000"],body[data-aos-delay="1000"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="1000"].aos-animate,body[data-aos-delay="1000"] [data-aos].aos-animate{transition-delay:1s}[data-aos][data-aos][data-aos-duration="1050"],body[data-aos-duration="1050"] [data-aos]{transition-duration:1.05s}[data-aos][data-aos][data-aos-delay="1050"],body[data-aos-delay="1050"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="1050"].aos-animate,body[data-aos-delay="1050"] [data-aos].aos-animate{transition-delay:1.05s}[data-aos][data-aos][data-aos-duration="1100"],body[data-aos-duration="1100"] [data-aos]{transition-duration:1.1s}[data-aos][data-aos][data-aos-delay="1100"],body[data-aos-delay="1100"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="1100"].aos-animate,body[data-aos-delay="1100"] [data-aos].aos-animate{transition-delay:1.1s}[data-aos][data-aos][data-aos-duration="1150"],body[data-aos-duration="1150"] [data-aos]{transition-duration:1.15s}[data-aos][data-aos][data-aos-delay="1150"],body[data-aos-delay="1150"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="1150"].aos-animate,body[data-aos-delay="1150"] [data-aos].aos-animate{transition-delay:1.15s}[data-aos][data-aos][data-aos-duration="1200"],body[data-aos-duration="1200"] [data-aos]{transition-duration:1.2s}[data-aos][data-aos][data-aos-delay="1200"],body[data-aos-delay="1200"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="1200"].aos-animate,body[data-aos-delay="1200"] [data-aos].aos-animate{transition-delay:1.2s}[data-aos][data-aos][data-aos-duration="1250"],body[data-aos-duration="1250"] [data-aos]{transition-duration:1.25s}[data-aos][data-aos][data-aos-delay="1250"],body[data-aos-delay="1250"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="1250"].aos-animate,body[data-aos-delay="1250"] [data-aos].aos-animate{transition-delay:1.25s}[data-aos][data-aos][data-aos-duration="1300"],body[data-aos-duration="1300"] [data-aos]{transition-duration:1.3s}[data-aos][data-aos][data-aos-delay="1300"],body[data-aos-delay="1300"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="1300"].aos-animate,body[data-aos-delay="1300"] [data-aos].aos-animate{transition-delay:1.3s}[data-aos][data-aos][data-aos-duration="1350"],body[data-aos-duration="1350"] [data-aos]{transition-duration:1.35s}[data-aos][data-aos][data-aos-delay="1350"],body[data-aos-delay="1350"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="1350"].aos-animate,body[data-aos-delay="1350"] [data-aos].aos-animate{transition-delay:1.35s}[data-aos][data-aos][data-aos-duration="1400"],body[data-aos-duration="1400"] [data-aos]{transition-duration:1.4s}[data-aos][data-aos][data-aos-delay="1400"],body[data-aos-delay="1400"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="1400"].aos-animate,body[data-aos-delay="1400"] [data-aos].aos-animate{transition-delay:1.4s}[data-aos][data-aos][data-aos-duration="1450"],body[data-aos-duration="1450"] [data-aos]{transition-duration:1.45s}[data-aos][data-aos][data-aos-delay="1450"],body[data-aos-delay="1450"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="1450"].aos-animate,body[data-aos-delay="1450"] [data-aos].aos-animate{transition-delay:1.45s}[data-aos][data-aos][data-aos-duration="1500"],body[data-aos-duration="1500"] [data-aos]{transition-duration:1.5s}[data-aos][data-aos][data-aos-delay="1500"],body[data-aos-delay="1500"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="1500"].aos-animate,body[data-aos-delay="1500"] [data-aos].aos-animate{transition-delay:1.5s}[data-aos][data-aos][data-aos-duration="1550"],body[data-aos-duration="1550"] [data-aos]{transition-duration:1.55s}[data-aos][data-aos][data-aos-delay="1550"],body[data-aos-delay="1550"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="1550"].aos-animate,body[data-aos-delay="1550"] [data-aos].aos-animate{transition-delay:1.55s}[data-aos][data-aos][data-aos-duration="1600"],body[data-aos-duration="1600"] [data-aos]{transition-duration:1.6s}[data-aos][data-aos][data-aos-delay="1600"],body[data-aos-delay="1600"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="1600"].aos-animate,body[data-aos-delay="1600"] [data-aos].aos-animate{transition-delay:1.6s}[data-aos][data-aos][data-aos-duration="1650"],body[data-aos-duration="1650"] [data-aos]{transition-duration:1.65s}[data-aos][data-aos][data-aos-delay="1650"],body[data-aos-delay="1650"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="1650"].aos-animate,body[data-aos-delay="1650"] [data-aos].aos-animate{transition-delay:1.65s}[data-aos][data-aos][data-aos-duration="1700"],body[data-aos-duration="1700"] [data-aos]{transition-duration:1.7s}[data-aos][data-aos][data-aos-delay="1700"],body[data-aos-delay="1700"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="1700"].aos-animate,body[data-aos-delay="1700"] [data-aos].aos-animate{transition-delay:1.7s}[data-aos][data-aos][data-aos-duration="1750"],body[data-aos-duration="1750"] [data-aos]{transition-duration:1.75s}[data-aos][data-aos][data-aos-delay="1750"],body[data-aos-delay="1750"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="1750"].aos-animate,body[data-aos-delay="1750"] [data-aos].aos-animate{transition-delay:1.75s}[data-aos][data-aos][data-aos-duration="1800"],body[data-aos-duration="1800"] [data-aos]{transition-duration:1.8s}[data-aos][data-aos][data-aos-delay="1800"],body[data-aos-delay="1800"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="1800"].aos-animate,body[data-aos-delay="1800"] [data-aos].aos-animate{transition-delay:1.8s}[data-aos][data-aos][data-aos-duration="1850"],body[data-aos-duration="1850"] [data-aos]{transition-duration:1.85s}[data-aos][data-aos][data-aos-delay="1850"],body[data-aos-delay="1850"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="1850"].aos-animate,body[data-aos-delay="1850"] [data-aos].aos-animate{transition-delay:1.85s}[data-aos][data-aos][data-aos-duration="1900"],body[data-aos-duration="1900"] [data-aos]{transition-duration:1.9s}[data-aos][data-aos][data-aos-delay="1900"],body[data-aos-delay="1900"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="1900"].aos-animate,body[data-aos-delay="1900"] [data-aos].aos-animate{transition-delay:1.9s}[data-aos][data-aos][data-aos-duration="1950"],body[data-aos-duration="1950"] [data-aos]{transition-duration:1.95s}[data-aos][data-aos][data-aos-delay="1950"],body[data-aos-delay="1950"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="1950"].aos-animate,body[data-aos-delay="1950"] [data-aos].aos-animate{transition-delay:1.95s}[data-aos][data-aos][data-aos-duration="2000"],body[data-aos-duration="2000"] [data-aos]{transition-duration:2s}[data-aos][data-aos][data-aos-delay="2000"],body[data-aos-delay="2000"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="2000"].aos-animate,body[data-aos-delay="2000"] [data-aos].aos-animate{transition-delay:2s}[data-aos][data-aos][data-aos-duration="2050"],body[data-aos-duration="2050"] [data-aos]{transition-duration:2.05s}[data-aos][data-aos][data-aos-delay="2050"],body[data-aos-delay="2050"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="2050"].aos-animate,body[data-aos-delay="2050"] [data-aos].aos-animate{transition-delay:2.05s}[data-aos][data-aos][data-aos-duration="2100"],body[data-aos-duration="2100"] [data-aos]{transition-duration:2.1s}[data-aos][data-aos][data-aos-delay="2100"],body[data-aos-delay="2100"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="2100"].aos-animate,body[data-aos-delay="2100"] [data-aos].aos-animate{transition-delay:2.1s}[data-aos][data-aos][data-aos-duration="2150"],body[data-aos-duration="2150"] [data-aos]{transition-duration:2.15s}[data-aos][data-aos][data-aos-delay="2150"],body[data-aos-delay="2150"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="2150"].aos-animate,body[data-aos-delay="2150"] [data-aos].aos-animate{transition-delay:2.15s}[data-aos][data-aos][data-aos-duration="2200"],body[data-aos-duration="2200"] [data-aos]{transition-duration:2.2s}[data-aos][data-aos][data-aos-delay="2200"],body[data-aos-delay="2200"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="2200"].aos-animate,body[data-aos-delay="2200"] [data-aos].aos-animate{transition-delay:2.2s}[data-aos][data-aos][data-aos-duration="2250"],body[data-aos-duration="2250"] [data-aos]{transition-duration:2.25s}[data-aos][data-aos][data-aos-delay="2250"],body[data-aos-delay="2250"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="2250"].aos-animate,body[data-aos-delay="2250"] [data-aos].aos-animate{transition-delay:2.25s}[data-aos][data-aos][data-aos-duration="2300"],body[data-aos-duration="2300"] [data-aos]{transition-duration:2.3s}[data-aos][data-aos][data-aos-delay="2300"],body[data-aos-delay="2300"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="2300"].aos-animate,body[data-aos-delay="2300"] [data-aos].aos-animate{transition-delay:2.3s}[data-aos][data-aos][data-aos-duration="2350"],body[data-aos-duration="2350"] [data-aos]{transition-duration:2.35s}[data-aos][data-aos][data-aos-delay="2350"],body[data-aos-delay="2350"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="2350"].aos-animate,body[data-aos-delay="2350"] [data-aos].aos-animate{transition-delay:2.35s}[data-aos][data-aos][data-aos-duration="2400"],body[data-aos-duration="2400"] [data-aos]{transition-duration:2.4s}[data-aos][data-aos][data-aos-delay="2400"],body[data-aos-delay="2400"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="2400"].aos-animate,body[data-aos-delay="2400"] [data-aos].aos-animate{transition-delay:2.4s}[data-aos][data-aos][data-aos-duration="2450"],body[data-aos-duration="2450"] [data-aos]{transition-duration:2.45s}[data-aos][data-aos][data-aos-delay="2450"],body[data-aos-delay="2450"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="2450"].aos-animate,body[data-aos-delay="2450"] [data-aos].aos-animate{transition-delay:2.45s}[data-aos][data-aos][data-aos-duration="2500"],body[data-aos-duration="2500"] [data-aos]{transition-duration:2.5s}[data-aos][data-aos][data-aos-delay="2500"],body[data-aos-delay="2500"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="2500"].aos-animate,body[data-aos-delay="2500"] [data-aos].aos-animate{transition-delay:2.5s}[data-aos][data-aos][data-aos-duration="2550"],body[data-aos-duration="2550"] [data-aos]{transition-duration:2.55s}[data-aos][data-aos][data-aos-delay="2550"],body[data-aos-delay="2550"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="2550"].aos-animate,body[data-aos-delay="2550"] [data-aos].aos-animate{transition-delay:2.55s}[data-aos][data-aos][data-aos-duration="2600"],body[data-aos-duration="2600"] [data-aos]{transition-duration:2.6s}[data-aos][data-aos][data-aos-delay="2600"],body[data-aos-delay="2600"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="2600"].aos-animate,body[data-aos-delay="2600"] [data-aos].aos-animate{transition-delay:2.6s}[data-aos][data-aos][data-aos-duration="2650"],body[data-aos-duration="2650"] [data-aos]{transition-duration:2.65s}[data-aos][data-aos][data-aos-delay="2650"],body[data-aos-delay="2650"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="2650"].aos-animate,body[data-aos-delay="2650"] [data-aos].aos-animate{transition-delay:2.65s}[data-aos][data-aos][data-aos-duration="2700"],body[data-aos-duration="2700"] [data-aos]{transition-duration:2.7s}[data-aos][data-aos][data-aos-delay="2700"],body[data-aos-delay="2700"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="2700"].aos-animate,body[data-aos-delay="2700"] [data-aos].aos-animate{transition-delay:2.7s}[data-aos][data-aos][data-aos-duration="2750"],body[data-aos-duration="2750"] [data-aos]{transition-duration:2.75s}[data-aos][data-aos][data-aos-delay="2750"],body[data-aos-delay="2750"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="2750"].aos-animate,body[data-aos-delay="2750"] [data-aos].aos-animate{transition-delay:2.75s}[data-aos][data-aos][data-aos-duration="2800"],body[data-aos-duration="2800"] [data-aos]{transition-duration:2.8s}[data-aos][data-aos][data-aos-delay="2800"],body[data-aos-delay="2800"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="2800"].aos-animate,body[data-aos-delay="2800"] [data-aos].aos-animate{transition-delay:2.8s}[data-aos][data-aos][data-aos-duration="2850"],body[data-aos-duration="2850"] [data-aos]{transition-duration:2.85s}[data-aos][data-aos][data-aos-delay="2850"],body[data-aos-delay="2850"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="2850"].aos-animate,body[data-aos-delay="2850"] [data-aos].aos-animate{transition-delay:2.85s}[data-aos][data-aos][data-aos-duration="2900"],body[data-aos-duration="2900"] [data-aos]{transition-duration:2.9s}[data-aos][data-aos][data-aos-delay="2900"],body[data-aos-delay="2900"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="2900"].aos-animate,body[data-aos-delay="2900"] [data-aos].aos-animate{transition-delay:2.9s}[data-aos][data-aos][data-aos-duration="2950"],body[data-aos-duration="2950"] [data-aos]{transition-duration:2.95s}[data-aos][data-aos][data-aos-delay="2950"],body[data-aos-delay="2950"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="2950"].aos-animate,body[data-aos-delay="2950"] [data-aos].aos-animate{transition-delay:2.95s}[data-aos][data-aos][data-aos-duration="3000"],body[data-aos-duration="3000"] [data-aos]{transition-duration:3s}[data-aos][data-aos][data-aos-delay="3000"],body[data-aos-delay="3000"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="3000"].aos-animate,body[data-aos-delay="3000"] [data-aos].aos-animate{transition-delay:3s}[data-aos][data-aos][data-aos-easing=linear],body[data-aos-easing=linear] [data-aos]{transition-timing-function:cubic-bezier(.25,.25,.75,.75)}[data-aos][data-aos][data-aos-easing=ease],body[data-aos-easing=ease] [data-aos]{transition-timing-function:ease}[data-aos][data-aos][data-aos-easing=ease-in],body[data-aos-easing=ease-in] [data-aos]{transition-timing-function:ease-in}[data-aos][data-aos][data-aos-easing=ease-out],body[data-aos-easing=ease-out] [data-aos]{transition-timing-function:ease-out}[data-aos][data-aos][data-aos-easing=ease-in-out],body[data-aos-easing=ease-in-out] [data-aos]{transition-timing-function:ease-in-out}[data-aos][data-aos][data-aos-easing=ease-in-back],body[data-aos-easing=ease-in-back] [data-aos]{transition-timing-function:cubic-bezier(.6,-.28,.735,.045)}[data-aos][data-aos][data-aos-easing=ease-out-back],body[data-aos-easing=ease-out-back] [data-aos]{transition-timing-function:cubic-bezier(.175,.885,.32,1.275)}[data-aos][data-aos][data-aos-easing=ease-in-out-back],body[data-aos-easing=ease-in-out-back] [data-aos]{transition-timing-function:cubic-bezier(.68,-.55,.265,1.55)}[data-aos][data-aos][data-aos-easing=ease-in-sine],body[data-aos-easing=ease-in-sine] [data-aos]{transition-timing-function:cubic-bezier(.47,0,.745,.715)}[data-aos][data-aos][data-aos-easing=ease-out-sine],body[data-aos-easing=ease-out-sine] [data-aos]{transition-timing-function:cubic-bezier(.39,.575,.565,1)}[data-aos][data-aos][data-aos-easing=ease-in-out-sine],body[data-aos-easing=ease-in-out-sine] [data-aos]{transition-timing-function:cubic-bezier(.445,.05,.55,.95)}[data-aos][data-aos][data-aos-easing=ease-in-quad],body[data-aos-easing=ease-in-quad] [data-aos]{transition-timing-function:cubic-bezier(.55,.085,.68,.53)}[data-aos][data-aos][data-aos-easing=ease-out-quad],body[data-aos-easing=ease-out-quad] [data-aos]{transition-timing-function:cubic-bezier(.25,.46,.45,.94)}[data-aos][data-aos][data-aos-easing=ease-in-out-quad],body[data-aos-easing=ease-in-out-quad] [data-aos]{transition-timing-function:cubic-bezier(.455,.03,.515,.955)}[data-aos][data-aos][data-aos-easing=ease-in-cubic],body[data-aos-easing=ease-in-cubic] [data-aos]{transition-timing-function:cubic-bezier(.55,.085,.68,.53)}[data-aos][data-aos][data-aos-easing=ease-out-cubic],body[data-aos-easing=ease-out-cubic] [data-aos]{transition-timing-function:cubic-bezier(.25,.46,.45,.94)}[data-aos][data-aos][data-aos-easing=ease-in-out-cubic],body[data-aos-easing=ease-in-out-cubic] [data-aos]{transition-timing-function:cubic-bezier(.455,.03,.515,.955)}[data-aos][data-aos][data-aos-easing=ease-in-quart],body[data-aos-easing=ease-in-quart] [data-aos]{transition-timing-function:cubic-bezier(.55,.085,.68,.53)}[data-aos][data-aos][data-aos-easing=ease-out-quart],body[data-aos-easing=ease-out-quart] [data-aos]{transition-timing-function:cubic-bezier(.25,.46,.45,.94)}[data-aos][data-aos][data-aos-easing=ease-in-out-quart],body[data-aos-easing=ease-in-out-quart] [data-aos]{transition-timing-function:cubic-bezier(.455,.03,.515,.955)}[data-aos^=fade][data-aos^=fade]{opacity:0;transition-property:opacity,transform}[data-aos^=fade][data-aos^=fade].aos-animate{opacity:1;transform:translateZ(0)}[data-aos=fade-up]{transform:translate3d(0,100px,0)}[data-aos=fade-down]{transform:translate3d(0,-100px,0)}[data-aos=fade-right]{transform:translate3d(-100px,0,0)}[data-aos=fade-left]{transform:translate3d(100px,0,0)}[data-aos=fade-up-right]{transform:translate3d(-100px,100px,0)}[data-aos=fade-up-left]{transform:translate3d(100px,100px,0)}[data-aos=fade-down-right]{transform:translate3d(-100px,-100px,0)}[data-aos=fade-down-left]{transform:translate3d(100px,-100px,0)}[data-aos^=zoom][data-aos^=zoom]{opacity:0;transition-property:opacity,transform}[data-aos^=zoom][data-aos^=zoom].aos-animate{opacity:1;transform:translateZ(0) scale(1)}[data-aos=zoom-in]{transform:scale(.6)}[data-aos=zoom-in-up]{transform:translate3d(0,100px,0) scale(.6)}[data-aos=zoom-in-down]{transform:translate3d(0,-100px,0) scale(.6)}[data-aos=zoom-in-right]{transform:translate3d(-100px,0,0) scale(.6)}[data-aos=zoom-in-left]{transform:translate3d(100px,0,0) scale(.6)}[data-aos=zoom-out]{transform:scale(1.2)}[data-aos=zoom-out-up]{transform:translate3d(0,100px,0) scale(1.2)}[data-aos=zoom-out-down]{transform:translate3d(0,-100px,0) scale(1.2)}[data-aos=zoom-out-right]{transform:translate3d(-100px,0,0) scale(1.2)}[data-aos=zoom-out-left]{transform:translate3d(100px,0,0) scale(1.2)}[data-aos^=slide][data-aos^=slide]{transition-property:transform}[data-aos^=slide][data-aos^=slide].aos-animate{transform:translateZ(0)}[data-aos=slide-up]{transform:translate3d(0,100%,0)}[data-aos=slide-down]{transform:translate3d(0,-100%,0)}[data-aos=slide-right]{transform:translate3d(-100%,0,0)}[data-aos=slide-left]{transform:translate3d(100%,0,0)}[data-aos^=flip][data-aos^=flip]{backface-visibility:hidden;transition-property:transform}[data-aos=flip-left]{transform:perspective(2500px) rotateY(-100deg)}[data-aos=flip-left].aos-animate{transform:perspective(2500px) rotateY(0)}[data-aos=flip-right]{transform:perspective(2500px) rotateY(100deg)}[data-aos=flip-right].aos-animate{transform:perspective(2500px) rotateY(0)}[data-aos=flip-up]{transform:perspective(2500px) rotateX(-100deg)}[data-aos=flip-up].aos-animate{transform:perspective(2500px) rotateX(0)}[data-aos=flip-down]{transform:perspective(2500px) rotateX(100deg)}[data-aos=flip-down].aos-animate{transform:perspective(2500px) rotateX(0)}',"",{version:3,sources:["webpack://./node_modules/aos/dist/aos.css"],names:[],mappings:"AAAA,qFAAqF,wBAAwB,CAAC,+EAA+E,kBAAkB,CAAC,uGAAuG,qBAAqB,CAAC,uFAAuF,uBAAuB,CAAC,iFAAiF,kBAAkB,CAAC,yGAAyG,oBAAoB,CAAC,uFAAuF,wBAAwB,CAAC,iFAAiF,kBAAkB,CAAC,yGAAyG,qBAAqB,CAAC,uFAAuF,uBAAuB,CAAC,iFAAiF,kBAAkB,CAAC,yGAAyG,oBAAoB,CAAC,uFAAuF,wBAAwB,CAAC,iFAAiF,kBAAkB,CAAC,yGAAyG,qBAAqB,CAAC,uFAAuF,uBAAuB,CAAC,iFAAiF,kBAAkB,CAAC,yGAAyG,oBAAoB,CAAC,uFAAuF,wBAAwB,CAAC,iFAAiF,kBAAkB,CAAC,yGAAyG,qBAAqB,CAAC,uFAAuF,uBAAuB,CAAC,iFAAiF,kBAAkB,CAAC,yGAAyG,oBAAoB,CAAC,uFAAuF,wBAAwB,CAAC,iFAAiF,kBAAkB,CAAC,yGAAyG,qBAAqB,CAAC,uFAAuF,uBAAuB,CAAC,iFAAiF,kBAAkB,CAAC,yGAAyG,oBAAoB,CAAC,uFAAuF,wBAAwB,CAAC,iFAAiF,kBAAkB,CAAC,yGAAyG,qBAAqB,CAAC,uFAAuF,uBAAuB,CAAC,iFAAiF,kBAAkB,CAAC,yGAAyG,oBAAoB,CAAC,uFAAuF,wBAAwB,CAAC,iFAAiF,kBAAkB,CAAC,yGAAyG,qBAAqB,CAAC,uFAAuF,uBAAuB,CAAC,iFAAiF,kBAAkB,CAAC,yGAAyG,oBAAoB,CAAC,uFAAuF,wBAAwB,CAAC,iFAAiF,kBAAkB,CAAC,yGAAyG,qBAAqB,CAAC,uFAAuF,uBAAuB,CAAC,iFAAiF,kBAAkB,CAAC,yGAAyG,oBAAoB,CAAC,uFAAuF,wBAAwB,CAAC,iFAAiF,kBAAkB,CAAC,yGAAyG,qBAAqB,CAAC,uFAAuF,uBAAuB,CAAC,iFAAiF,kBAAkB,CAAC,yGAAyG,oBAAoB,CAAC,uFAAuF,wBAAwB,CAAC,iFAAiF,kBAAkB,CAAC,yGAAyG,qBAAqB,CAAC,yFAAyF,sBAAsB,CAAC,mFAAmF,kBAAkB,CAAC,2GAA2G,mBAAmB,CAAC,yFAAyF,yBAAyB,CAAC,mFAAmF,kBAAkB,CAAC,2GAA2G,sBAAsB,CAAC,yFAAyF,wBAAwB,CAAC,mFAAmF,kBAAkB,CAAC,2GAA2G,qBAAqB,CAAC,yFAAyF,yBAAyB,CAAC,mFAAmF,kBAAkB,CAAC,2GAA2G,sBAAsB,CAAC,yFAAyF,wBAAwB,CAAC,mFAAmF,kBAAkB,CAAC,2GAA2G,qBAAqB,CAAC,yFAAyF,yBAAyB,CAAC,mFAAmF,kBAAkB,CAAC,2GAA2G,sBAAsB,CAAC,yFAAyF,wBAAwB,CAAC,mFAAmF,kBAAkB,CAAC,2GAA2G,qBAAqB,CAAC,yFAAyF,yBAAyB,CAAC,mFAAmF,kBAAkB,CAAC,2GAA2G,sBAAsB,CAAC,yFAAyF,wBAAwB,CAAC,mFAAmF,kBAAkB,CAAC,2GAA2G,qBAAqB,CAAC,yFAAyF,yBAAyB,CAAC,mFAAmF,kBAAkB,CAAC,2GAA2G,sBAAsB,CAAC,yFAAyF,wBAAwB,CAAC,mFAAmF,kBAAkB,CAAC,2GAA2G,qBAAqB,CAAC,yFAAyF,yBAAyB,CAAC,mFAAmF,kBAAkB,CAAC,2GAA2G,sBAAsB,CAAC,yFAAyF,wBAAwB,CAAC,mFAAmF,kBAAkB,CAAC,2GAA2G,qBAAqB,CAAC,yFAAyF,yBAAyB,CAAC,mFAAmF,kBAAkB,CAAC,2GAA2G,sBAAsB,CAAC,yFAAyF,wBAAwB,CAAC,mFAAmF,kBAAkB,CAAC,2GAA2G,qBAAqB,CAAC,yFAAyF,yBAAyB,CAAC,mFAAmF,kBAAkB,CAAC,2GAA2G,sBAAsB,CAAC,yFAAyF,wBAAwB,CAAC,mFAAmF,kBAAkB,CAAC,2GAA2G,qBAAqB,CAAC,yFAAyF,yBAAyB,CAAC,mFAAmF,kBAAkB,CAAC,2GAA2G,sBAAsB,CAAC,yFAAyF,wBAAwB,CAAC,mFAAmF,kBAAkB,CAAC,2GAA2G,qBAAqB,CAAC,yFAAyF,yBAAyB,CAAC,mFAAmF,kBAAkB,CAAC,2GAA2G,sBAAsB,CAAC,yFAAyF,sBAAsB,CAAC,mFAAmF,kBAAkB,CAAC,2GAA2G,mBAAmB,CAAC,yFAAyF,yBAAyB,CAAC,mFAAmF,kBAAkB,CAAC,2GAA2G,sBAAsB,CAAC,yFAAyF,wBAAwB,CAAC,mFAAmF,kBAAkB,CAAC,2GAA2G,qBAAqB,CAAC,yFAAyF,yBAAyB,CAAC,mFAAmF,kBAAkB,CAAC,2GAA2G,sBAAsB,CAAC,yFAAyF,wBAAwB,CAAC,mFAAmF,kBAAkB,CAAC,2GAA2G,qBAAqB,CAAC,yFAAyF,yBAAyB,CAAC,mFAAmF,kBAAkB,CAAC,2GAA2G,sBAAsB,CAAC,yFAAyF,wBAAwB,CAAC,mFAAmF,kBAAkB,CAAC,2GAA2G,qBAAqB,CAAC,yFAAyF,yBAAyB,CAAC,mFAAmF,kBAAkB,CAAC,2GAA2G,sBAAsB,CAAC,yFAAyF,wBAAwB,CAAC,mFAAmF,kBAAkB,CAAC,2GAA2G,qBAAqB,CAAC,yFAAyF,yBAAyB,CAAC,mFAAmF,kBAAkB,CAAC,2GAA2G,sBAAsB,CAAC,yFAAyF,wBAAwB,CAAC,mFAAmF,kBAAkB,CAAC,2GAA2G,qBAAqB,CAAC,yFAAyF,yBAAyB,CAAC,mFAAmF,kBAAkB,CAAC,2GAA2G,sBAAsB,CAAC,yFAAyF,wBAAwB,CAAC,mFAAmF,kBAAkB,CAAC,2GAA2G,qBAAqB,CAAC,yFAAyF,yBAAyB,CAAC,mFAAmF,kBAAkB,CAAC,2GAA2G,sBAAsB,CAAC,yFAAyF,wBAAwB,CAAC,mFAAmF,kBAAkB,CAAC,2GAA2G,qBAAqB,CAAC,yFAAyF,yBAAyB,CAAC,mFAAmF,kBAAkB,CAAC,2GAA2G,sBAAsB,CAAC,yFAAyF,wBAAwB,CAAC,mFAAmF,kBAAkB,CAAC,2GAA2G,qBAAqB,CAAC,yFAAyF,yBAAyB,CAAC,mFAAmF,kBAAkB,CAAC,2GAA2G,sBAAsB,CAAC,yFAAyF,wBAAwB,CAAC,mFAAmF,kBAAkB,CAAC,2GAA2G,qBAAqB,CAAC,yFAAyF,yBAAyB,CAAC,mFAAmF,kBAAkB,CAAC,2GAA2G,sBAAsB,CAAC,yFAAyF,sBAAsB,CAAC,mFAAmF,kBAAkB,CAAC,2GAA2G,mBAAmB,CAAC,qFAAqF,wDAAwD,CAAC,iFAAiF,+BAA+B,CAAC,uFAAuF,kCAAkC,CAAC,yFAAyF,mCAAmC,CAAC,+FAA+F,sCAAsC,CAAC,iGAAiG,0DAA0D,CAAC,mGAAmG,4DAA4D,CAAC,yGAAyG,2DAA2D,CAAC,iGAAiG,wDAAwD,CAAC,mGAAmG,wDAAwD,CAAC,yGAAyG,yDAAyD,CAAC,iGAAiG,yDAAyD,CAAC,mGAAmG,wDAAwD,CAAC,yGAAyG,2DAA2D,CAAC,mGAAmG,yDAAyD,CAAC,qGAAqG,wDAAwD,CAAC,2GAA2G,2DAA2D,CAAC,mGAAmG,yDAAyD,CAAC,qGAAqG,wDAAwD,CAAC,2GAA2G,2DAA2D,CAAC,iCAAiC,SAAS,CAAC,qCAAqC,CAAC,6CAA6C,SAAS,CAAC,uBAAuB,CAAC,mBAAmB,gCAAgC,CAAC,qBAAqB,iCAAiC,CAAC,sBAAsB,iCAAiC,CAAC,qBAAqB,gCAAgC,CAAC,yBAAyB,qCAAqC,CAAC,wBAAwB,oCAAoC,CAAC,2BAA2B,sCAAsC,CAAC,0BAA0B,qCAAqC,CAAC,iCAAiC,SAAS,CAAC,qCAAqC,CAAC,6CAA6C,SAAS,CAAC,gCAAgC,CAAC,mBAAmB,mBAAmB,CAAC,sBAAsB,0CAA0C,CAAC,wBAAwB,2CAA2C,CAAC,yBAAyB,2CAA2C,CAAC,wBAAwB,0CAA0C,CAAC,oBAAoB,oBAAoB,CAAC,uBAAuB,2CAA2C,CAAC,yBAAyB,4CAA4C,CAAC,0BAA0B,4CAA4C,CAAC,yBAAyB,2CAA2C,CAAC,mCAAmC,6BAA6B,CAAC,+CAA+C,uBAAuB,CAAC,oBAAoB,+BAA+B,CAAC,sBAAsB,gCAAgC,CAAC,uBAAuB,gCAAgC,CAAC,sBAAsB,+BAA+B,CAAC,iCAAiC,0BAA0B,CAAC,6BAA6B,CAAC,qBAAqB,8CAA8C,CAAC,iCAAiC,wCAAwC,CAAC,sBAAsB,6CAA6C,CAAC,kCAAkC,wCAAwC,CAAC,mBAAmB,8CAA8C,CAAC,+BAA+B,wCAAwC,CAAC,qBAAqB,6CAA6C,CAAC,iCAAiC,wCAAwC",sourcesContent:['[data-aos][data-aos][data-aos-duration="50"],body[data-aos-duration="50"] [data-aos]{transition-duration:50ms}[data-aos][data-aos][data-aos-delay="50"],body[data-aos-delay="50"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="50"].aos-animate,body[data-aos-delay="50"] [data-aos].aos-animate{transition-delay:50ms}[data-aos][data-aos][data-aos-duration="100"],body[data-aos-duration="100"] [data-aos]{transition-duration:.1s}[data-aos][data-aos][data-aos-delay="100"],body[data-aos-delay="100"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="100"].aos-animate,body[data-aos-delay="100"] [data-aos].aos-animate{transition-delay:.1s}[data-aos][data-aos][data-aos-duration="150"],body[data-aos-duration="150"] [data-aos]{transition-duration:.15s}[data-aos][data-aos][data-aos-delay="150"],body[data-aos-delay="150"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="150"].aos-animate,body[data-aos-delay="150"] [data-aos].aos-animate{transition-delay:.15s}[data-aos][data-aos][data-aos-duration="200"],body[data-aos-duration="200"] [data-aos]{transition-duration:.2s}[data-aos][data-aos][data-aos-delay="200"],body[data-aos-delay="200"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="200"].aos-animate,body[data-aos-delay="200"] [data-aos].aos-animate{transition-delay:.2s}[data-aos][data-aos][data-aos-duration="250"],body[data-aos-duration="250"] [data-aos]{transition-duration:.25s}[data-aos][data-aos][data-aos-delay="250"],body[data-aos-delay="250"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="250"].aos-animate,body[data-aos-delay="250"] [data-aos].aos-animate{transition-delay:.25s}[data-aos][data-aos][data-aos-duration="300"],body[data-aos-duration="300"] [data-aos]{transition-duration:.3s}[data-aos][data-aos][data-aos-delay="300"],body[data-aos-delay="300"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="300"].aos-animate,body[data-aos-delay="300"] [data-aos].aos-animate{transition-delay:.3s}[data-aos][data-aos][data-aos-duration="350"],body[data-aos-duration="350"] [data-aos]{transition-duration:.35s}[data-aos][data-aos][data-aos-delay="350"],body[data-aos-delay="350"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="350"].aos-animate,body[data-aos-delay="350"] [data-aos].aos-animate{transition-delay:.35s}[data-aos][data-aos][data-aos-duration="400"],body[data-aos-duration="400"] [data-aos]{transition-duration:.4s}[data-aos][data-aos][data-aos-delay="400"],body[data-aos-delay="400"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="400"].aos-animate,body[data-aos-delay="400"] [data-aos].aos-animate{transition-delay:.4s}[data-aos][data-aos][data-aos-duration="450"],body[data-aos-duration="450"] [data-aos]{transition-duration:.45s}[data-aos][data-aos][data-aos-delay="450"],body[data-aos-delay="450"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="450"].aos-animate,body[data-aos-delay="450"] [data-aos].aos-animate{transition-delay:.45s}[data-aos][data-aos][data-aos-duration="500"],body[data-aos-duration="500"] [data-aos]{transition-duration:.5s}[data-aos][data-aos][data-aos-delay="500"],body[data-aos-delay="500"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="500"].aos-animate,body[data-aos-delay="500"] [data-aos].aos-animate{transition-delay:.5s}[data-aos][data-aos][data-aos-duration="550"],body[data-aos-duration="550"] [data-aos]{transition-duration:.55s}[data-aos][data-aos][data-aos-delay="550"],body[data-aos-delay="550"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="550"].aos-animate,body[data-aos-delay="550"] [data-aos].aos-animate{transition-delay:.55s}[data-aos][data-aos][data-aos-duration="600"],body[data-aos-duration="600"] [data-aos]{transition-duration:.6s}[data-aos][data-aos][data-aos-delay="600"],body[data-aos-delay="600"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="600"].aos-animate,body[data-aos-delay="600"] [data-aos].aos-animate{transition-delay:.6s}[data-aos][data-aos][data-aos-duration="650"],body[data-aos-duration="650"] [data-aos]{transition-duration:.65s}[data-aos][data-aos][data-aos-delay="650"],body[data-aos-delay="650"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="650"].aos-animate,body[data-aos-delay="650"] [data-aos].aos-animate{transition-delay:.65s}[data-aos][data-aos][data-aos-duration="700"],body[data-aos-duration="700"] [data-aos]{transition-duration:.7s}[data-aos][data-aos][data-aos-delay="700"],body[data-aos-delay="700"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="700"].aos-animate,body[data-aos-delay="700"] [data-aos].aos-animate{transition-delay:.7s}[data-aos][data-aos][data-aos-duration="750"],body[data-aos-duration="750"] [data-aos]{transition-duration:.75s}[data-aos][data-aos][data-aos-delay="750"],body[data-aos-delay="750"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="750"].aos-animate,body[data-aos-delay="750"] [data-aos].aos-animate{transition-delay:.75s}[data-aos][data-aos][data-aos-duration="800"],body[data-aos-duration="800"] [data-aos]{transition-duration:.8s}[data-aos][data-aos][data-aos-delay="800"],body[data-aos-delay="800"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="800"].aos-animate,body[data-aos-delay="800"] [data-aos].aos-animate{transition-delay:.8s}[data-aos][data-aos][data-aos-duration="850"],body[data-aos-duration="850"] [data-aos]{transition-duration:.85s}[data-aos][data-aos][data-aos-delay="850"],body[data-aos-delay="850"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="850"].aos-animate,body[data-aos-delay="850"] [data-aos].aos-animate{transition-delay:.85s}[data-aos][data-aos][data-aos-duration="900"],body[data-aos-duration="900"] [data-aos]{transition-duration:.9s}[data-aos][data-aos][data-aos-delay="900"],body[data-aos-delay="900"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="900"].aos-animate,body[data-aos-delay="900"] [data-aos].aos-animate{transition-delay:.9s}[data-aos][data-aos][data-aos-duration="950"],body[data-aos-duration="950"] [data-aos]{transition-duration:.95s}[data-aos][data-aos][data-aos-delay="950"],body[data-aos-delay="950"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="950"].aos-animate,body[data-aos-delay="950"] [data-aos].aos-animate{transition-delay:.95s}[data-aos][data-aos][data-aos-duration="1000"],body[data-aos-duration="1000"] [data-aos]{transition-duration:1s}[data-aos][data-aos][data-aos-delay="1000"],body[data-aos-delay="1000"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="1000"].aos-animate,body[data-aos-delay="1000"] [data-aos].aos-animate{transition-delay:1s}[data-aos][data-aos][data-aos-duration="1050"],body[data-aos-duration="1050"] [data-aos]{transition-duration:1.05s}[data-aos][data-aos][data-aos-delay="1050"],body[data-aos-delay="1050"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="1050"].aos-animate,body[data-aos-delay="1050"] [data-aos].aos-animate{transition-delay:1.05s}[data-aos][data-aos][data-aos-duration="1100"],body[data-aos-duration="1100"] [data-aos]{transition-duration:1.1s}[data-aos][data-aos][data-aos-delay="1100"],body[data-aos-delay="1100"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="1100"].aos-animate,body[data-aos-delay="1100"] [data-aos].aos-animate{transition-delay:1.1s}[data-aos][data-aos][data-aos-duration="1150"],body[data-aos-duration="1150"] [data-aos]{transition-duration:1.15s}[data-aos][data-aos][data-aos-delay="1150"],body[data-aos-delay="1150"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="1150"].aos-animate,body[data-aos-delay="1150"] [data-aos].aos-animate{transition-delay:1.15s}[data-aos][data-aos][data-aos-duration="1200"],body[data-aos-duration="1200"] [data-aos]{transition-duration:1.2s}[data-aos][data-aos][data-aos-delay="1200"],body[data-aos-delay="1200"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="1200"].aos-animate,body[data-aos-delay="1200"] [data-aos].aos-animate{transition-delay:1.2s}[data-aos][data-aos][data-aos-duration="1250"],body[data-aos-duration="1250"] [data-aos]{transition-duration:1.25s}[data-aos][data-aos][data-aos-delay="1250"],body[data-aos-delay="1250"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="1250"].aos-animate,body[data-aos-delay="1250"] [data-aos].aos-animate{transition-delay:1.25s}[data-aos][data-aos][data-aos-duration="1300"],body[data-aos-duration="1300"] [data-aos]{transition-duration:1.3s}[data-aos][data-aos][data-aos-delay="1300"],body[data-aos-delay="1300"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="1300"].aos-animate,body[data-aos-delay="1300"] [data-aos].aos-animate{transition-delay:1.3s}[data-aos][data-aos][data-aos-duration="1350"],body[data-aos-duration="1350"] [data-aos]{transition-duration:1.35s}[data-aos][data-aos][data-aos-delay="1350"],body[data-aos-delay="1350"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="1350"].aos-animate,body[data-aos-delay="1350"] [data-aos].aos-animate{transition-delay:1.35s}[data-aos][data-aos][data-aos-duration="1400"],body[data-aos-duration="1400"] [data-aos]{transition-duration:1.4s}[data-aos][data-aos][data-aos-delay="1400"],body[data-aos-delay="1400"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="1400"].aos-animate,body[data-aos-delay="1400"] [data-aos].aos-animate{transition-delay:1.4s}[data-aos][data-aos][data-aos-duration="1450"],body[data-aos-duration="1450"] [data-aos]{transition-duration:1.45s}[data-aos][data-aos][data-aos-delay="1450"],body[data-aos-delay="1450"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="1450"].aos-animate,body[data-aos-delay="1450"] [data-aos].aos-animate{transition-delay:1.45s}[data-aos][data-aos][data-aos-duration="1500"],body[data-aos-duration="1500"] [data-aos]{transition-duration:1.5s}[data-aos][data-aos][data-aos-delay="1500"],body[data-aos-delay="1500"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="1500"].aos-animate,body[data-aos-delay="1500"] [data-aos].aos-animate{transition-delay:1.5s}[data-aos][data-aos][data-aos-duration="1550"],body[data-aos-duration="1550"] [data-aos]{transition-duration:1.55s}[data-aos][data-aos][data-aos-delay="1550"],body[data-aos-delay="1550"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="1550"].aos-animate,body[data-aos-delay="1550"] [data-aos].aos-animate{transition-delay:1.55s}[data-aos][data-aos][data-aos-duration="1600"],body[data-aos-duration="1600"] [data-aos]{transition-duration:1.6s}[data-aos][data-aos][data-aos-delay="1600"],body[data-aos-delay="1600"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="1600"].aos-animate,body[data-aos-delay="1600"] [data-aos].aos-animate{transition-delay:1.6s}[data-aos][data-aos][data-aos-duration="1650"],body[data-aos-duration="1650"] [data-aos]{transition-duration:1.65s}[data-aos][data-aos][data-aos-delay="1650"],body[data-aos-delay="1650"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="1650"].aos-animate,body[data-aos-delay="1650"] [data-aos].aos-animate{transition-delay:1.65s}[data-aos][data-aos][data-aos-duration="1700"],body[data-aos-duration="1700"] [data-aos]{transition-duration:1.7s}[data-aos][data-aos][data-aos-delay="1700"],body[data-aos-delay="1700"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="1700"].aos-animate,body[data-aos-delay="1700"] [data-aos].aos-animate{transition-delay:1.7s}[data-aos][data-aos][data-aos-duration="1750"],body[data-aos-duration="1750"] [data-aos]{transition-duration:1.75s}[data-aos][data-aos][data-aos-delay="1750"],body[data-aos-delay="1750"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="1750"].aos-animate,body[data-aos-delay="1750"] [data-aos].aos-animate{transition-delay:1.75s}[data-aos][data-aos][data-aos-duration="1800"],body[data-aos-duration="1800"] [data-aos]{transition-duration:1.8s}[data-aos][data-aos][data-aos-delay="1800"],body[data-aos-delay="1800"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="1800"].aos-animate,body[data-aos-delay="1800"] [data-aos].aos-animate{transition-delay:1.8s}[data-aos][data-aos][data-aos-duration="1850"],body[data-aos-duration="1850"] [data-aos]{transition-duration:1.85s}[data-aos][data-aos][data-aos-delay="1850"],body[data-aos-delay="1850"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="1850"].aos-animate,body[data-aos-delay="1850"] [data-aos].aos-animate{transition-delay:1.85s}[data-aos][data-aos][data-aos-duration="1900"],body[data-aos-duration="1900"] [data-aos]{transition-duration:1.9s}[data-aos][data-aos][data-aos-delay="1900"],body[data-aos-delay="1900"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="1900"].aos-animate,body[data-aos-delay="1900"] [data-aos].aos-animate{transition-delay:1.9s}[data-aos][data-aos][data-aos-duration="1950"],body[data-aos-duration="1950"] [data-aos]{transition-duration:1.95s}[data-aos][data-aos][data-aos-delay="1950"],body[data-aos-delay="1950"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="1950"].aos-animate,body[data-aos-delay="1950"] [data-aos].aos-animate{transition-delay:1.95s}[data-aos][data-aos][data-aos-duration="2000"],body[data-aos-duration="2000"] [data-aos]{transition-duration:2s}[data-aos][data-aos][data-aos-delay="2000"],body[data-aos-delay="2000"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="2000"].aos-animate,body[data-aos-delay="2000"] [data-aos].aos-animate{transition-delay:2s}[data-aos][data-aos][data-aos-duration="2050"],body[data-aos-duration="2050"] [data-aos]{transition-duration:2.05s}[data-aos][data-aos][data-aos-delay="2050"],body[data-aos-delay="2050"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="2050"].aos-animate,body[data-aos-delay="2050"] [data-aos].aos-animate{transition-delay:2.05s}[data-aos][data-aos][data-aos-duration="2100"],body[data-aos-duration="2100"] [data-aos]{transition-duration:2.1s}[data-aos][data-aos][data-aos-delay="2100"],body[data-aos-delay="2100"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="2100"].aos-animate,body[data-aos-delay="2100"] [data-aos].aos-animate{transition-delay:2.1s}[data-aos][data-aos][data-aos-duration="2150"],body[data-aos-duration="2150"] [data-aos]{transition-duration:2.15s}[data-aos][data-aos][data-aos-delay="2150"],body[data-aos-delay="2150"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="2150"].aos-animate,body[data-aos-delay="2150"] [data-aos].aos-animate{transition-delay:2.15s}[data-aos][data-aos][data-aos-duration="2200"],body[data-aos-duration="2200"] [data-aos]{transition-duration:2.2s}[data-aos][data-aos][data-aos-delay="2200"],body[data-aos-delay="2200"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="2200"].aos-animate,body[data-aos-delay="2200"] [data-aos].aos-animate{transition-delay:2.2s}[data-aos][data-aos][data-aos-duration="2250"],body[data-aos-duration="2250"] [data-aos]{transition-duration:2.25s}[data-aos][data-aos][data-aos-delay="2250"],body[data-aos-delay="2250"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="2250"].aos-animate,body[data-aos-delay="2250"] [data-aos].aos-animate{transition-delay:2.25s}[data-aos][data-aos][data-aos-duration="2300"],body[data-aos-duration="2300"] [data-aos]{transition-duration:2.3s}[data-aos][data-aos][data-aos-delay="2300"],body[data-aos-delay="2300"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="2300"].aos-animate,body[data-aos-delay="2300"] [data-aos].aos-animate{transition-delay:2.3s}[data-aos][data-aos][data-aos-duration="2350"],body[data-aos-duration="2350"] [data-aos]{transition-duration:2.35s}[data-aos][data-aos][data-aos-delay="2350"],body[data-aos-delay="2350"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="2350"].aos-animate,body[data-aos-delay="2350"] [data-aos].aos-animate{transition-delay:2.35s}[data-aos][data-aos][data-aos-duration="2400"],body[data-aos-duration="2400"] [data-aos]{transition-duration:2.4s}[data-aos][data-aos][data-aos-delay="2400"],body[data-aos-delay="2400"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="2400"].aos-animate,body[data-aos-delay="2400"] [data-aos].aos-animate{transition-delay:2.4s}[data-aos][data-aos][data-aos-duration="2450"],body[data-aos-duration="2450"] [data-aos]{transition-duration:2.45s}[data-aos][data-aos][data-aos-delay="2450"],body[data-aos-delay="2450"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="2450"].aos-animate,body[data-aos-delay="2450"] [data-aos].aos-animate{transition-delay:2.45s}[data-aos][data-aos][data-aos-duration="2500"],body[data-aos-duration="2500"] [data-aos]{transition-duration:2.5s}[data-aos][data-aos][data-aos-delay="2500"],body[data-aos-delay="2500"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="2500"].aos-animate,body[data-aos-delay="2500"] [data-aos].aos-animate{transition-delay:2.5s}[data-aos][data-aos][data-aos-duration="2550"],body[data-aos-duration="2550"] [data-aos]{transition-duration:2.55s}[data-aos][data-aos][data-aos-delay="2550"],body[data-aos-delay="2550"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="2550"].aos-animate,body[data-aos-delay="2550"] [data-aos].aos-animate{transition-delay:2.55s}[data-aos][data-aos][data-aos-duration="2600"],body[data-aos-duration="2600"] [data-aos]{transition-duration:2.6s}[data-aos][data-aos][data-aos-delay="2600"],body[data-aos-delay="2600"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="2600"].aos-animate,body[data-aos-delay="2600"] [data-aos].aos-animate{transition-delay:2.6s}[data-aos][data-aos][data-aos-duration="2650"],body[data-aos-duration="2650"] [data-aos]{transition-duration:2.65s}[data-aos][data-aos][data-aos-delay="2650"],body[data-aos-delay="2650"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="2650"].aos-animate,body[data-aos-delay="2650"] [data-aos].aos-animate{transition-delay:2.65s}[data-aos][data-aos][data-aos-duration="2700"],body[data-aos-duration="2700"] [data-aos]{transition-duration:2.7s}[data-aos][data-aos][data-aos-delay="2700"],body[data-aos-delay="2700"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="2700"].aos-animate,body[data-aos-delay="2700"] [data-aos].aos-animate{transition-delay:2.7s}[data-aos][data-aos][data-aos-duration="2750"],body[data-aos-duration="2750"] [data-aos]{transition-duration:2.75s}[data-aos][data-aos][data-aos-delay="2750"],body[data-aos-delay="2750"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="2750"].aos-animate,body[data-aos-delay="2750"] [data-aos].aos-animate{transition-delay:2.75s}[data-aos][data-aos][data-aos-duration="2800"],body[data-aos-duration="2800"] [data-aos]{transition-duration:2.8s}[data-aos][data-aos][data-aos-delay="2800"],body[data-aos-delay="2800"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="2800"].aos-animate,body[data-aos-delay="2800"] [data-aos].aos-animate{transition-delay:2.8s}[data-aos][data-aos][data-aos-duration="2850"],body[data-aos-duration="2850"] [data-aos]{transition-duration:2.85s}[data-aos][data-aos][data-aos-delay="2850"],body[data-aos-delay="2850"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="2850"].aos-animate,body[data-aos-delay="2850"] [data-aos].aos-animate{transition-delay:2.85s}[data-aos][data-aos][data-aos-duration="2900"],body[data-aos-duration="2900"] [data-aos]{transition-duration:2.9s}[data-aos][data-aos][data-aos-delay="2900"],body[data-aos-delay="2900"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="2900"].aos-animate,body[data-aos-delay="2900"] [data-aos].aos-animate{transition-delay:2.9s}[data-aos][data-aos][data-aos-duration="2950"],body[data-aos-duration="2950"] [data-aos]{transition-duration:2.95s}[data-aos][data-aos][data-aos-delay="2950"],body[data-aos-delay="2950"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="2950"].aos-animate,body[data-aos-delay="2950"] [data-aos].aos-animate{transition-delay:2.95s}[data-aos][data-aos][data-aos-duration="3000"],body[data-aos-duration="3000"] [data-aos]{transition-duration:3s}[data-aos][data-aos][data-aos-delay="3000"],body[data-aos-delay="3000"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="3000"].aos-animate,body[data-aos-delay="3000"] [data-aos].aos-animate{transition-delay:3s}[data-aos][data-aos][data-aos-easing=linear],body[data-aos-easing=linear] [data-aos]{transition-timing-function:cubic-bezier(.25,.25,.75,.75)}[data-aos][data-aos][data-aos-easing=ease],body[data-aos-easing=ease] [data-aos]{transition-timing-function:ease}[data-aos][data-aos][data-aos-easing=ease-in],body[data-aos-easing=ease-in] [data-aos]{transition-timing-function:ease-in}[data-aos][data-aos][data-aos-easing=ease-out],body[data-aos-easing=ease-out] [data-aos]{transition-timing-function:ease-out}[data-aos][data-aos][data-aos-easing=ease-in-out],body[data-aos-easing=ease-in-out] [data-aos]{transition-timing-function:ease-in-out}[data-aos][data-aos][data-aos-easing=ease-in-back],body[data-aos-easing=ease-in-back] [data-aos]{transition-timing-function:cubic-bezier(.6,-.28,.735,.045)}[data-aos][data-aos][data-aos-easing=ease-out-back],body[data-aos-easing=ease-out-back] [data-aos]{transition-timing-function:cubic-bezier(.175,.885,.32,1.275)}[data-aos][data-aos][data-aos-easing=ease-in-out-back],body[data-aos-easing=ease-in-out-back] [data-aos]{transition-timing-function:cubic-bezier(.68,-.55,.265,1.55)}[data-aos][data-aos][data-aos-easing=ease-in-sine],body[data-aos-easing=ease-in-sine] [data-aos]{transition-timing-function:cubic-bezier(.47,0,.745,.715)}[data-aos][data-aos][data-aos-easing=ease-out-sine],body[data-aos-easing=ease-out-sine] [data-aos]{transition-timing-function:cubic-bezier(.39,.575,.565,1)}[data-aos][data-aos][data-aos-easing=ease-in-out-sine],body[data-aos-easing=ease-in-out-sine] [data-aos]{transition-timing-function:cubic-bezier(.445,.05,.55,.95)}[data-aos][data-aos][data-aos-easing=ease-in-quad],body[data-aos-easing=ease-in-quad] [data-aos]{transition-timing-function:cubic-bezier(.55,.085,.68,.53)}[data-aos][data-aos][data-aos-easing=ease-out-quad],body[data-aos-easing=ease-out-quad] [data-aos]{transition-timing-function:cubic-bezier(.25,.46,.45,.94)}[data-aos][data-aos][data-aos-easing=ease-in-out-quad],body[data-aos-easing=ease-in-out-quad] [data-aos]{transition-timing-function:cubic-bezier(.455,.03,.515,.955)}[data-aos][data-aos][data-aos-easing=ease-in-cubic],body[data-aos-easing=ease-in-cubic] [data-aos]{transition-timing-function:cubic-bezier(.55,.085,.68,.53)}[data-aos][data-aos][data-aos-easing=ease-out-cubic],body[data-aos-easing=ease-out-cubic] [data-aos]{transition-timing-function:cubic-bezier(.25,.46,.45,.94)}[data-aos][data-aos][data-aos-easing=ease-in-out-cubic],body[data-aos-easing=ease-in-out-cubic] [data-aos]{transition-timing-function:cubic-bezier(.455,.03,.515,.955)}[data-aos][data-aos][data-aos-easing=ease-in-quart],body[data-aos-easing=ease-in-quart] [data-aos]{transition-timing-function:cubic-bezier(.55,.085,.68,.53)}[data-aos][data-aos][data-aos-easing=ease-out-quart],body[data-aos-easing=ease-out-quart] [data-aos]{transition-timing-function:cubic-bezier(.25,.46,.45,.94)}[data-aos][data-aos][data-aos-easing=ease-in-out-quart],body[data-aos-easing=ease-in-out-quart] [data-aos]{transition-timing-function:cubic-bezier(.455,.03,.515,.955)}[data-aos^=fade][data-aos^=fade]{opacity:0;transition-property:opacity,transform}[data-aos^=fade][data-aos^=fade].aos-animate{opacity:1;transform:translateZ(0)}[data-aos=fade-up]{transform:translate3d(0,100px,0)}[data-aos=fade-down]{transform:translate3d(0,-100px,0)}[data-aos=fade-right]{transform:translate3d(-100px,0,0)}[data-aos=fade-left]{transform:translate3d(100px,0,0)}[data-aos=fade-up-right]{transform:translate3d(-100px,100px,0)}[data-aos=fade-up-left]{transform:translate3d(100px,100px,0)}[data-aos=fade-down-right]{transform:translate3d(-100px,-100px,0)}[data-aos=fade-down-left]{transform:translate3d(100px,-100px,0)}[data-aos^=zoom][data-aos^=zoom]{opacity:0;transition-property:opacity,transform}[data-aos^=zoom][data-aos^=zoom].aos-animate{opacity:1;transform:translateZ(0) scale(1)}[data-aos=zoom-in]{transform:scale(.6)}[data-aos=zoom-in-up]{transform:translate3d(0,100px,0) scale(.6)}[data-aos=zoom-in-down]{transform:translate3d(0,-100px,0) scale(.6)}[data-aos=zoom-in-right]{transform:translate3d(-100px,0,0) scale(.6)}[data-aos=zoom-in-left]{transform:translate3d(100px,0,0) scale(.6)}[data-aos=zoom-out]{transform:scale(1.2)}[data-aos=zoom-out-up]{transform:translate3d(0,100px,0) scale(1.2)}[data-aos=zoom-out-down]{transform:translate3d(0,-100px,0) scale(1.2)}[data-aos=zoom-out-right]{transform:translate3d(-100px,0,0) scale(1.2)}[data-aos=zoom-out-left]{transform:translate3d(100px,0,0) scale(1.2)}[data-aos^=slide][data-aos^=slide]{transition-property:transform}[data-aos^=slide][data-aos^=slide].aos-animate{transform:translateZ(0)}[data-aos=slide-up]{transform:translate3d(0,100%,0)}[data-aos=slide-down]{transform:translate3d(0,-100%,0)}[data-aos=slide-right]{transform:translate3d(-100%,0,0)}[data-aos=slide-left]{transform:translate3d(100%,0,0)}[data-aos^=flip][data-aos^=flip]{backface-visibility:hidden;transition-property:transform}[data-aos=flip-left]{transform:perspective(2500px) rotateY(-100deg)}[data-aos=flip-left].aos-animate{transform:perspective(2500px) rotateY(0)}[data-aos=flip-right]{transform:perspective(2500px) rotateY(100deg)}[data-aos=flip-right].aos-animate{transform:perspective(2500px) rotateY(0)}[data-aos=flip-up]{transform:perspective(2500px) rotateX(-100deg)}[data-aos=flip-up].aos-animate{transform:perspective(2500px) rotateX(0)}[data-aos=flip-down]{transform:perspective(2500px) rotateX(100deg)}[data-aos=flip-down].aos-animate{transform:perspective(2500px) rotateX(0)}'],sourceRoot:""}]);const s=n},3715:(t,a,e)=>{var r=a;r.utils=e(6436),r.common=e(5772),r.sha=e(9041),r.ripemd=e(2949),r.hmac=e(2344),r.sha1=r.sha.sha1,r.sha256=r.sha.sha256,r.sha224=r.sha.sha224,r.sha384=r.sha.sha384,r.sha512=r.sha.sha512,r.ripemd160=r.ripemd.ripemd160},5772:(t,a,e)=>{"use strict";var r=e(6436),o=e(9746);function i(){this.pending=null,this.pendingTotal=0,this.blockSize=this.constructor.blockSize,this.outSize=this.constructor.outSize,this.hmacStrength=this.constructor.hmacStrength,this.padLength=this.constructor.padLength/8,this.endian="big",this._delta8=this.blockSize/8,this._delta32=this.blockSize/32}a.BlockHash=i,i.prototype.update=function(t,a){if(t=r.toArray(t,a),this.pending?this.pending=this.pending.concat(t):this.pending=t,this.pendingTotal+=t.length,this.pending.length>=this._delta8){var e=(t=this.pending).length%this._delta8;this.pending=t.slice(t.length-e,t.length),0===this.pending.length&&(this.pending=null),t=r.join32(t,0,t.length-e,this.endian);for(var o=0;o<t.length;o+=this._delta32)this._update(t,o,o+this._delta32)}return this},i.prototype.digest=function(t){return this.update(this._pad()),o(null===this.pending),this._digest(t)},i.prototype._pad=function(){var t=this.pendingTotal,a=this._delta8,e=a-(t+this.padLength)%a,r=new Array(e+this.padLength);r[0]=128;for(var o=1;o<e;o++)r[o]=0;if(t<<=3,"big"===this.endian){for(var i=8;i<this.padLength;i++)r[o++]=0;r[o++]=0,r[o++]=0,r[o++]=0,r[o++]=0,r[o++]=t>>>24&255,r[o++]=t>>>16&255,r[o++]=t>>>8&255,r[o++]=255&t}else for(r[o++]=255&t,r[o++]=t>>>8&255,r[o++]=t>>>16&255,r[o++]=t>>>24&255,r[o++]=0,r[o++]=0,r[o++]=0,r[o++]=0,i=8;i<this.padLength;i++)r[o++]=0;return r}},2344:(t,a,e)=>{"use strict";var r=e(6436),o=e(9746);function i(t,a,e){if(!(this instanceof i))return new i(t,a,e);this.Hash=t,this.blockSize=t.blockSize/8,this.outSize=t.outSize/8,this.inner=null,this.outer=null,this._init(r.toArray(a,e))}t.exports=i,i.prototype._init=function(t){t.length>this.blockSize&&(t=(new this.Hash).update(t).digest()),o(t.length<=this.blockSize);for(var a=t.length;a<this.blockSize;a++)t.push(0);for(a=0;a<t.length;a++)t[a]^=54;for(this.inner=(new this.Hash).update(t),a=0;a<t.length;a++)t[a]^=106;this.outer=(new this.Hash).update(t)},i.prototype.update=function(t,a){return this.inner.update(t,a),this},i.prototype.digest=function(t){return this.outer.update(this.inner.digest()),this.outer.digest(t)}},2949:(t,a,e)=>{"use strict";var r=e(6436),o=e(5772),i=r.rotl32,n=r.sum32,s=r.sum32_3,d=r.sum32_4,u=o.BlockHash;function l(){if(!(this instanceof l))return new l;u.call(this),this.h=[1732584193,4023233417,2562383102,271733878,3285377520],this.endian="little"}function h(t,a,e,r){return t<=15?a^e^r:t<=31?a&e|~a&r:t<=47?(a|~e)^r:t<=63?a&r|e&~r:a^(e|~r)}function f(t){return t<=15?0:t<=31?1518500249:t<=47?1859775393:t<=63?2400959708:2840853838}function c(t){return t<=15?1352829926:t<=31?1548603684:t<=47?1836072691:t<=63?2053994217:0}r.inherits(l,u),a.ripemd160=l,l.blockSize=512,l.outSize=160,l.hmacStrength=192,l.padLength=64,l.prototype._update=function(t,a){for(var e=this.h[0],r=this.h[1],o=this.h[2],u=this.h[3],l=this.h[4],v=e,b=r,A=o,w=u,M=l,_=0;_<80;_++){var k=n(i(d(e,h(_,r,o,u),t[m[_]+a],f(_)),y[_]),l);e=l,l=u,u=i(o,10),o=r,r=k,k=n(i(d(v,h(79-_,b,A,w),t[p[_]+a],c(_)),g[_]),M),v=M,M=w,w=i(A,10),A=b,b=k}k=s(this.h[1],o,w),this.h[1]=s(this.h[2],u,M),this.h[2]=s(this.h[3],l,v),this.h[3]=s(this.h[4],e,b),this.h[4]=s(this.h[0],r,A),this.h[0]=k},l.prototype._digest=function(t){return"hex"===t?r.toHex32(this.h,"little"):r.split32(this.h,"little")};var m=[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,7,4,13,1,10,6,15,3,12,0,9,5,2,14,11,8,3,10,14,4,9,15,8,1,2,7,0,6,13,11,5,12,1,9,11,10,0,8,12,4,13,3,7,15,14,5,6,2,4,0,5,9,7,12,2,10,14,1,3,8,11,6,15,13],p=[5,14,7,0,9,2,11,4,13,6,15,8,1,10,3,12,6,11,3,7,0,13,5,10,14,15,8,12,4,9,1,2,15,5,1,3,7,14,6,9,11,8,12,2,10,0,4,13,8,6,4,1,3,11,15,0,5,12,2,13,9,7,10,14,12,15,10,4,1,5,8,7,6,2,13,14,0,3,9,11],y=[11,14,15,12,5,8,7,9,11,13,14,15,6,7,9,8,7,6,8,13,11,9,7,15,7,12,15,9,11,7,13,12,11,13,6,7,14,9,13,15,14,8,13,6,5,12,7,5,11,12,14,15,14,15,9,8,9,14,5,6,8,6,5,12,9,15,5,11,6,8,13,12,5,12,13,14,11,8,5,6],g=[8,9,9,11,13,15,15,5,7,7,8,11,14,14,12,6,9,13,15,7,12,8,9,11,7,7,12,7,6,15,13,11,9,7,15,11,8,6,6,14,12,13,5,14,13,13,7,5,15,5,8,11,14,14,6,14,6,9,12,9,12,5,15,8,8,5,12,9,12,5,14,6,8,13,6,5,15,13,11,11]},9041:(t,a,e)=>{"use strict";a.sha1=e(4761),a.sha224=e(799),a.sha256=e(9344),a.sha384=e(772),a.sha512=e(5900)},4761:(t,a,e)=>{"use strict";var r=e(6436),o=e(5772),i=e(7038),n=r.rotl32,s=r.sum32,d=r.sum32_5,u=i.ft_1,l=o.BlockHash,h=[1518500249,1859775393,2400959708,3395469782];function f(){if(!(this instanceof f))return new f;l.call(this),this.h=[1732584193,4023233417,2562383102,271733878,3285377520],this.W=new Array(80)}r.inherits(f,l),t.exports=f,f.blockSize=512,f.outSize=160,f.hmacStrength=80,f.padLength=64,f.prototype._update=function(t,a){for(var e=this.W,r=0;r<16;r++)e[r]=t[a+r];for(;r<e.length;r++)e[r]=n(e[r-3]^e[r-8]^e[r-14]^e[r-16],1);var o=this.h[0],i=this.h[1],l=this.h[2],f=this.h[3],c=this.h[4];for(r=0;r<e.length;r++){var m=~~(r/20),p=d(n(o,5),u(m,i,l,f),c,e[r],h[m]);c=f,f=l,l=n(i,30),i=o,o=p}this.h[0]=s(this.h[0],o),this.h[1]=s(this.h[1],i),this.h[2]=s(this.h[2],l),this.h[3]=s(this.h[3],f),this.h[4]=s(this.h[4],c)},f.prototype._digest=function(t){return"hex"===t?r.toHex32(this.h,"big"):r.split32(this.h,"big")}},799:(t,a,e)=>{"use strict";var r=e(6436),o=e(9344);function i(){if(!(this instanceof i))return new i;o.call(this),this.h=[3238371032,914150663,812702999,4144912697,4290775857,1750603025,1694076839,3204075428]}r.inherits(i,o),t.exports=i,i.blockSize=512,i.outSize=224,i.hmacStrength=192,i.padLength=64,i.prototype._digest=function(t){return"hex"===t?r.toHex32(this.h.slice(0,7),"big"):r.split32(this.h.slice(0,7),"big")}},9344:(t,a,e)=>{"use strict";var r=e(6436),o=e(5772),i=e(7038),n=e(9746),s=r.sum32,d=r.sum32_4,u=r.sum32_5,l=i.ch32,h=i.maj32,f=i.s0_256,c=i.s1_256,m=i.g0_256,p=i.g1_256,y=o.BlockHash,g=[1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298];function v(){if(!(this instanceof v))return new v;y.call(this),this.h=[1779033703,3144134277,1013904242,2773480762,1359893119,2600822924,528734635,1541459225],this.k=g,this.W=new Array(64)}r.inherits(v,y),t.exports=v,v.blockSize=512,v.outSize=256,v.hmacStrength=192,v.padLength=64,v.prototype._update=function(t,a){for(var e=this.W,r=0;r<16;r++)e[r]=t[a+r];for(;r<e.length;r++)e[r]=d(p(e[r-2]),e[r-7],m(e[r-15]),e[r-16]);var o=this.h[0],i=this.h[1],y=this.h[2],g=this.h[3],v=this.h[4],b=this.h[5],A=this.h[6],w=this.h[7];for(n(this.k.length===e.length),r=0;r<e.length;r++){var M=u(w,c(v),l(v,b,A),this.k[r],e[r]),_=s(f(o),h(o,i,y));w=A,A=b,b=v,v=s(g,M),g=y,y=i,i=o,o=s(M,_)}this.h[0]=s(this.h[0],o),this.h[1]=s(this.h[1],i),this.h[2]=s(this.h[2],y),this.h[3]=s(this.h[3],g),this.h[4]=s(this.h[4],v),this.h[5]=s(this.h[5],b),this.h[6]=s(this.h[6],A),this.h[7]=s(this.h[7],w)},v.prototype._digest=function(t){return"hex"===t?r.toHex32(this.h,"big"):r.split32(this.h,"big")}},772:(t,a,e)=>{"use strict";var r=e(6436),o=e(5900);function i(){if(!(this instanceof i))return new i;o.call(this),this.h=[3418070365,3238371032,1654270250,914150663,2438529370,812702999,355462360,4144912697,1731405415,4290775857,2394180231,1750603025,3675008525,1694076839,1203062813,3204075428]}r.inherits(i,o),t.exports=i,i.blockSize=1024,i.outSize=384,i.hmacStrength=192,i.padLength=128,i.prototype._digest=function(t){return"hex"===t?r.toHex32(this.h.slice(0,12),"big"):r.split32(this.h.slice(0,12),"big")}},5900:(t,a,e)=>{"use strict";var r=e(6436),o=e(5772),i=e(9746),n=r.rotr64_hi,s=r.rotr64_lo,d=r.shr64_hi,u=r.shr64_lo,l=r.sum64,h=r.sum64_hi,f=r.sum64_lo,c=r.sum64_4_hi,m=r.sum64_4_lo,p=r.sum64_5_hi,y=r.sum64_5_lo,g=o.BlockHash,v=[1116352408,3609767458,1899447441,602891725,3049323471,3964484399,3921009573,2173295548,961987163,4081628472,1508970993,3053834265,2453635748,2937671579,2870763221,3664609560,3624381080,2734883394,310598401,1164996542,607225278,1323610764,1426881987,3590304994,1925078388,4068182383,2162078206,991336113,2614888103,633803317,3248222580,3479774868,3835390401,2666613458,4022224774,944711139,264347078,2341262773,604807628,2007800933,770255983,1495990901,1249150122,1856431235,1555081692,3175218132,1996064986,2198950837,2554220882,3999719339,2821834349,766784016,2952996808,2566594879,3210313671,3203337956,3336571891,1034457026,3584528711,2466948901,113926993,3758326383,338241895,168717936,666307205,1188179964,773529912,1546045734,1294757372,1522805485,1396182291,2643833823,1695183700,2343527390,1986661051,1014477480,2177026350,1206759142,2456956037,344077627,2730485921,1290863460,2820302411,3158454273,3259730800,3505952657,3345764771,106217008,3516065817,3606008344,3600352804,1432725776,4094571909,1467031594,275423344,851169720,430227734,3100823752,506948616,1363258195,659060556,3750685593,883997877,3785050280,958139571,3318307427,1322822218,3812723403,1537002063,2003034995,1747873779,3602036899,1955562222,1575990012,2024104815,1125592928,2227730452,2716904306,2361852424,442776044,2428436474,593698344,2756734187,3733110249,3204031479,2999351573,3329325298,3815920427,3391569614,3928383900,3515267271,566280711,3940187606,3454069534,4118630271,4000239992,116418474,1914138554,174292421,2731055270,289380356,3203993006,460393269,320620315,685471733,587496836,852142971,1086792851,1017036298,365543100,1126000580,2618297676,1288033470,3409855158,1501505948,4234509866,1607167915,987167468,1816402316,1246189591];function b(){if(!(this instanceof b))return new b;g.call(this),this.h=[1779033703,4089235720,3144134277,2227873595,1013904242,4271175723,2773480762,1595750129,1359893119,2917565137,2600822924,725511199,528734635,4215389547,1541459225,327033209],this.k=v,this.W=new Array(160)}function A(t,a,e,r,o){var i=t&e^~t&o;return i<0&&(i+=4294967296),i}function w(t,a,e,r,o,i){var n=a&r^~a&i;return n<0&&(n+=4294967296),n}function M(t,a,e,r,o){var i=t&e^t&o^e&o;return i<0&&(i+=4294967296),i}function _(t,a,e,r,o,i){var n=a&r^a&i^r&i;return n<0&&(n+=4294967296),n}function k(t,a){var e=n(t,a,28)^n(a,t,2)^n(a,t,7);return e<0&&(e+=4294967296),e}function B(t,a){var e=s(t,a,28)^s(a,t,2)^s(a,t,7);return e<0&&(e+=4294967296),e}function C(t,a){var e=s(t,a,14)^s(t,a,18)^s(a,t,9);return e<0&&(e+=4294967296),e}function E(t,a){var e=n(t,a,1)^n(t,a,8)^d(t,a,7);return e<0&&(e+=4294967296),e}function x(t,a){var e=s(t,a,1)^s(t,a,8)^u(t,a,7);return e<0&&(e+=4294967296),e}function N(t,a){var e=s(t,a,19)^s(a,t,29)^u(t,a,6);return e<0&&(e+=4294967296),e}r.inherits(b,g),t.exports=b,b.blockSize=1024,b.outSize=512,b.hmacStrength=192,b.padLength=128,b.prototype._prepareBlock=function(t,a){for(var e=this.W,r=0;r<32;r++)e[r]=t[a+r];for(;r<e.length;r+=2){var o=(y=e[r-4],g=e[r-3],v=void 0,(v=n(y,g,19)^n(g,y,29)^d(y,g,6))<0&&(v+=4294967296),v),i=N(e[r-4],e[r-3]),s=e[r-14],u=e[r-13],l=E(e[r-30],e[r-29]),h=x(e[r-30],e[r-29]),f=e[r-32],p=e[r-31];e[r]=c(o,i,s,u,l,h,f,p),e[r+1]=m(o,i,s,u,l,h,f,p)}var y,g,v},b.prototype._update=function(t,a){this._prepareBlock(t,a);var e,r,o,s=this.W,d=this.h[0],u=this.h[1],c=this.h[2],m=this.h[3],g=this.h[4],v=this.h[5],b=this.h[6],E=this.h[7],x=this.h[8],N=this.h[9],F=this.h[10],S=this.h[11],P=this.h[12],O=this.h[13],R=this.h[14],I=this.h[15];i(this.k.length===s.length);for(var T=0;T<s.length;T+=2){var q=R,G=I,L=(o=void 0,(o=n(e=x,r=N,14)^n(e,r,18)^n(r,e,9))<0&&(o+=4294967296),o),z=C(x,N),D=A(x,0,F,0,P),U=w(0,N,0,S,0,O),j=this.k[T],$=this.k[T+1],Y=s[T],H=s[T+1],W=p(q,G,L,z,D,U,j,$,Y,H),V=y(q,G,L,z,D,U,j,$,Y,H);q=k(d,u),G=B(d,u),L=M(d,0,c,0,g),z=_(0,u,0,m,0,v);var Z=h(q,G,L,z),K=f(q,G,L,z);R=P,I=O,P=F,O=S,F=x,S=N,x=h(b,E,W,V),N=f(E,E,W,V),b=g,E=v,g=c,v=m,c=d,m=u,d=h(W,V,Z,K),u=f(W,V,Z,K)}l(this.h,0,d,u),l(this.h,2,c,m),l(this.h,4,g,v),l(this.h,6,b,E),l(this.h,8,x,N),l(this.h,10,F,S),l(this.h,12,P,O),l(this.h,14,R,I)},b.prototype._digest=function(t){return"hex"===t?r.toHex32(this.h,"big"):r.split32(this.h,"big")}},7038:(t,a,e)=>{"use strict";var r=e(6436).rotr32;function o(t,a,e){return t&a^~t&e}function i(t,a,e){return t&a^t&e^a&e}function n(t,a,e){return t^a^e}a.ft_1=function(t,a,e,r){return 0===t?o(a,e,r):1===t||3===t?n(a,e,r):2===t?i(a,e,r):void 0},a.ch32=o,a.maj32=i,a.p32=n,a.s0_256=function(t){return r(t,2)^r(t,13)^r(t,22)},a.s1_256=function(t){return r(t,6)^r(t,11)^r(t,25)},a.g0_256=function(t){return r(t,7)^r(t,18)^t>>>3},a.g1_256=function(t){return r(t,17)^r(t,19)^t>>>10}},6436:(t,a,e)=>{"use strict";var r=e(9746),o=e(5717);function i(t,a){return 55296==(64512&t.charCodeAt(a))&&!(a<0||a+1>=t.length)&&56320==(64512&t.charCodeAt(a+1))}function n(t){return(t>>>24|t>>>8&65280|t<<8&16711680|(255&t)<<24)>>>0}function s(t){return 1===t.length?"0"+t:t}function d(t){return 7===t.length?"0"+t:6===t.length?"00"+t:5===t.length?"000"+t:4===t.length?"0000"+t:3===t.length?"00000"+t:2===t.length?"000000"+t:1===t.length?"0000000"+t:t}a.inherits=o,a.toArray=function(t,a){if(Array.isArray(t))return t.slice();if(!t)return[];var e=[];if("string"==typeof t)if(a){if("hex"===a)for((t=t.replace(/[^a-z0-9]+/gi,"")).length%2!=0&&(t="0"+t),o=0;o<t.length;o+=2)e.push(parseInt(t[o]+t[o+1],16))}else for(var r=0,o=0;o<t.length;o++){var n=t.charCodeAt(o);n<128?e[r++]=n:n<2048?(e[r++]=n>>6|192,e[r++]=63&n|128):i(t,o)?(n=65536+((1023&n)<<10)+(1023&t.charCodeAt(++o)),e[r++]=n>>18|240,e[r++]=n>>12&63|128,e[r++]=n>>6&63|128,e[r++]=63&n|128):(e[r++]=n>>12|224,e[r++]=n>>6&63|128,e[r++]=63&n|128)}else for(o=0;o<t.length;o++)e[o]=0|t[o];return e},a.toHex=function(t){for(var a="",e=0;e<t.length;e++)a+=s(t[e].toString(16));return a},a.htonl=n,a.toHex32=function(t,a){for(var e="",r=0;r<t.length;r++){var o=t[r];"little"===a&&(o=n(o)),e+=d(o.toString(16))}return e},a.zero2=s,a.zero8=d,a.join32=function(t,a,e,o){var i=e-a;r(i%4==0);for(var n=new Array(i/4),s=0,d=a;s<n.length;s++,d+=4){var u;u="big"===o?t[d]<<24|t[d+1]<<16|t[d+2]<<8|t[d+3]:t[d+3]<<24|t[d+2]<<16|t[d+1]<<8|t[d],n[s]=u>>>0}return n},a.split32=function(t,a){for(var e=new Array(4*t.length),r=0,o=0;r<t.length;r++,o+=4){var i=t[r];"big"===a?(e[o]=i>>>24,e[o+1]=i>>>16&255,e[o+2]=i>>>8&255,e[o+3]=255&i):(e[o+3]=i>>>24,e[o+2]=i>>>16&255,e[o+1]=i>>>8&255,e[o]=255&i)}return e},a.rotr32=function(t,a){return t>>>a|t<<32-a},a.rotl32=function(t,a){return t<<a|t>>>32-a},a.sum32=function(t,a){return t+a>>>0},a.sum32_3=function(t,a,e){return t+a+e>>>0},a.sum32_4=function(t,a,e,r){return t+a+e+r>>>0},a.sum32_5=function(t,a,e,r,o){return t+a+e+r+o>>>0},a.sum64=function(t,a,e,r){var o=t[a],i=r+t[a+1]>>>0,n=(i<r?1:0)+e+o;t[a]=n>>>0,t[a+1]=i},a.sum64_hi=function(t,a,e,r){return(a+r>>>0<a?1:0)+t+e>>>0},a.sum64_lo=function(t,a,e,r){return a+r>>>0},a.sum64_4_hi=function(t,a,e,r,o,i,n,s){var d=0,u=a;return d+=(u=u+r>>>0)<a?1:0,d+=(u=u+i>>>0)<i?1:0,t+e+o+n+(d+=(u=u+s>>>0)<s?1:0)>>>0},a.sum64_4_lo=function(t,a,e,r,o,i,n,s){return a+r+i+s>>>0},a.sum64_5_hi=function(t,a,e,r,o,i,n,s,d,u){var l=0,h=a;return l+=(h=h+r>>>0)<a?1:0,l+=(h=h+i>>>0)<i?1:0,l+=(h=h+s>>>0)<s?1:0,t+e+o+n+d+(l+=(h=h+u>>>0)<u?1:0)>>>0},a.sum64_5_lo=function(t,a,e,r,o,i,n,s,d,u){return a+r+i+s+u>>>0},a.rotr64_hi=function(t,a,e){return(a<<32-e|t>>>e)>>>0},a.rotr64_lo=function(t,a,e){return(t<<32-e|a>>>e)>>>0},a.shr64_hi=function(t,a,e){return t>>>e},a.shr64_lo=function(t,a,e){return(t<<32-e|a>>>e)>>>0}},5717:t=>{"function"==typeof Object.create?t.exports=function(t,a){a&&(t.super_=a,t.prototype=Object.create(a.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}))}:t.exports=function(t,a){if(a){t.super_=a;var e=function(){};e.prototype=a.prototype,t.prototype=new e,t.prototype.constructor=t}}},9746:t=>{function a(t,a){if(!t)throw new Error(a||"Assertion failed")}t.exports=a,a.equal=function(t,a,e){if(t!=a)throw new Error(e||"Assertion failed: "+t+" != "+a)}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,